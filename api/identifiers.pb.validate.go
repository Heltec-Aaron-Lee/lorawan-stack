// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/identifiers.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _identifiers_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ApplicationIdentifiers with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetApplicationId()) > 36 {
		return ApplicationIdentifiersValidationError{
			field:  "ApplicationId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_ApplicationIdentifiers_ApplicationId_Pattern.MatchString(m.GetApplicationId()) {
		return ApplicationIdentifiersValidationError{
			field:  "ApplicationId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	return nil
}

// ApplicationIdentifiersValidationError is the validation error returned by
// ApplicationIdentifiers.Validate if the designated constraints aren't met.
type ApplicationIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationIdentifiersValidationError) ErrorName() string {
	return "ApplicationIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationIdentifiersValidationError{}

var _ApplicationIdentifiers_ApplicationId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on ClientIdentifiers with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ClientIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetClientId()) > 36 {
		return ClientIdentifiersValidationError{
			field:  "ClientId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_ClientIdentifiers_ClientId_Pattern.MatchString(m.GetClientId()) {
		return ClientIdentifiersValidationError{
			field:  "ClientId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	return nil
}

// ClientIdentifiersValidationError is the validation error returned by
// ClientIdentifiers.Validate if the designated constraints aren't met.
type ClientIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientIdentifiersValidationError) ErrorName() string {
	return "ClientIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e ClientIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientIdentifiersValidationError{}

var _ClientIdentifiers_ClientId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on EndDeviceIdentifiers with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EndDeviceIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetDeviceId()) > 36 {
		return EndDeviceIdentifiersValidationError{
			field:  "DeviceId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_EndDeviceIdentifiers_DeviceId_Pattern.MatchString(m.GetDeviceId()) {
		return EndDeviceIdentifiersValidationError{
			field:  "DeviceId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	if m.GetApplicationIds() == nil {
		return EndDeviceIdentifiersValidationError{
			field:  "ApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceIdentifiersValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DevEui

	// no validation rules for JoinEui

	// no validation rules for DevAddr

	return nil
}

// EndDeviceIdentifiersValidationError is the validation error returned by
// EndDeviceIdentifiers.Validate if the designated constraints aren't met.
type EndDeviceIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceIdentifiersValidationError) ErrorName() string {
	return "EndDeviceIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceIdentifiersValidationError{}

var _EndDeviceIdentifiers_DeviceId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on GatewayIdentifiers with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GatewayIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetGatewayId()) > 36 {
		return GatewayIdentifiersValidationError{
			field:  "GatewayId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_GatewayIdentifiers_GatewayId_Pattern.MatchString(m.GetGatewayId()) {
		return GatewayIdentifiersValidationError{
			field:  "GatewayId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	// no validation rules for Eui

	return nil
}

// GatewayIdentifiersValidationError is the validation error returned by
// GatewayIdentifiers.Validate if the designated constraints aren't met.
type GatewayIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayIdentifiersValidationError) ErrorName() string {
	return "GatewayIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e GatewayIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayIdentifiersValidationError{}

var _GatewayIdentifiers_GatewayId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on OrganizationIdentifiers with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OrganizationIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetOrganizationId()) > 36 {
		return OrganizationIdentifiersValidationError{
			field:  "OrganizationId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_OrganizationIdentifiers_OrganizationId_Pattern.MatchString(m.GetOrganizationId()) {
		return OrganizationIdentifiersValidationError{
			field:  "OrganizationId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	return nil
}

// OrganizationIdentifiersValidationError is the validation error returned by
// OrganizationIdentifiers.Validate if the designated constraints aren't met.
type OrganizationIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationIdentifiersValidationError) ErrorName() string {
	return "OrganizationIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationIdentifiersValidationError{}

var _OrganizationIdentifiers_OrganizationId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on UserIdentifiers with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUserId()) > 36 {
		return UserIdentifiersValidationError{
			field:  "UserId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_UserIdentifiers_UserId_Pattern.MatchString(m.GetUserId()) {
		return UserIdentifiersValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	// no validation rules for Email

	return nil
}

// UserIdentifiersValidationError is the validation error returned by
// UserIdentifiers.Validate if the designated constraints aren't met.
type UserIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIdentifiersValidationError) ErrorName() string { return "UserIdentifiersValidationError" }

// Error satisfies the builtin error interface
func (e UserIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIdentifiersValidationError{}

var _UserIdentifiers_UserId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on OrganizationOrUserIdentifiers with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OrganizationOrUserIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Ids.(type) {

	case *OrganizationOrUserIdentifiers_OrganizationIds:

		if v, ok := interface{}(m.GetOrganizationIds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrganizationOrUserIdentifiersValidationError{
					field:  "OrganizationIds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *OrganizationOrUserIdentifiers_UserIds:

		if v, ok := interface{}(m.GetUserIds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrganizationOrUserIdentifiersValidationError{
					field:  "UserIds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return OrganizationOrUserIdentifiersValidationError{
			field:  "Ids",
			reason: "value is required",
		}

	}

	return nil
}

// OrganizationOrUserIdentifiersValidationError is the validation error
// returned by OrganizationOrUserIdentifiers.Validate if the designated
// constraints aren't met.
type OrganizationOrUserIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationOrUserIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationOrUserIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationOrUserIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationOrUserIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationOrUserIdentifiersValidationError) ErrorName() string {
	return "OrganizationOrUserIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationOrUserIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationOrUserIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationOrUserIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationOrUserIdentifiersValidationError{}

// Validate checks the field values on EntityIdentifiers with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EntityIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Ids.(type) {

	case *EntityIdentifiers_ApplicationIds:

		if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityIdentifiersValidationError{
					field:  "ApplicationIds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EntityIdentifiers_ClientIds:

		if v, ok := interface{}(m.GetClientIds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityIdentifiersValidationError{
					field:  "ClientIds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EntityIdentifiers_DeviceIds:

		if v, ok := interface{}(m.GetDeviceIds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityIdentifiersValidationError{
					field:  "DeviceIds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EntityIdentifiers_GatewayIds:

		if v, ok := interface{}(m.GetGatewayIds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityIdentifiersValidationError{
					field:  "GatewayIds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EntityIdentifiers_OrganizationIds:

		if v, ok := interface{}(m.GetOrganizationIds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityIdentifiersValidationError{
					field:  "OrganizationIds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EntityIdentifiers_UserIds:

		if v, ok := interface{}(m.GetUserIds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityIdentifiersValidationError{
					field:  "UserIds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return EntityIdentifiersValidationError{
			field:  "Ids",
			reason: "value is required",
		}

	}

	return nil
}

// EntityIdentifiersValidationError is the validation error returned by
// EntityIdentifiers.Validate if the designated constraints aren't met.
type EntityIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityIdentifiersValidationError) ErrorName() string {
	return "EntityIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e EntityIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityIdentifiersValidationError{}

// Validate checks the field values on CombinedIdentifiers with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CombinedIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEntityIdentifiers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CombinedIdentifiersValidationError{
					field:  fmt.Sprintf("EntityIdentifiers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CombinedIdentifiersValidationError is the validation error returned by
// CombinedIdentifiers.Validate if the designated constraints aren't met.
type CombinedIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CombinedIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CombinedIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CombinedIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CombinedIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CombinedIdentifiersValidationError) ErrorName() string {
	return "CombinedIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e CombinedIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCombinedIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CombinedIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CombinedIdentifiersValidationError{}
