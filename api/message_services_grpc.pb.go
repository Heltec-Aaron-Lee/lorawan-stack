// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MessageProcessorClient is the client API for MessageProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageProcessorClient interface {
	EncodeDownlink(ctx context.Context, in *EncodeDownlinkMessageRequest, opts ...grpc.CallOption) (*ApplicationDownlink, error)
	DecodeUplink(ctx context.Context, in *DecodeUplinkMessageRequest, opts ...grpc.CallOption) (*ApplicationUplink, error)
	DecodeDownlink(ctx context.Context, in *DecodeDownlinkMessageRequest, opts ...grpc.CallOption) (*ApplicationDownlink, error)
}

type messageProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageProcessorClient(cc grpc.ClientConnInterface) MessageProcessorClient {
	return &messageProcessorClient{cc}
}

func (c *messageProcessorClient) EncodeDownlink(ctx context.Context, in *EncodeDownlinkMessageRequest, opts ...grpc.CallOption) (*ApplicationDownlink, error) {
	out := new(ApplicationDownlink)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.MessageProcessor/EncodeDownlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageProcessorClient) DecodeUplink(ctx context.Context, in *DecodeUplinkMessageRequest, opts ...grpc.CallOption) (*ApplicationUplink, error) {
	out := new(ApplicationUplink)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.MessageProcessor/DecodeUplink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageProcessorClient) DecodeDownlink(ctx context.Context, in *DecodeDownlinkMessageRequest, opts ...grpc.CallOption) (*ApplicationDownlink, error) {
	out := new(ApplicationDownlink)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.MessageProcessor/DecodeDownlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageProcessorServer is the server API for MessageProcessor service.
// All implementations must embed UnimplementedMessageProcessorServer
// for forward compatibility
type MessageProcessorServer interface {
	EncodeDownlink(context.Context, *EncodeDownlinkMessageRequest) (*ApplicationDownlink, error)
	DecodeUplink(context.Context, *DecodeUplinkMessageRequest) (*ApplicationUplink, error)
	DecodeDownlink(context.Context, *DecodeDownlinkMessageRequest) (*ApplicationDownlink, error)
	mustEmbedUnimplementedMessageProcessorServer()
}

// UnimplementedMessageProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedMessageProcessorServer struct {
}

func (UnimplementedMessageProcessorServer) EncodeDownlink(context.Context, *EncodeDownlinkMessageRequest) (*ApplicationDownlink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeDownlink not implemented")
}
func (UnimplementedMessageProcessorServer) DecodeUplink(context.Context, *DecodeUplinkMessageRequest) (*ApplicationUplink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeUplink not implemented")
}
func (UnimplementedMessageProcessorServer) DecodeDownlink(context.Context, *DecodeDownlinkMessageRequest) (*ApplicationDownlink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeDownlink not implemented")
}
func (UnimplementedMessageProcessorServer) mustEmbedUnimplementedMessageProcessorServer() {}

// UnsafeMessageProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageProcessorServer will
// result in compilation errors.
type UnsafeMessageProcessorServer interface {
	mustEmbedUnimplementedMessageProcessorServer()
}

func RegisterMessageProcessorServer(s *grpc.Server, srv MessageProcessorServer) {
	s.RegisterService(&_MessageProcessor_serviceDesc, srv)
}

func _MessageProcessor_EncodeDownlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeDownlinkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageProcessorServer).EncodeDownlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.MessageProcessor/EncodeDownlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageProcessorServer).EncodeDownlink(ctx, req.(*EncodeDownlinkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageProcessor_DecodeUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeUplinkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageProcessorServer).DecodeUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.MessageProcessor/DecodeUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageProcessorServer).DecodeUplink(ctx, req.(*DecodeUplinkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageProcessor_DecodeDownlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeDownlinkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageProcessorServer).DecodeDownlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.MessageProcessor/DecodeDownlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageProcessorServer).DecodeDownlink(ctx, req.(*DecodeDownlinkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageProcessor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.MessageProcessor",
	HandlerType: (*MessageProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EncodeDownlink",
			Handler:    _MessageProcessor_EncodeDownlink_Handler,
		},
		{
			MethodName: "DecodeUplink",
			Handler:    _MessageProcessor_DecodeUplink_Handler,
		},
		{
			MethodName: "DecodeDownlink",
			Handler:    _MessageProcessor_DecodeDownlink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/message_services.proto",
}
