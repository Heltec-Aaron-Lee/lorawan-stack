// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/join.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _join_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on JoinRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *JoinRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetRawPayload()) != 23 {
		return JoinRequestValidationError{
			field:  "RawPayload",
			reason: "value length must be 23 bytes",
		}
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DevAddr

	// no validation rules for SelectedMacVersion

	// no validation rules for NetId

	if m.GetDownlinkSettings() == nil {
		return JoinRequestValidationError{
			field:  "DownlinkSettings",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDownlinkSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinRequestValidationError{
				field:  "DownlinkSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := RxDelay_name[int32(m.GetRxDelay())]; !ok {
		return JoinRequestValidationError{
			field:  "RxDelay",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetCfList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinRequestValidationError{
				field:  "CfList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCorrelationIds() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) > 100 {
			return JoinRequestValidationError{
				field:  fmt.Sprintf("CorrelationIds[%v]", idx),
				reason: "value length must be at most 100 runes",
			}
		}

	}

	if v, ok := interface{}(m.GetConsumedAirtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinRequestValidationError{
				field:  "ConsumedAirtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// JoinRequestValidationError is the validation error returned by
// JoinRequest.Validate if the designated constraints aren't met.
type JoinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinRequestValidationError) ErrorName() string { return "JoinRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinRequestValidationError{}

// Validate checks the field values on JoinResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *JoinResponse) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetRawPayload()); l < 17 || l > 33 {
		return JoinResponseValidationError{
			field:  "RawPayload",
			reason: "value length must be between 17 and 33 bytes, inclusive",
		}
	}

	if m.GetSessionKeys() == nil {
		return JoinResponseValidationError{
			field:  "SessionKeys",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSessionKeys()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinResponseValidationError{
				field:  "SessionKeys",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinResponseValidationError{
				field:  "Lifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCorrelationIds() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) > 100 {
			return JoinResponseValidationError{
				field:  fmt.Sprintf("CorrelationIds[%v]", idx),
				reason: "value length must be at most 100 runes",
			}
		}

	}

	return nil
}

// JoinResponseValidationError is the validation error returned by
// JoinResponse.Validate if the designated constraints aren't met.
type JoinResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinResponseValidationError) ErrorName() string { return "JoinResponseValidationError" }

// Error satisfies the builtin error interface
func (e JoinResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinResponseValidationError{}
