// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/application.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _application_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Application with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Application) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return ApplicationValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetName()) > 50 {
		return ApplicationValidationError{
			field:  "Name",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) > 2000 {
		return ApplicationValidationError{
			field:  "Description",
			reason: "value length must be at most 2000 runes",
		}
	}

	for key, val := range m.GetAttributes() {
		_ = val

		if utf8.RuneCountInString(key) > 36 {
			return ApplicationValidationError{
				field:  fmt.Sprintf("Attributes[%v]", key),
				reason: "value length must be at most 36 runes",
			}
		}

		if !_Application_Attributes_Pattern.MatchString(key) {
			return ApplicationValidationError{
				field:  fmt.Sprintf("Attributes[%v]", key),
				reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
			}
		}

		// no validation rules for Attributes[key]
	}

	for idx, item := range m.GetContactInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationValidationError{
					field:  fmt.Sprintf("ContactInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ApplicationValidationError is the validation error returned by
// Application.Validate if the designated constraints aren't met.
type ApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationValidationError) ErrorName() string { return "ApplicationValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationValidationError{}

var _Application_Attributes_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on Applications with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Applications) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationsValidationError{
					field:  fmt.Sprintf("Applications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ApplicationsValidationError is the validation error returned by
// Applications.Validate if the designated constraints aren't met.
type ApplicationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationsValidationError) ErrorName() string { return "ApplicationsValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplications.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationsValidationError{}

// Validate checks the field values on GetApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplicationIds() == nil {
		return GetApplicationRequestValidationError{
			field:  "ApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetApplicationRequestValidationError is the validation error returned by
// GetApplicationRequest.Validate if the designated constraints aren't met.
type GetApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationRequestValidationError) ErrorName() string {
	return "GetApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationRequestValidationError{}

// Validate checks the field values on ListApplicationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCollaborator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationsRequestValidationError{
				field:  "Collaborator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationsRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _ListApplicationsRequest_Order_InLookup[m.GetOrder()]; !ok {
		return ListApplicationsRequestValidationError{
			field:  "Order",
			reason: "value must be in list [ application_id -application_id name -name created_at -created_at]",
		}
	}

	if m.GetLimit() > 1000 {
		return ListApplicationsRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	// no validation rules for Page

	return nil
}

// ListApplicationsRequestValidationError is the validation error returned by
// ListApplicationsRequest.Validate if the designated constraints aren't met.
type ListApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsRequestValidationError) ErrorName() string {
	return "ListApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsRequestValidationError{}

var _ListApplicationsRequest_Order_InLookup = map[string]struct{}{
	"":                {},
	"application_id":  {},
	"-application_id": {},
	"name":            {},
	"-name":           {},
	"created_at":      {},
	"-created_at":     {},
}

// Validate checks the field values on CreateApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplication() == nil {
		return CreateApplicationRequestValidationError{
			field:  "Application",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplicationRequestValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCollaborator() == nil {
		return CreateApplicationRequestValidationError{
			field:  "Collaborator",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCollaborator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplicationRequestValidationError{
				field:  "Collaborator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateApplicationRequestValidationError is the validation error returned by
// CreateApplicationRequest.Validate if the designated constraints aren't met.
type CreateApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationRequestValidationError) ErrorName() string {
	return "CreateApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationRequestValidationError{}

// Validate checks the field values on UpdateApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplication() == nil {
		return UpdateApplicationRequestValidationError{
			field:  "Application",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationRequestValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateApplicationRequestValidationError is the validation error returned by
// UpdateApplicationRequest.Validate if the designated constraints aren't met.
type UpdateApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationRequestValidationError) ErrorName() string {
	return "UpdateApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationRequestValidationError{}

// Validate checks the field values on ListApplicationAPIKeysRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationAPIKeysRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplicationIds() == nil {
		return ListApplicationAPIKeysRequestValidationError{
			field:  "ApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationAPIKeysRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetLimit() > 1000 {
		return ListApplicationAPIKeysRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	// no validation rules for Page

	return nil
}

// ListApplicationAPIKeysRequestValidationError is the validation error
// returned by ListApplicationAPIKeysRequest.Validate if the designated
// constraints aren't met.
type ListApplicationAPIKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationAPIKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationAPIKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationAPIKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationAPIKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationAPIKeysRequestValidationError) ErrorName() string {
	return "ListApplicationAPIKeysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationAPIKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationAPIKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationAPIKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationAPIKeysRequestValidationError{}

// Validate checks the field values on GetApplicationAPIKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetApplicationAPIKeyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplicationIds() == nil {
		return GetApplicationAPIKeyRequestValidationError{
			field:  "ApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationAPIKeyRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for KeyId

	return nil
}

// GetApplicationAPIKeyRequestValidationError is the validation error returned
// by GetApplicationAPIKeyRequest.Validate if the designated constraints
// aren't met.
type GetApplicationAPIKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationAPIKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationAPIKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationAPIKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationAPIKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationAPIKeyRequestValidationError) ErrorName() string {
	return "GetApplicationAPIKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationAPIKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationAPIKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationAPIKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationAPIKeyRequestValidationError{}

// Validate checks the field values on CreateApplicationAPIKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateApplicationAPIKeyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplicationIds() == nil {
		return CreateApplicationAPIKeyRequestValidationError{
			field:  "ApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplicationAPIKeyRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetName()) > 50 {
		return CreateApplicationAPIKeyRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 50 runes",
		}
	}

	for idx, item := range m.GetRights() {
		_, _ = idx, item

		if _, ok := Right_name[int32(item)]; !ok {
			return CreateApplicationAPIKeyRequestValidationError{
				field:  fmt.Sprintf("Rights[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
		}

	}

	return nil
}

// CreateApplicationAPIKeyRequestValidationError is the validation error
// returned by CreateApplicationAPIKeyRequest.Validate if the designated
// constraints aren't met.
type CreateApplicationAPIKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationAPIKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationAPIKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationAPIKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationAPIKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationAPIKeyRequestValidationError) ErrorName() string {
	return "CreateApplicationAPIKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationAPIKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationAPIKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationAPIKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationAPIKeyRequestValidationError{}

// Validate checks the field values on UpdateApplicationAPIKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateApplicationAPIKeyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplicationIds() == nil {
		return UpdateApplicationAPIKeyRequestValidationError{
			field:  "ApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationAPIKeyRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetApiKey() == nil {
		return UpdateApplicationAPIKeyRequestValidationError{
			field:  "ApiKey",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApiKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationAPIKeyRequestValidationError{
				field:  "ApiKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateApplicationAPIKeyRequestValidationError is the validation error
// returned by UpdateApplicationAPIKeyRequest.Validate if the designated
// constraints aren't met.
type UpdateApplicationAPIKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationAPIKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationAPIKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationAPIKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationAPIKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationAPIKeyRequestValidationError) ErrorName() string {
	return "UpdateApplicationAPIKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationAPIKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationAPIKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationAPIKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationAPIKeyRequestValidationError{}

// Validate checks the field values on ListApplicationCollaboratorsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListApplicationCollaboratorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplicationIds() == nil {
		return ListApplicationCollaboratorsRequestValidationError{
			field:  "ApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationCollaboratorsRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetLimit() > 1000 {
		return ListApplicationCollaboratorsRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	// no validation rules for Page

	return nil
}

// ListApplicationCollaboratorsRequestValidationError is the validation error
// returned by ListApplicationCollaboratorsRequest.Validate if the designated
// constraints aren't met.
type ListApplicationCollaboratorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationCollaboratorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationCollaboratorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationCollaboratorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationCollaboratorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationCollaboratorsRequestValidationError) ErrorName() string {
	return "ListApplicationCollaboratorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationCollaboratorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationCollaboratorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationCollaboratorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationCollaboratorsRequestValidationError{}

// Validate checks the field values on GetApplicationCollaboratorRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetApplicationCollaboratorRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplicationIds() == nil {
		return GetApplicationCollaboratorRequestValidationError{
			field:  "ApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationCollaboratorRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCollaborator() == nil {
		return GetApplicationCollaboratorRequestValidationError{
			field:  "Collaborator",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCollaborator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationCollaboratorRequestValidationError{
				field:  "Collaborator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetApplicationCollaboratorRequestValidationError is the validation error
// returned by GetApplicationCollaboratorRequest.Validate if the designated
// constraints aren't met.
type GetApplicationCollaboratorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationCollaboratorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationCollaboratorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationCollaboratorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationCollaboratorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationCollaboratorRequestValidationError) ErrorName() string {
	return "GetApplicationCollaboratorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationCollaboratorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationCollaboratorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationCollaboratorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationCollaboratorRequestValidationError{}

// Validate checks the field values on SetApplicationCollaboratorRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *SetApplicationCollaboratorRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplicationIds() == nil {
		return SetApplicationCollaboratorRequestValidationError{
			field:  "ApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetApplicationCollaboratorRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCollaborator() == nil {
		return SetApplicationCollaboratorRequestValidationError{
			field:  "Collaborator",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCollaborator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetApplicationCollaboratorRequestValidationError{
				field:  "Collaborator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetApplicationCollaboratorRequestValidationError is the validation error
// returned by SetApplicationCollaboratorRequest.Validate if the designated
// constraints aren't met.
type SetApplicationCollaboratorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetApplicationCollaboratorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetApplicationCollaboratorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetApplicationCollaboratorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetApplicationCollaboratorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetApplicationCollaboratorRequestValidationError) ErrorName() string {
	return "SetApplicationCollaboratorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetApplicationCollaboratorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetApplicationCollaboratorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetApplicationCollaboratorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetApplicationCollaboratorRequestValidationError{}
