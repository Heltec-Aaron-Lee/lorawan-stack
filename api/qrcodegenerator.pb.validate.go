// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/qrcodegenerator.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _qrcodegenerator_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on QRCodeFormat with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *QRCodeFormat) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) > 100 {
		return QRCodeFormatValidationError{
			field:  "Name",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) > 200 {
		return QRCodeFormatValidationError{
			field:  "Description",
			reason: "value length must be at most 200 runes",
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QRCodeFormatValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// QRCodeFormatValidationError is the validation error returned by
// QRCodeFormat.Validate if the designated constraints aren't met.
type QRCodeFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QRCodeFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QRCodeFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QRCodeFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QRCodeFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QRCodeFormatValidationError) ErrorName() string { return "QRCodeFormatValidationError" }

// Error satisfies the builtin error interface
func (e QRCodeFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQRCodeFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QRCodeFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QRCodeFormatValidationError{}

// Validate checks the field values on QRCodeFormats with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *QRCodeFormats) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetFormats() {
		_ = val

		if utf8.RuneCountInString(key) > 36 {
			return QRCodeFormatsValidationError{
				field:  fmt.Sprintf("Formats[%v]", key),
				reason: "value length must be at most 36 runes",
			}
		}

		if !_QRCodeFormats_Formats_Pattern.MatchString(key) {
			return QRCodeFormatsValidationError{
				field:  fmt.Sprintf("Formats[%v]", key),
				reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QRCodeFormatsValidationError{
					field:  fmt.Sprintf("Formats[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// QRCodeFormatsValidationError is the validation error returned by
// QRCodeFormats.Validate if the designated constraints aren't met.
type QRCodeFormatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QRCodeFormatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QRCodeFormatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QRCodeFormatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QRCodeFormatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QRCodeFormatsValidationError) ErrorName() string { return "QRCodeFormatsValidationError" }

// Error satisfies the builtin error interface
func (e QRCodeFormatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQRCodeFormats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QRCodeFormatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QRCodeFormatsValidationError{}

var _QRCodeFormats_Formats_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on GetQRCodeFormatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetQRCodeFormatRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetFormatId()) > 36 {
		return GetQRCodeFormatRequestValidationError{
			field:  "FormatId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_GetQRCodeFormatRequest_FormatId_Pattern.MatchString(m.GetFormatId()) {
		return GetQRCodeFormatRequestValidationError{
			field:  "FormatId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	return nil
}

// GetQRCodeFormatRequestValidationError is the validation error returned by
// GetQRCodeFormatRequest.Validate if the designated constraints aren't met.
type GetQRCodeFormatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQRCodeFormatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQRCodeFormatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQRCodeFormatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQRCodeFormatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQRCodeFormatRequestValidationError) ErrorName() string {
	return "GetQRCodeFormatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQRCodeFormatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQRCodeFormatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQRCodeFormatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQRCodeFormatRequestValidationError{}

var _GetQRCodeFormatRequest_FormatId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on GenerateEndDeviceQRCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GenerateEndDeviceQRCodeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetFormatId()) > 36 {
		return GenerateEndDeviceQRCodeRequestValidationError{
			field:  "FormatId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_GenerateEndDeviceQRCodeRequest_FormatId_Pattern.MatchString(m.GetFormatId()) {
		return GenerateEndDeviceQRCodeRequestValidationError{
			field:  "FormatId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	if m.GetEndDevice() == nil {
		return GenerateEndDeviceQRCodeRequestValidationError{
			field:  "EndDevice",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEndDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateEndDeviceQRCodeRequestValidationError{
				field:  "EndDevice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateEndDeviceQRCodeRequestValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GenerateEndDeviceQRCodeRequestValidationError is the validation error
// returned by GenerateEndDeviceQRCodeRequest.Validate if the designated
// constraints aren't met.
type GenerateEndDeviceQRCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateEndDeviceQRCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateEndDeviceQRCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateEndDeviceQRCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateEndDeviceQRCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateEndDeviceQRCodeRequestValidationError) ErrorName() string {
	return "GenerateEndDeviceQRCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateEndDeviceQRCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateEndDeviceQRCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateEndDeviceQRCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateEndDeviceQRCodeRequestValidationError{}

var _GenerateEndDeviceQRCodeRequest_FormatId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on GenerateQRCodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GenerateQRCodeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Text

	if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateQRCodeResponseValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GenerateQRCodeResponseValidationError is the validation error returned by
// GenerateQRCodeResponse.Validate if the designated constraints aren't met.
type GenerateQRCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateQRCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateQRCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateQRCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateQRCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateQRCodeResponseValidationError) ErrorName() string {
	return "GenerateQRCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateQRCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateQRCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateQRCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateQRCodeResponseValidationError{}

// Validate checks the field values on GenerateEndDeviceQRCodeRequest_Image
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GenerateEndDeviceQRCodeRequest_Image) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetImageSize(); val < 10 || val > 1000 {
		return GenerateEndDeviceQRCodeRequest_ImageValidationError{
			field:  "ImageSize",
			reason: "value must be inside range [10, 1000]",
		}
	}

	return nil
}

// GenerateEndDeviceQRCodeRequest_ImageValidationError is the validation error
// returned by GenerateEndDeviceQRCodeRequest_Image.Validate if the designated
// constraints aren't met.
type GenerateEndDeviceQRCodeRequest_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateEndDeviceQRCodeRequest_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateEndDeviceQRCodeRequest_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateEndDeviceQRCodeRequest_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateEndDeviceQRCodeRequest_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateEndDeviceQRCodeRequest_ImageValidationError) ErrorName() string {
	return "GenerateEndDeviceQRCodeRequest_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateEndDeviceQRCodeRequest_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateEndDeviceQRCodeRequest_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateEndDeviceQRCodeRequest_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateEndDeviceQRCodeRequest_ImageValidationError{}
