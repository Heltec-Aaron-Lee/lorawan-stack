// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/metadata.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _metadata_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RxMetadata with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RxMetadata) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGatewayIds() == nil {
		return RxMetadataValidationError{
			field:  "GatewayIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetGatewayIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RxMetadataValidationError{
				field:  "GatewayIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPacketBroker()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RxMetadataValidationError{
				field:  "PacketBroker",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AntennaIndex

	if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RxMetadataValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Timestamp

	// no validation rules for FineTimestamp

	// no validation rules for EncryptedFineTimestamp

	// no validation rules for EncryptedFineTimestampKeyId

	// no validation rules for Rssi

	if v, ok := interface{}(m.GetSignalRssi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RxMetadataValidationError{
				field:  "SignalRssi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ChannelRssi

	// no validation rules for RssiStandardDeviation

	// no validation rules for Snr

	// no validation rules for FrequencyOffset

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RxMetadataValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := DownlinkPathConstraint_name[int32(m.GetDownlinkPathConstraint())]; !ok {
		return RxMetadataValidationError{
			field:  "DownlinkPathConstraint",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for UplinkToken

	if m.GetChannelIndex() > 255 {
		return RxMetadataValidationError{
			field:  "ChannelIndex",
			reason: "value must be less than or equal to 255",
		}
	}

	if v, ok := interface{}(m.GetAdvanced()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RxMetadataValidationError{
				field:  "Advanced",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RxMetadataValidationError is the validation error returned by
// RxMetadata.Validate if the designated constraints aren't met.
type RxMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RxMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RxMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RxMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RxMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RxMetadataValidationError) ErrorName() string { return "RxMetadataValidationError" }

// Error satisfies the builtin error interface
func (e RxMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRxMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RxMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RxMetadataValidationError{}

// Validate checks the field values on Location with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Location) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetLatitude(); val < -90 || val > 90 {
		return LocationValidationError{
			field:  "Latitude",
			reason: "value must be inside range [-90, 90]",
		}
	}

	if val := m.GetLongitude(); val < -180 || val > 180 {
		return LocationValidationError{
			field:  "Longitude",
			reason: "value must be inside range [-180, 180]",
		}
	}

	// no validation rules for Altitude

	// no validation rules for Accuracy

	if _, ok := LocationSource_name[int32(m.GetSource())]; !ok {
		return LocationValidationError{
			field:  "Source",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// LocationValidationError is the validation error returned by
// Location.Validate if the designated constraints aren't met.
type LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationValidationError) ErrorName() string { return "LocationValidationError" }

// Error satisfies the builtin error interface
func (e LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationValidationError{}

// Validate checks the field values on PacketBrokerMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PacketBrokerMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MessageId

	// no validation rules for ForwarderNetId

	// no validation rules for ForwarderTenantId

	// no validation rules for ForwarderId

	// no validation rules for HomeNetworkNetId

	// no validation rules for HomeNetworkTenantId

	for idx, item := range m.GetHops() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PacketBrokerMetadataValidationError{
					field:  fmt.Sprintf("Hops[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PacketBrokerMetadataValidationError is the validation error returned by
// PacketBrokerMetadata.Validate if the designated constraints aren't met.
type PacketBrokerMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PacketBrokerMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PacketBrokerMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PacketBrokerMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PacketBrokerMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PacketBrokerMetadataValidationError) ErrorName() string {
	return "PacketBrokerMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e PacketBrokerMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPacketBrokerMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PacketBrokerMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PacketBrokerMetadataValidationError{}

// Validate checks the field values on PacketBrokerRouteHop with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PacketBrokerRouteHop) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetReceivedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PacketBrokerRouteHopValidationError{
				field:  "ReceivedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SenderName

	// no validation rules for SenderAddress

	// no validation rules for ReceiverName

	// no validation rules for ReceiverAgent

	return nil
}

// PacketBrokerRouteHopValidationError is the validation error returned by
// PacketBrokerRouteHop.Validate if the designated constraints aren't met.
type PacketBrokerRouteHopValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PacketBrokerRouteHopValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PacketBrokerRouteHopValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PacketBrokerRouteHopValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PacketBrokerRouteHopValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PacketBrokerRouteHopValidationError) ErrorName() string {
	return "PacketBrokerRouteHopValidationError"
}

// Error satisfies the builtin error interface
func (e PacketBrokerRouteHopValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPacketBrokerRouteHop.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PacketBrokerRouteHopValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PacketBrokerRouteHopValidationError{}
