// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/deviceclaimingserver.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _deviceclaimingserver_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ClaimEndDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ClaimEndDeviceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTargetApplicationIds() == nil {
		return ClaimEndDeviceRequestValidationError{
			field:  "TargetApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetTargetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClaimEndDeviceRequestValidationError{
				field:  "TargetApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetTargetDeviceId()) > 36 {
		return ClaimEndDeviceRequestValidationError{
			field:  "TargetDeviceId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_ClaimEndDeviceRequest_TargetDeviceId_Pattern.MatchString(m.GetTargetDeviceId()) {
		return ClaimEndDeviceRequestValidationError{
			field:  "TargetDeviceId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$|^$\"",
		}
	}

	if !_ClaimEndDeviceRequest_TargetNetworkServerAddress_Pattern.MatchString(m.GetTargetNetworkServerAddress()) {
		return ClaimEndDeviceRequestValidationError{
			field:  "TargetNetworkServerAddress",
			reason: "value does not match regex pattern \"^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]*[a-zA-Z0-9])\\\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$\"",
		}
	}

	if utf8.RuneCountInString(m.GetTargetNetworkServerKekLabel()) > 2048 {
		return ClaimEndDeviceRequestValidationError{
			field:  "TargetNetworkServerKekLabel",
			reason: "value length must be at most 2048 runes",
		}
	}

	if !_ClaimEndDeviceRequest_TargetApplicationServerAddress_Pattern.MatchString(m.GetTargetApplicationServerAddress()) {
		return ClaimEndDeviceRequestValidationError{
			field:  "TargetApplicationServerAddress",
			reason: "value does not match regex pattern \"^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]*[a-zA-Z0-9])\\\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$\"",
		}
	}

	if utf8.RuneCountInString(m.GetTargetApplicationServerKekLabel()) > 2048 {
		return ClaimEndDeviceRequestValidationError{
			field:  "TargetApplicationServerKekLabel",
			reason: "value length must be at most 2048 runes",
		}
	}

	if utf8.RuneCountInString(m.GetTargetApplicationServerId()) > 100 {
		return ClaimEndDeviceRequestValidationError{
			field:  "TargetApplicationServerId",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for TargetNetId

	// no validation rules for InvalidateAuthenticationCode

	switch m.SourceDevice.(type) {

	case *ClaimEndDeviceRequest_AuthenticatedIdentifiers_:

		if v, ok := interface{}(m.GetAuthenticatedIdentifiers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClaimEndDeviceRequestValidationError{
					field:  "AuthenticatedIdentifiers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ClaimEndDeviceRequest_QrCode:

		if l := len(m.GetQrCode()); l < 0 || l > 1024 {
			return ClaimEndDeviceRequestValidationError{
				field:  "QrCode",
				reason: "value length must be between 0 and 1024 bytes, inclusive",
			}
		}

	default:
		return ClaimEndDeviceRequestValidationError{
			field:  "SourceDevice",
			reason: "value is required",
		}

	}

	return nil
}

// ClaimEndDeviceRequestValidationError is the validation error returned by
// ClaimEndDeviceRequest.Validate if the designated constraints aren't met.
type ClaimEndDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClaimEndDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClaimEndDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClaimEndDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClaimEndDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClaimEndDeviceRequestValidationError) ErrorName() string {
	return "ClaimEndDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClaimEndDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClaimEndDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClaimEndDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClaimEndDeviceRequestValidationError{}

var _ClaimEndDeviceRequest_TargetDeviceId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$|^$")

var _ClaimEndDeviceRequest_TargetNetworkServerAddress_Pattern = regexp.MustCompile("^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$")

var _ClaimEndDeviceRequest_TargetApplicationServerAddress_Pattern = regexp.MustCompile("^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$")

// Validate checks the field values on AuthorizeApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AuthorizeApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplicationIds() == nil {
		return AuthorizeApplicationRequestValidationError{
			field:  "ApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthorizeApplicationRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetApiKey()) < 1 {
		return AuthorizeApplicationRequestValidationError{
			field:  "ApiKey",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// AuthorizeApplicationRequestValidationError is the validation error returned
// by AuthorizeApplicationRequest.Validate if the designated constraints
// aren't met.
type AuthorizeApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeApplicationRequestValidationError) ErrorName() string {
	return "AuthorizeApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizeApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeApplicationRequestValidationError{}

// Validate checks the field values on
// ClaimEndDeviceRequest_AuthenticatedIdentifiers with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JoinEui

	// no validation rules for DevEui

	if !_ClaimEndDeviceRequest_AuthenticatedIdentifiers_AuthenticationCode_Pattern.MatchString(m.GetAuthenticationCode()) {
		return ClaimEndDeviceRequest_AuthenticatedIdentifiersValidationError{
			field:  "AuthenticationCode",
			reason: "value does not match regex pattern \"^[A-Z0-9]{1,32}$\"",
		}
	}

	return nil
}

// ClaimEndDeviceRequest_AuthenticatedIdentifiersValidationError is the
// validation error returned by
// ClaimEndDeviceRequest_AuthenticatedIdentifiers.Validate if the designated
// constraints aren't met.
type ClaimEndDeviceRequest_AuthenticatedIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClaimEndDeviceRequest_AuthenticatedIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClaimEndDeviceRequest_AuthenticatedIdentifiersValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ClaimEndDeviceRequest_AuthenticatedIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClaimEndDeviceRequest_AuthenticatedIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClaimEndDeviceRequest_AuthenticatedIdentifiersValidationError) ErrorName() string {
	return "ClaimEndDeviceRequest_AuthenticatedIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e ClaimEndDeviceRequest_AuthenticatedIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClaimEndDeviceRequest_AuthenticatedIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClaimEndDeviceRequest_AuthenticatedIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClaimEndDeviceRequest_AuthenticatedIdentifiersValidationError{}

var _ClaimEndDeviceRequest_AuthenticatedIdentifiers_AuthenticationCode_Pattern = regexp.MustCompile("^[A-Z0-9]{1,32}$")
