// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/client.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _client_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Client with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Client) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return ClientValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetName()) > 50 {
		return ClientValidationError{
			field:  "Name",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) > 2000 {
		return ClientValidationError{
			field:  "Description",
			reason: "value length must be at most 2000 runes",
		}
	}

	for key, val := range m.GetAttributes() {
		_ = val

		if utf8.RuneCountInString(key) > 36 {
			return ClientValidationError{
				field:  fmt.Sprintf("Attributes[%v]", key),
				reason: "value length must be at most 36 runes",
			}
		}

		if !_Client_Attributes_Pattern.MatchString(key) {
			return ClientValidationError{
				field:  fmt.Sprintf("Attributes[%v]", key),
				reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
			}
		}

		// no validation rules for Attributes[key]
	}

	for idx, item := range m.GetContactInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClientValidationError{
					field:  fmt.Sprintf("ContactInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Secret

	if _, ok := State_name[int32(m.GetState())]; !ok {
		return ClientValidationError{
			field:  "State",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for SkipAuthorization

	// no validation rules for Endorsed

	for idx, item := range m.GetGrants() {
		_, _ = idx, item

		if _, ok := GrantType_name[int32(item)]; !ok {
			return ClientValidationError{
				field:  fmt.Sprintf("Grants[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
		}

	}

	for idx, item := range m.GetRights() {
		_, _ = idx, item

		if _, ok := Right_name[int32(item)]; !ok {
			return ClientValidationError{
				field:  fmt.Sprintf("Rights[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
		}

	}

	return nil
}

// ClientValidationError is the validation error returned by Client.Validate if
// the designated constraints aren't met.
type ClientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientValidationError) ErrorName() string { return "ClientValidationError" }

// Error satisfies the builtin error interface
func (e ClientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientValidationError{}

var _Client_Attributes_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on Clients with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Clients) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetClients() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClientsValidationError{
					field:  fmt.Sprintf("Clients[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ClientsValidationError is the validation error returned by Clients.Validate
// if the designated constraints aren't met.
type ClientsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientsValidationError) ErrorName() string { return "ClientsValidationError" }

// Error satisfies the builtin error interface
func (e ClientsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClients.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientsValidationError{}

// Validate checks the field values on GetClientRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetClientRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetClientIds() == nil {
		return GetClientRequestValidationError{
			field:  "ClientIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetClientIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClientRequestValidationError{
				field:  "ClientIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClientRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetClientRequestValidationError is the validation error returned by
// GetClientRequest.Validate if the designated constraints aren't met.
type GetClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientRequestValidationError) ErrorName() string { return "GetClientRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientRequestValidationError{}

// Validate checks the field values on ListClientsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListClientsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCollaborator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListClientsRequestValidationError{
				field:  "Collaborator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListClientsRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _ListClientsRequest_Order_InLookup[m.GetOrder()]; !ok {
		return ListClientsRequestValidationError{
			field:  "Order",
			reason: "value must be in list [ client_id -client_id name -name created_at -created_at]",
		}
	}

	if m.GetLimit() > 1000 {
		return ListClientsRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	// no validation rules for Page

	return nil
}

// ListClientsRequestValidationError is the validation error returned by
// ListClientsRequest.Validate if the designated constraints aren't met.
type ListClientsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClientsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClientsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClientsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClientsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClientsRequestValidationError) ErrorName() string {
	return "ListClientsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListClientsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClientsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClientsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClientsRequestValidationError{}

var _ListClientsRequest_Order_InLookup = map[string]struct{}{
	"":            {},
	"client_id":   {},
	"-client_id":  {},
	"name":        {},
	"-name":       {},
	"created_at":  {},
	"-created_at": {},
}

// Validate checks the field values on CreateClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateClientRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetClient() == nil {
		return CreateClientRequestValidationError{
			field:  "Client",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateClientRequestValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCollaborator() == nil {
		return CreateClientRequestValidationError{
			field:  "Collaborator",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCollaborator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateClientRequestValidationError{
				field:  "Collaborator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateClientRequestValidationError is the validation error returned by
// CreateClientRequest.Validate if the designated constraints aren't met.
type CreateClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClientRequestValidationError) ErrorName() string {
	return "CreateClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClientRequestValidationError{}

// Validate checks the field values on UpdateClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateClientRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetClient() == nil {
		return UpdateClientRequestValidationError{
			field:  "Client",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClientRequestValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClientRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateClientRequestValidationError is the validation error returned by
// UpdateClientRequest.Validate if the designated constraints aren't met.
type UpdateClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClientRequestValidationError) ErrorName() string {
	return "UpdateClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClientRequestValidationError{}

// Validate checks the field values on ListClientCollaboratorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListClientCollaboratorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetClientIds() == nil {
		return ListClientCollaboratorsRequestValidationError{
			field:  "ClientIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetClientIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListClientCollaboratorsRequestValidationError{
				field:  "ClientIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetLimit() > 1000 {
		return ListClientCollaboratorsRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	// no validation rules for Page

	return nil
}

// ListClientCollaboratorsRequestValidationError is the validation error
// returned by ListClientCollaboratorsRequest.Validate if the designated
// constraints aren't met.
type ListClientCollaboratorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClientCollaboratorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClientCollaboratorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClientCollaboratorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClientCollaboratorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClientCollaboratorsRequestValidationError) ErrorName() string {
	return "ListClientCollaboratorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListClientCollaboratorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClientCollaboratorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClientCollaboratorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClientCollaboratorsRequestValidationError{}

// Validate checks the field values on GetClientCollaboratorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetClientCollaboratorRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetClientIds() == nil {
		return GetClientCollaboratorRequestValidationError{
			field:  "ClientIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetClientIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClientCollaboratorRequestValidationError{
				field:  "ClientIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCollaborator() == nil {
		return GetClientCollaboratorRequestValidationError{
			field:  "Collaborator",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCollaborator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClientCollaboratorRequestValidationError{
				field:  "Collaborator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetClientCollaboratorRequestValidationError is the validation error returned
// by GetClientCollaboratorRequest.Validate if the designated constraints
// aren't met.
type GetClientCollaboratorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientCollaboratorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientCollaboratorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientCollaboratorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientCollaboratorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientCollaboratorRequestValidationError) ErrorName() string {
	return "GetClientCollaboratorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientCollaboratorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientCollaboratorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientCollaboratorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientCollaboratorRequestValidationError{}

// Validate checks the field values on SetClientCollaboratorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetClientCollaboratorRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetClientIds() == nil {
		return SetClientCollaboratorRequestValidationError{
			field:  "ClientIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetClientIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetClientCollaboratorRequestValidationError{
				field:  "ClientIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCollaborator() == nil {
		return SetClientCollaboratorRequestValidationError{
			field:  "Collaborator",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCollaborator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetClientCollaboratorRequestValidationError{
				field:  "Collaborator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetClientCollaboratorRequestValidationError is the validation error returned
// by SetClientCollaboratorRequest.Validate if the designated constraints
// aren't met.
type SetClientCollaboratorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetClientCollaboratorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetClientCollaboratorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetClientCollaboratorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetClientCollaboratorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetClientCollaboratorRequestValidationError) ErrorName() string {
	return "SetClientCollaboratorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetClientCollaboratorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetClientCollaboratorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetClientCollaboratorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetClientCollaboratorRequestValidationError{}
