// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/lorawan.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _lorawan_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Message) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetMHdr() == nil {
		return MessageValidationError{
			field:  "MHdr",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMHdr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "MHdr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetMic()); l < 0 || l > 4 {
		return MessageValidationError{
			field:  "Mic",
			reason: "value length must be between 0 and 4 bytes, inclusive",
		}
	}

	switch m.Payload.(type) {

	case *Message_MacPayload:

		if v, ok := interface{}(m.GetMacPayload()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  "MacPayload",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Message_JoinRequestPayload:

		if v, ok := interface{}(m.GetJoinRequestPayload()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  "JoinRequestPayload",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Message_JoinAcceptPayload:

		if v, ok := interface{}(m.GetJoinAcceptPayload()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  "JoinAcceptPayload",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Message_RejoinRequestPayload:

		if v, ok := interface{}(m.GetRejoinRequestPayload()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  "RejoinRequestPayload",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return MessageValidationError{
			field:  "Payload",
			reason: "value is required",
		}

	}

	return nil
}

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on MHDR with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *MHDR) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := MType_name[int32(m.GetMType())]; !ok {
		return MHDRValidationError{
			field:  "MType",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := Major_name[int32(m.GetMajor())]; !ok {
		return MHDRValidationError{
			field:  "Major",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MHDRValidationError is the validation error returned by MHDR.Validate if the
// designated constraints aren't met.
type MHDRValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MHDRValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MHDRValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MHDRValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MHDRValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MHDRValidationError) ErrorName() string { return "MHDRValidationError" }

// Error satisfies the builtin error interface
func (e MHDRValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMHDR.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MHDRValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MHDRValidationError{}

// Validate checks the field values on MACPayload with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MACPayload) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetFHdr() == nil {
		return MACPayloadValidationError{
			field:  "FHdr",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetFHdr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACPayloadValidationError{
				field:  "FHdr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetFPort() > 255 {
		return MACPayloadValidationError{
			field:  "FPort",
			reason: "value must be less than or equal to 255",
		}
	}

	// no validation rules for FrmPayload

	if v, ok := interface{}(m.GetDecodedPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACPayloadValidationError{
				field:  "DecodedPayload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FullFCnt

	return nil
}

// MACPayloadValidationError is the validation error returned by
// MACPayload.Validate if the designated constraints aren't met.
type MACPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACPayloadValidationError) ErrorName() string { return "MACPayloadValidationError" }

// Error satisfies the builtin error interface
func (e MACPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACPayloadValidationError{}

// Validate checks the field values on FHDR with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *FHDR) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DevAddr

	if m.GetFCtrl() == nil {
		return FHDRValidationError{
			field:  "FCtrl",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetFCtrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FHDRValidationError{
				field:  "FCtrl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetFCnt() > 65535 {
		return FHDRValidationError{
			field:  "FCnt",
			reason: "value must be less than or equal to 65535",
		}
	}

	if len(m.GetFOpts()) > 15 {
		return FHDRValidationError{
			field:  "FOpts",
			reason: "value length must be at most 15 bytes",
		}
	}

	return nil
}

// FHDRValidationError is the validation error returned by FHDR.Validate if the
// designated constraints aren't met.
type FHDRValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FHDRValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FHDRValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FHDRValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FHDRValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FHDRValidationError) ErrorName() string { return "FHDRValidationError" }

// Error satisfies the builtin error interface
func (e FHDRValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFHDR.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FHDRValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FHDRValidationError{}

// Validate checks the field values on FCtrl with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FCtrl) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Adr

	// no validation rules for AdrAckReq

	// no validation rules for Ack

	// no validation rules for FPending

	// no validation rules for ClassB

	return nil
}

// FCtrlValidationError is the validation error returned by FCtrl.Validate if
// the designated constraints aren't met.
type FCtrlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FCtrlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FCtrlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FCtrlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FCtrlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FCtrlValidationError) ErrorName() string { return "FCtrlValidationError" }

// Error satisfies the builtin error interface
func (e FCtrlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFCtrl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FCtrlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FCtrlValidationError{}

// Validate checks the field values on JoinRequestPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *JoinRequestPayload) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JoinEui

	// no validation rules for DevEui

	// no validation rules for DevNonce

	return nil
}

// JoinRequestPayloadValidationError is the validation error returned by
// JoinRequestPayload.Validate if the designated constraints aren't met.
type JoinRequestPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinRequestPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinRequestPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinRequestPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinRequestPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinRequestPayloadValidationError) ErrorName() string {
	return "JoinRequestPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e JoinRequestPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinRequestPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinRequestPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinRequestPayloadValidationError{}

// Validate checks the field values on RejoinRequestPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RejoinRequestPayload) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := RejoinType_name[int32(m.GetRejoinType())]; !ok {
		return RejoinRequestPayloadValidationError{
			field:  "RejoinType",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for NetId

	// no validation rules for JoinEui

	// no validation rules for DevEui

	// no validation rules for RejoinCnt

	return nil
}

// RejoinRequestPayloadValidationError is the validation error returned by
// RejoinRequestPayload.Validate if the designated constraints aren't met.
type RejoinRequestPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejoinRequestPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejoinRequestPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejoinRequestPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejoinRequestPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejoinRequestPayloadValidationError) ErrorName() string {
	return "RejoinRequestPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e RejoinRequestPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejoinRequestPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejoinRequestPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejoinRequestPayloadValidationError{}

// Validate checks the field values on JoinAcceptPayload with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *JoinAcceptPayload) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Encrypted

	// no validation rules for JoinNonce

	// no validation rules for NetId

	// no validation rules for DevAddr

	if m.GetDlSettings() == nil {
		return JoinAcceptPayloadValidationError{
			field:  "DlSettings",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDlSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinAcceptPayloadValidationError{
				field:  "DlSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := RxDelay_name[int32(m.GetRxDelay())]; !ok {
		return JoinAcceptPayloadValidationError{
			field:  "RxDelay",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetCfList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinAcceptPayloadValidationError{
				field:  "CfList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// JoinAcceptPayloadValidationError is the validation error returned by
// JoinAcceptPayload.Validate if the designated constraints aren't met.
type JoinAcceptPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinAcceptPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinAcceptPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinAcceptPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinAcceptPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinAcceptPayloadValidationError) ErrorName() string {
	return "JoinAcceptPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e JoinAcceptPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinAcceptPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinAcceptPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinAcceptPayloadValidationError{}

// Validate checks the field values on DLSettings with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DLSettings) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetRx1DrOffset() > 7 {
		return DLSettingsValidationError{
			field:  "Rx1DrOffset",
			reason: "value must be less than or equal to 7",
		}
	}

	if _, ok := DataRateIndex_name[int32(m.GetRx2Dr())]; !ok {
		return DLSettingsValidationError{
			field:  "Rx2Dr",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for OptNeg

	return nil
}

// DLSettingsValidationError is the validation error returned by
// DLSettings.Validate if the designated constraints aren't met.
type DLSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DLSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DLSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DLSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DLSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DLSettingsValidationError) ErrorName() string { return "DLSettingsValidationError" }

// Error satisfies the builtin error interface
func (e DLSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDLSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DLSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DLSettingsValidationError{}

// Validate checks the field values on CFList with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CFList) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := CFListType_name[int32(m.GetType())]; !ok {
		return CFListValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// CFListValidationError is the validation error returned by CFList.Validate if
// the designated constraints aren't met.
type CFListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CFListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CFListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CFListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CFListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CFListValidationError) ErrorName() string { return "CFListValidationError" }

// Error satisfies the builtin error interface
func (e CFListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCFList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CFListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CFListValidationError{}

// Validate checks the field values on LoRaDataRate with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LoRaDataRate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Bandwidth

	// no validation rules for SpreadingFactor

	return nil
}

// LoRaDataRateValidationError is the validation error returned by
// LoRaDataRate.Validate if the designated constraints aren't met.
type LoRaDataRateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoRaDataRateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoRaDataRateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoRaDataRateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoRaDataRateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoRaDataRateValidationError) ErrorName() string { return "LoRaDataRateValidationError" }

// Error satisfies the builtin error interface
func (e LoRaDataRateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoRaDataRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoRaDataRateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoRaDataRateValidationError{}

// Validate checks the field values on FSKDataRate with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FSKDataRate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BitRate

	return nil
}

// FSKDataRateValidationError is the validation error returned by
// FSKDataRate.Validate if the designated constraints aren't met.
type FSKDataRateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSKDataRateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSKDataRateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSKDataRateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FSKDataRateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSKDataRateValidationError) ErrorName() string { return "FSKDataRateValidationError" }

// Error satisfies the builtin error interface
func (e FSKDataRateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSKDataRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSKDataRateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FSKDataRateValidationError{}

// Validate checks the field values on DataRate with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DataRate) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Modulation.(type) {

	case *DataRate_Lora:

		if v, ok := interface{}(m.GetLora()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataRateValidationError{
					field:  "Lora",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DataRate_Fsk:

		if v, ok := interface{}(m.GetFsk()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataRateValidationError{
					field:  "Fsk",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return DataRateValidationError{
			field:  "Modulation",
			reason: "value is required",
		}

	}

	return nil
}

// DataRateValidationError is the validation error returned by
// DataRate.Validate if the designated constraints aren't met.
type DataRateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataRateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataRateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataRateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataRateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataRateValidationError) ErrorName() string { return "DataRateValidationError" }

// Error satisfies the builtin error interface
func (e DataRateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataRateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataRateValidationError{}

// Validate checks the field values on TxSettings with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TxSettings) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetDataRate() == nil {
		return TxSettingsValidationError{
			field:  "DataRate",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDataRate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TxSettingsValidationError{
				field:  "DataRate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := DataRateIndex_name[int32(m.GetDataRateIndex())]; !ok {
		return TxSettingsValidationError{
			field:  "DataRateIndex",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for CodingRate

	// no validation rules for Frequency

	// no validation rules for EnableCrc

	// no validation rules for Timestamp

	if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TxSettingsValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TxSettingsValidationError{
				field:  "Downlink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TxSettingsValidationError is the validation error returned by
// TxSettings.Validate if the designated constraints aren't met.
type TxSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxSettingsValidationError) ErrorName() string { return "TxSettingsValidationError" }

// Error satisfies the builtin error interface
func (e TxSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxSettingsValidationError{}

// Validate checks the field values on GatewayAntennaIdentifiers with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GatewayAntennaIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGatewayIds() == nil {
		return GatewayAntennaIdentifiersValidationError{
			field:  "GatewayIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetGatewayIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayAntennaIdentifiersValidationError{
				field:  "GatewayIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AntennaIndex

	return nil
}

// GatewayAntennaIdentifiersValidationError is the validation error returned by
// GatewayAntennaIdentifiers.Validate if the designated constraints aren't met.
type GatewayAntennaIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayAntennaIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayAntennaIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayAntennaIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayAntennaIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayAntennaIdentifiersValidationError) ErrorName() string {
	return "GatewayAntennaIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e GatewayAntennaIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayAntennaIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayAntennaIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayAntennaIdentifiersValidationError{}

// Validate checks the field values on UplinkToken with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UplinkToken) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return UplinkTokenValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UplinkTokenValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Timestamp

	if v, ok := interface{}(m.GetServerTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UplinkTokenValidationError{
				field:  "ServerTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConcentratorTime

	return nil
}

// UplinkTokenValidationError is the validation error returned by
// UplinkToken.Validate if the designated constraints aren't met.
type UplinkTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UplinkTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UplinkTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UplinkTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UplinkTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UplinkTokenValidationError) ErrorName() string { return "UplinkTokenValidationError" }

// Error satisfies the builtin error interface
func (e UplinkTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUplinkToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UplinkTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UplinkTokenValidationError{}

// Validate checks the field values on DownlinkPath with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DownlinkPath) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Path.(type) {

	case *DownlinkPath_UplinkToken:
		// no validation rules for UplinkToken

	case *DownlinkPath_Fixed:

		if v, ok := interface{}(m.GetFixed()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DownlinkPathValidationError{
					field:  "Fixed",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return DownlinkPathValidationError{
			field:  "Path",
			reason: "value is required",
		}

	}

	return nil
}

// DownlinkPathValidationError is the validation error returned by
// DownlinkPath.Validate if the designated constraints aren't met.
type DownlinkPathValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownlinkPathValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownlinkPathValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownlinkPathValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownlinkPathValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownlinkPathValidationError) ErrorName() string { return "DownlinkPathValidationError" }

// Error satisfies the builtin error interface
func (e DownlinkPathValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownlinkPath.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownlinkPathValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownlinkPathValidationError{}

// Validate checks the field values on TxRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TxRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Class

	for idx, item := range m.GetDownlinkPaths() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  fmt.Sprintf("DownlinkPaths[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if _, ok := RxDelay_name[int32(m.GetRx1Delay())]; !ok {
		return TxRequestValidationError{
			field:  "Rx1Delay",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := DataRateIndex_name[int32(m.GetRx1DataRateIndex())]; !ok {
		return TxRequestValidationError{
			field:  "Rx1DataRateIndex",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for Rx1Frequency

	if _, ok := DataRateIndex_name[int32(m.GetRx2DataRateIndex())]; !ok {
		return TxRequestValidationError{
			field:  "Rx2DataRateIndex",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for Rx2Frequency

	if _, ok := TxSchedulePriority_name[int32(m.GetPriority())]; !ok {
		return TxRequestValidationError{
			field:  "Priority",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetAbsoluteTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TxRequestValidationError{
				field:  "AbsoluteTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetFrequencyPlanId()) > 64 {
		return TxRequestValidationError{
			field:  "FrequencyPlanId",
			reason: "value length must be at most 64 runes",
		}
	}

	if v, ok := interface{}(m.GetAdvanced()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TxRequestValidationError{
				field:  "Advanced",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TxRequestValidationError is the validation error returned by
// TxRequest.Validate if the designated constraints aren't met.
type TxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxRequestValidationError) ErrorName() string { return "TxRequestValidationError" }

// Error satisfies the builtin error interface
func (e TxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxRequestValidationError{}

// Validate checks the field values on MACCommand with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MACCommand) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _MACCommand_Cid_NotInLookup[m.GetCid()]; ok {
		return MACCommandValidationError{
			field:  "Cid",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := MACCommandIdentifier_name[int32(m.GetCid())]; !ok {
		return MACCommandValidationError{
			field:  "Cid",
			reason: "value must be one of the defined enum values",
		}
	}

	switch m.Payload.(type) {

	case *MACCommand_RawPayload:
		// no validation rules for RawPayload

	case *MACCommand_ResetInd_:

		if v, ok := interface{}(m.GetResetInd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "ResetInd",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_ResetConf_:

		if v, ok := interface{}(m.GetResetConf()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "ResetConf",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_LinkCheckAns_:

		if v, ok := interface{}(m.GetLinkCheckAns()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "LinkCheckAns",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_LinkAdrReq:

		if v, ok := interface{}(m.GetLinkAdrReq()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "LinkAdrReq",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_LinkAdrAns:

		if v, ok := interface{}(m.GetLinkAdrAns()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "LinkAdrAns",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_DutyCycleReq_:

		if v, ok := interface{}(m.GetDutyCycleReq()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "DutyCycleReq",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_RxParamSetupReq_:

		if v, ok := interface{}(m.GetRxParamSetupReq()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "RxParamSetupReq",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_RxParamSetupAns_:

		if v, ok := interface{}(m.GetRxParamSetupAns()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "RxParamSetupAns",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_DevStatusAns_:

		if v, ok := interface{}(m.GetDevStatusAns()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "DevStatusAns",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_NewChannelReq_:

		if v, ok := interface{}(m.GetNewChannelReq()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "NewChannelReq",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_NewChannelAns_:

		if v, ok := interface{}(m.GetNewChannelAns()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "NewChannelAns",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_DlChannelReq:

		if v, ok := interface{}(m.GetDlChannelReq()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "DlChannelReq",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_DlChannelAns:

		if v, ok := interface{}(m.GetDlChannelAns()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "DlChannelAns",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_RxTimingSetupReq_:

		if v, ok := interface{}(m.GetRxTimingSetupReq()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "RxTimingSetupReq",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_TxParamSetupReq_:

		if v, ok := interface{}(m.GetTxParamSetupReq()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "TxParamSetupReq",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_RekeyInd_:

		if v, ok := interface{}(m.GetRekeyInd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "RekeyInd",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_RekeyConf_:

		if v, ok := interface{}(m.GetRekeyConf()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "RekeyConf",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_AdrParamSetupReq:

		if v, ok := interface{}(m.GetAdrParamSetupReq()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "AdrParamSetupReq",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_DeviceTimeAns_:

		if v, ok := interface{}(m.GetDeviceTimeAns()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "DeviceTimeAns",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_ForceRejoinReq_:

		if v, ok := interface{}(m.GetForceRejoinReq()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "ForceRejoinReq",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_RejoinParamSetupReq_:

		if v, ok := interface{}(m.GetRejoinParamSetupReq()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "RejoinParamSetupReq",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_RejoinParamSetupAns_:

		if v, ok := interface{}(m.GetRejoinParamSetupAns()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "RejoinParamSetupAns",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_PingSlotInfoReq_:

		if v, ok := interface{}(m.GetPingSlotInfoReq()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "PingSlotInfoReq",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_PingSlotChannelReq_:

		if v, ok := interface{}(m.GetPingSlotChannelReq()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "PingSlotChannelReq",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_PingSlotChannelAns_:

		if v, ok := interface{}(m.GetPingSlotChannelAns()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "PingSlotChannelAns",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_BeaconTimingAns_:

		if v, ok := interface{}(m.GetBeaconTimingAns()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "BeaconTimingAns",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_BeaconFreqReq_:

		if v, ok := interface{}(m.GetBeaconFreqReq()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "BeaconFreqReq",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_BeaconFreqAns_:

		if v, ok := interface{}(m.GetBeaconFreqAns()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "BeaconFreqAns",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_DeviceModeInd_:

		if v, ok := interface{}(m.GetDeviceModeInd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "DeviceModeInd",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MACCommand_DeviceModeConf_:

		if v, ok := interface{}(m.GetDeviceModeConf()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACCommandValidationError{
					field:  "DeviceModeConf",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MACCommandValidationError is the validation error returned by
// MACCommand.Validate if the designated constraints aren't met.
type MACCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommandValidationError) ErrorName() string { return "MACCommandValidationError" }

// Error satisfies the builtin error interface
func (e MACCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommandValidationError{}

var _MACCommand_Cid_NotInLookup = map[MACCommandIdentifier]struct{}{
	0: {},
}

// Validate checks the field values on DataRateIndexValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DataRateIndexValue) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := DataRateIndex_name[int32(m.GetValue())]; !ok {
		return DataRateIndexValueValidationError{
			field:  "Value",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// DataRateIndexValueValidationError is the validation error returned by
// DataRateIndexValue.Validate if the designated constraints aren't met.
type DataRateIndexValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataRateIndexValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataRateIndexValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataRateIndexValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataRateIndexValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataRateIndexValueValidationError) ErrorName() string {
	return "DataRateIndexValueValidationError"
}

// Error satisfies the builtin error interface
func (e DataRateIndexValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataRateIndexValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataRateIndexValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataRateIndexValueValidationError{}

// Validate checks the field values on PingSlotPeriodValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PingSlotPeriodValue) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := PingSlotPeriod_name[int32(m.GetValue())]; !ok {
		return PingSlotPeriodValueValidationError{
			field:  "Value",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// PingSlotPeriodValueValidationError is the validation error returned by
// PingSlotPeriodValue.Validate if the designated constraints aren't met.
type PingSlotPeriodValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingSlotPeriodValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingSlotPeriodValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingSlotPeriodValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingSlotPeriodValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingSlotPeriodValueValidationError) ErrorName() string {
	return "PingSlotPeriodValueValidationError"
}

// Error satisfies the builtin error interface
func (e PingSlotPeriodValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingSlotPeriodValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingSlotPeriodValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingSlotPeriodValueValidationError{}

// Validate checks the field values on AggregatedDutyCycleValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AggregatedDutyCycleValue) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := AggregatedDutyCycle_name[int32(m.GetValue())]; !ok {
		return AggregatedDutyCycleValueValidationError{
			field:  "Value",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// AggregatedDutyCycleValueValidationError is the validation error returned by
// AggregatedDutyCycleValue.Validate if the designated constraints aren't met.
type AggregatedDutyCycleValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregatedDutyCycleValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregatedDutyCycleValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregatedDutyCycleValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregatedDutyCycleValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregatedDutyCycleValueValidationError) ErrorName() string {
	return "AggregatedDutyCycleValueValidationError"
}

// Error satisfies the builtin error interface
func (e AggregatedDutyCycleValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregatedDutyCycleValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregatedDutyCycleValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregatedDutyCycleValueValidationError{}

// Validate checks the field values on RxDelayValue with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RxDelayValue) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := RxDelay_name[int32(m.GetValue())]; !ok {
		return RxDelayValueValidationError{
			field:  "Value",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// RxDelayValueValidationError is the validation error returned by
// RxDelayValue.Validate if the designated constraints aren't met.
type RxDelayValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RxDelayValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RxDelayValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RxDelayValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RxDelayValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RxDelayValueValidationError) ErrorName() string { return "RxDelayValueValidationError" }

// Error satisfies the builtin error interface
func (e RxDelayValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRxDelayValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RxDelayValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RxDelayValueValidationError{}

// Validate checks the field values on ADRAckLimitExponentValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ADRAckLimitExponentValue) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := ADRAckLimitExponent_name[int32(m.GetValue())]; !ok {
		return ADRAckLimitExponentValueValidationError{
			field:  "Value",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// ADRAckLimitExponentValueValidationError is the validation error returned by
// ADRAckLimitExponentValue.Validate if the designated constraints aren't met.
type ADRAckLimitExponentValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADRAckLimitExponentValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADRAckLimitExponentValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADRAckLimitExponentValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADRAckLimitExponentValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADRAckLimitExponentValueValidationError) ErrorName() string {
	return "ADRAckLimitExponentValueValidationError"
}

// Error satisfies the builtin error interface
func (e ADRAckLimitExponentValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADRAckLimitExponentValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADRAckLimitExponentValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADRAckLimitExponentValueValidationError{}

// Validate checks the field values on ADRAckDelayExponentValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ADRAckDelayExponentValue) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := ADRAckDelayExponent_name[int32(m.GetValue())]; !ok {
		return ADRAckDelayExponentValueValidationError{
			field:  "Value",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// ADRAckDelayExponentValueValidationError is the validation error returned by
// ADRAckDelayExponentValue.Validate if the designated constraints aren't met.
type ADRAckDelayExponentValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADRAckDelayExponentValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADRAckDelayExponentValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADRAckDelayExponentValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADRAckDelayExponentValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADRAckDelayExponentValueValidationError) ErrorName() string {
	return "ADRAckDelayExponentValueValidationError"
}

// Error satisfies the builtin error interface
func (e ADRAckDelayExponentValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADRAckDelayExponentValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADRAckDelayExponentValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADRAckDelayExponentValueValidationError{}

// Validate checks the field values on TxSettings_Downlink with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TxSettings_Downlink) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AntennaIndex

	// no validation rules for TxPower

	// no validation rules for InvertPolarization

	return nil
}

// TxSettings_DownlinkValidationError is the validation error returned by
// TxSettings_Downlink.Validate if the designated constraints aren't met.
type TxSettings_DownlinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxSettings_DownlinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxSettings_DownlinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxSettings_DownlinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxSettings_DownlinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxSettings_DownlinkValidationError) ErrorName() string {
	return "TxSettings_DownlinkValidationError"
}

// Error satisfies the builtin error interface
func (e TxSettings_DownlinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxSettings_Downlink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxSettings_DownlinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxSettings_DownlinkValidationError{}

// Validate checks the field values on MACCommand_ResetInd with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_ResetInd) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _MACCommand_ResetInd_MinorVersion_InLookup[m.GetMinorVersion()]; !ok {
		return MACCommand_ResetIndValidationError{
			field:  "MinorVersion",
			reason: "value must be in list [1]",
		}
	}

	if _, ok := Minor_name[int32(m.GetMinorVersion())]; !ok {
		return MACCommand_ResetIndValidationError{
			field:  "MinorVersion",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MACCommand_ResetIndValidationError is the validation error returned by
// MACCommand_ResetInd.Validate if the designated constraints aren't met.
type MACCommand_ResetIndValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_ResetIndValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_ResetIndValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_ResetIndValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_ResetIndValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_ResetIndValidationError) ErrorName() string {
	return "MACCommand_ResetIndValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_ResetIndValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_ResetInd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_ResetIndValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_ResetIndValidationError{}

var _MACCommand_ResetInd_MinorVersion_InLookup = map[Minor]struct{}{
	1: {},
}

// Validate checks the field values on MACCommand_ResetConf with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_ResetConf) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _MACCommand_ResetConf_MinorVersion_InLookup[m.GetMinorVersion()]; !ok {
		return MACCommand_ResetConfValidationError{
			field:  "MinorVersion",
			reason: "value must be in list [1]",
		}
	}

	if _, ok := Minor_name[int32(m.GetMinorVersion())]; !ok {
		return MACCommand_ResetConfValidationError{
			field:  "MinorVersion",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MACCommand_ResetConfValidationError is the validation error returned by
// MACCommand_ResetConf.Validate if the designated constraints aren't met.
type MACCommand_ResetConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_ResetConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_ResetConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_ResetConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_ResetConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_ResetConfValidationError) ErrorName() string {
	return "MACCommand_ResetConfValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_ResetConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_ResetConf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_ResetConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_ResetConfValidationError{}

var _MACCommand_ResetConf_MinorVersion_InLookup = map[Minor]struct{}{
	1: {},
}

// Validate checks the field values on MACCommand_LinkCheckAns with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_LinkCheckAns) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetMargin() > 254 {
		return MACCommand_LinkCheckAnsValidationError{
			field:  "Margin",
			reason: "value must be less than or equal to 254",
		}
	}

	if m.GetGatewayCount() > 255 {
		return MACCommand_LinkCheckAnsValidationError{
			field:  "GatewayCount",
			reason: "value must be less than or equal to 255",
		}
	}

	return nil
}

// MACCommand_LinkCheckAnsValidationError is the validation error returned by
// MACCommand_LinkCheckAns.Validate if the designated constraints aren't met.
type MACCommand_LinkCheckAnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_LinkCheckAnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_LinkCheckAnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_LinkCheckAnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_LinkCheckAnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_LinkCheckAnsValidationError) ErrorName() string {
	return "MACCommand_LinkCheckAnsValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_LinkCheckAnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_LinkCheckAns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_LinkCheckAnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_LinkCheckAnsValidationError{}

// Validate checks the field values on MACCommand_LinkADRReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_LinkADRReq) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := DataRateIndex_name[int32(m.GetDataRateIndex())]; !ok {
		return MACCommand_LinkADRReqValidationError{
			field:  "DataRateIndex",
			reason: "value must be one of the defined enum values",
		}
	}

	if m.GetTxPowerIndex() > 15 {
		return MACCommand_LinkADRReqValidationError{
			field:  "TxPowerIndex",
			reason: "value must be less than or equal to 15",
		}
	}

	if len(m.GetChannelMask()) > 16 {
		return MACCommand_LinkADRReqValidationError{
			field:  "ChannelMask",
			reason: "value must contain no more than 16 item(s)",
		}
	}

	if m.GetChannelMaskControl() > 7 {
		return MACCommand_LinkADRReqValidationError{
			field:  "ChannelMaskControl",
			reason: "value must be less than or equal to 7",
		}
	}

	if m.GetNbTrans() > 15 {
		return MACCommand_LinkADRReqValidationError{
			field:  "NbTrans",
			reason: "value must be less than or equal to 15",
		}
	}

	return nil
}

// MACCommand_LinkADRReqValidationError is the validation error returned by
// MACCommand_LinkADRReq.Validate if the designated constraints aren't met.
type MACCommand_LinkADRReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_LinkADRReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_LinkADRReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_LinkADRReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_LinkADRReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_LinkADRReqValidationError) ErrorName() string {
	return "MACCommand_LinkADRReqValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_LinkADRReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_LinkADRReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_LinkADRReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_LinkADRReqValidationError{}

// Validate checks the field values on MACCommand_LinkADRAns with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_LinkADRAns) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ChannelMaskAck

	// no validation rules for DataRateIndexAck

	// no validation rules for TxPowerIndexAck

	return nil
}

// MACCommand_LinkADRAnsValidationError is the validation error returned by
// MACCommand_LinkADRAns.Validate if the designated constraints aren't met.
type MACCommand_LinkADRAnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_LinkADRAnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_LinkADRAnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_LinkADRAnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_LinkADRAnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_LinkADRAnsValidationError) ErrorName() string {
	return "MACCommand_LinkADRAnsValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_LinkADRAnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_LinkADRAns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_LinkADRAnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_LinkADRAnsValidationError{}

// Validate checks the field values on MACCommand_DutyCycleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_DutyCycleReq) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := AggregatedDutyCycle_name[int32(m.GetMaxDutyCycle())]; !ok {
		return MACCommand_DutyCycleReqValidationError{
			field:  "MaxDutyCycle",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MACCommand_DutyCycleReqValidationError is the validation error returned by
// MACCommand_DutyCycleReq.Validate if the designated constraints aren't met.
type MACCommand_DutyCycleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_DutyCycleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_DutyCycleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_DutyCycleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_DutyCycleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_DutyCycleReqValidationError) ErrorName() string {
	return "MACCommand_DutyCycleReqValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_DutyCycleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_DutyCycleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_DutyCycleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_DutyCycleReqValidationError{}

// Validate checks the field values on MACCommand_RxParamSetupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_RxParamSetupReq) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := DataRateIndex_name[int32(m.GetRx2DataRateIndex())]; !ok {
		return MACCommand_RxParamSetupReqValidationError{
			field:  "Rx2DataRateIndex",
			reason: "value must be one of the defined enum values",
		}
	}

	if m.GetRx1DataRateOffset() > 7 {
		return MACCommand_RxParamSetupReqValidationError{
			field:  "Rx1DataRateOffset",
			reason: "value must be less than or equal to 7",
		}
	}

	if m.GetRx2Frequency() < 100000 {
		return MACCommand_RxParamSetupReqValidationError{
			field:  "Rx2Frequency",
			reason: "value must be greater than or equal to 100000",
		}
	}

	return nil
}

// MACCommand_RxParamSetupReqValidationError is the validation error returned
// by MACCommand_RxParamSetupReq.Validate if the designated constraints aren't met.
type MACCommand_RxParamSetupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_RxParamSetupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_RxParamSetupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_RxParamSetupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_RxParamSetupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_RxParamSetupReqValidationError) ErrorName() string {
	return "MACCommand_RxParamSetupReqValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_RxParamSetupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_RxParamSetupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_RxParamSetupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_RxParamSetupReqValidationError{}

// Validate checks the field values on MACCommand_RxParamSetupAns with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_RxParamSetupAns) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Rx2DataRateIndexAck

	// no validation rules for Rx1DataRateOffsetAck

	// no validation rules for Rx2FrequencyAck

	return nil
}

// MACCommand_RxParamSetupAnsValidationError is the validation error returned
// by MACCommand_RxParamSetupAns.Validate if the designated constraints aren't met.
type MACCommand_RxParamSetupAnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_RxParamSetupAnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_RxParamSetupAnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_RxParamSetupAnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_RxParamSetupAnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_RxParamSetupAnsValidationError) ErrorName() string {
	return "MACCommand_RxParamSetupAnsValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_RxParamSetupAnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_RxParamSetupAns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_RxParamSetupAnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_RxParamSetupAnsValidationError{}

// Validate checks the field values on MACCommand_DevStatusAns with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_DevStatusAns) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetBattery() > 255 {
		return MACCommand_DevStatusAnsValidationError{
			field:  "Battery",
			reason: "value must be less than or equal to 255",
		}
	}

	if val := m.GetMargin(); val < -32 || val > 31 {
		return MACCommand_DevStatusAnsValidationError{
			field:  "Margin",
			reason: "value must be inside range [-32, 31]",
		}
	}

	return nil
}

// MACCommand_DevStatusAnsValidationError is the validation error returned by
// MACCommand_DevStatusAns.Validate if the designated constraints aren't met.
type MACCommand_DevStatusAnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_DevStatusAnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_DevStatusAnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_DevStatusAnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_DevStatusAnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_DevStatusAnsValidationError) ErrorName() string {
	return "MACCommand_DevStatusAnsValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_DevStatusAnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_DevStatusAns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_DevStatusAnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_DevStatusAnsValidationError{}

// Validate checks the field values on MACCommand_NewChannelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_NewChannelReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetChannelIndex() > 255 {
		return MACCommand_NewChannelReqValidationError{
			field:  "ChannelIndex",
			reason: "value must be less than or equal to 255",
		}
	}

	if val := m.GetFrequency(); val > 0 && val < 100000 {
		return MACCommand_NewChannelReqValidationError{
			field:  "Frequency",
			reason: "value must be outside range (0, 100000)",
		}
	}

	if _, ok := DataRateIndex_name[int32(m.GetMinDataRateIndex())]; !ok {
		return MACCommand_NewChannelReqValidationError{
			field:  "MinDataRateIndex",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := DataRateIndex_name[int32(m.GetMaxDataRateIndex())]; !ok {
		return MACCommand_NewChannelReqValidationError{
			field:  "MaxDataRateIndex",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MACCommand_NewChannelReqValidationError is the validation error returned by
// MACCommand_NewChannelReq.Validate if the designated constraints aren't met.
type MACCommand_NewChannelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_NewChannelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_NewChannelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_NewChannelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_NewChannelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_NewChannelReqValidationError) ErrorName() string {
	return "MACCommand_NewChannelReqValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_NewChannelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_NewChannelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_NewChannelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_NewChannelReqValidationError{}

// Validate checks the field values on MACCommand_NewChannelAns with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_NewChannelAns) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FrequencyAck

	// no validation rules for DataRateAck

	return nil
}

// MACCommand_NewChannelAnsValidationError is the validation error returned by
// MACCommand_NewChannelAns.Validate if the designated constraints aren't met.
type MACCommand_NewChannelAnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_NewChannelAnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_NewChannelAnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_NewChannelAnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_NewChannelAnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_NewChannelAnsValidationError) ErrorName() string {
	return "MACCommand_NewChannelAnsValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_NewChannelAnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_NewChannelAns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_NewChannelAnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_NewChannelAnsValidationError{}

// Validate checks the field values on MACCommand_DLChannelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_DLChannelReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetChannelIndex() > 255 {
		return MACCommand_DLChannelReqValidationError{
			field:  "ChannelIndex",
			reason: "value must be less than or equal to 255",
		}
	}

	if m.GetFrequency() < 100000 {
		return MACCommand_DLChannelReqValidationError{
			field:  "Frequency",
			reason: "value must be greater than or equal to 100000",
		}
	}

	return nil
}

// MACCommand_DLChannelReqValidationError is the validation error returned by
// MACCommand_DLChannelReq.Validate if the designated constraints aren't met.
type MACCommand_DLChannelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_DLChannelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_DLChannelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_DLChannelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_DLChannelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_DLChannelReqValidationError) ErrorName() string {
	return "MACCommand_DLChannelReqValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_DLChannelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_DLChannelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_DLChannelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_DLChannelReqValidationError{}

// Validate checks the field values on MACCommand_DLChannelAns with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_DLChannelAns) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ChannelIndexAck

	// no validation rules for FrequencyAck

	return nil
}

// MACCommand_DLChannelAnsValidationError is the validation error returned by
// MACCommand_DLChannelAns.Validate if the designated constraints aren't met.
type MACCommand_DLChannelAnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_DLChannelAnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_DLChannelAnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_DLChannelAnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_DLChannelAnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_DLChannelAnsValidationError) ErrorName() string {
	return "MACCommand_DLChannelAnsValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_DLChannelAnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_DLChannelAns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_DLChannelAnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_DLChannelAnsValidationError{}

// Validate checks the field values on MACCommand_RxTimingSetupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_RxTimingSetupReq) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := RxDelay_name[int32(m.GetDelay())]; !ok {
		return MACCommand_RxTimingSetupReqValidationError{
			field:  "Delay",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MACCommand_RxTimingSetupReqValidationError is the validation error returned
// by MACCommand_RxTimingSetupReq.Validate if the designated constraints
// aren't met.
type MACCommand_RxTimingSetupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_RxTimingSetupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_RxTimingSetupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_RxTimingSetupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_RxTimingSetupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_RxTimingSetupReqValidationError) ErrorName() string {
	return "MACCommand_RxTimingSetupReqValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_RxTimingSetupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_RxTimingSetupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_RxTimingSetupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_RxTimingSetupReqValidationError{}

// Validate checks the field values on MACCommand_TxParamSetupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_TxParamSetupReq) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := DeviceEIRP_name[int32(m.GetMaxEirpIndex())]; !ok {
		return MACCommand_TxParamSetupReqValidationError{
			field:  "MaxEirpIndex",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for UplinkDwellTime

	// no validation rules for DownlinkDwellTime

	return nil
}

// MACCommand_TxParamSetupReqValidationError is the validation error returned
// by MACCommand_TxParamSetupReq.Validate if the designated constraints aren't met.
type MACCommand_TxParamSetupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_TxParamSetupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_TxParamSetupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_TxParamSetupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_TxParamSetupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_TxParamSetupReqValidationError) ErrorName() string {
	return "MACCommand_TxParamSetupReqValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_TxParamSetupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_TxParamSetupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_TxParamSetupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_TxParamSetupReqValidationError{}

// Validate checks the field values on MACCommand_RekeyInd with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_RekeyInd) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := Minor_name[int32(m.GetMinorVersion())]; !ok {
		return MACCommand_RekeyIndValidationError{
			field:  "MinorVersion",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MACCommand_RekeyIndValidationError is the validation error returned by
// MACCommand_RekeyInd.Validate if the designated constraints aren't met.
type MACCommand_RekeyIndValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_RekeyIndValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_RekeyIndValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_RekeyIndValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_RekeyIndValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_RekeyIndValidationError) ErrorName() string {
	return "MACCommand_RekeyIndValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_RekeyIndValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_RekeyInd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_RekeyIndValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_RekeyIndValidationError{}

// Validate checks the field values on MACCommand_RekeyConf with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_RekeyConf) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := Minor_name[int32(m.GetMinorVersion())]; !ok {
		return MACCommand_RekeyConfValidationError{
			field:  "MinorVersion",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MACCommand_RekeyConfValidationError is the validation error returned by
// MACCommand_RekeyConf.Validate if the designated constraints aren't met.
type MACCommand_RekeyConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_RekeyConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_RekeyConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_RekeyConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_RekeyConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_RekeyConfValidationError) ErrorName() string {
	return "MACCommand_RekeyConfValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_RekeyConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_RekeyConf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_RekeyConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_RekeyConfValidationError{}

// Validate checks the field values on MACCommand_ADRParamSetupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_ADRParamSetupReq) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := ADRAckLimitExponent_name[int32(m.GetAdrAckLimitExponent())]; !ok {
		return MACCommand_ADRParamSetupReqValidationError{
			field:  "AdrAckLimitExponent",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := ADRAckDelayExponent_name[int32(m.GetAdrAckDelayExponent())]; !ok {
		return MACCommand_ADRParamSetupReqValidationError{
			field:  "AdrAckDelayExponent",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MACCommand_ADRParamSetupReqValidationError is the validation error returned
// by MACCommand_ADRParamSetupReq.Validate if the designated constraints
// aren't met.
type MACCommand_ADRParamSetupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_ADRParamSetupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_ADRParamSetupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_ADRParamSetupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_ADRParamSetupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_ADRParamSetupReqValidationError) ErrorName() string {
	return "MACCommand_ADRParamSetupReqValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_ADRParamSetupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_ADRParamSetupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_ADRParamSetupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_ADRParamSetupReqValidationError{}

// Validate checks the field values on MACCommand_DeviceTimeAns with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_DeviceTimeAns) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTime() == nil {
		return MACCommand_DeviceTimeAnsValidationError{
			field:  "Time",
			reason: "value is required",
		}
	}

	return nil
}

// MACCommand_DeviceTimeAnsValidationError is the validation error returned by
// MACCommand_DeviceTimeAns.Validate if the designated constraints aren't met.
type MACCommand_DeviceTimeAnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_DeviceTimeAnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_DeviceTimeAnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_DeviceTimeAnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_DeviceTimeAnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_DeviceTimeAnsValidationError) ErrorName() string {
	return "MACCommand_DeviceTimeAnsValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_DeviceTimeAnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_DeviceTimeAns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_DeviceTimeAnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_DeviceTimeAnsValidationError{}

// Validate checks the field values on MACCommand_ForceRejoinReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_ForceRejoinReq) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := RejoinType_name[int32(m.GetRejoinType())]; !ok {
		return MACCommand_ForceRejoinReqValidationError{
			field:  "RejoinType",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := DataRateIndex_name[int32(m.GetDataRateIndex())]; !ok {
		return MACCommand_ForceRejoinReqValidationError{
			field:  "DataRateIndex",
			reason: "value must be one of the defined enum values",
		}
	}

	if m.GetMaxRetries() > 7 {
		return MACCommand_ForceRejoinReqValidationError{
			field:  "MaxRetries",
			reason: "value must be less than or equal to 7",
		}
	}

	if _, ok := RejoinPeriodExponent_name[int32(m.GetPeriodExponent())]; !ok {
		return MACCommand_ForceRejoinReqValidationError{
			field:  "PeriodExponent",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MACCommand_ForceRejoinReqValidationError is the validation error returned by
// MACCommand_ForceRejoinReq.Validate if the designated constraints aren't met.
type MACCommand_ForceRejoinReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_ForceRejoinReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_ForceRejoinReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_ForceRejoinReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_ForceRejoinReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_ForceRejoinReqValidationError) ErrorName() string {
	return "MACCommand_ForceRejoinReqValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_ForceRejoinReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_ForceRejoinReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_ForceRejoinReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_ForceRejoinReqValidationError{}

// Validate checks the field values on MACCommand_RejoinParamSetupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_RejoinParamSetupReq) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := RejoinCountExponent_name[int32(m.GetMaxCountExponent())]; !ok {
		return MACCommand_RejoinParamSetupReqValidationError{
			field:  "MaxCountExponent",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := RejoinTimeExponent_name[int32(m.GetMaxTimeExponent())]; !ok {
		return MACCommand_RejoinParamSetupReqValidationError{
			field:  "MaxTimeExponent",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MACCommand_RejoinParamSetupReqValidationError is the validation error
// returned by MACCommand_RejoinParamSetupReq.Validate if the designated
// constraints aren't met.
type MACCommand_RejoinParamSetupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_RejoinParamSetupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_RejoinParamSetupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_RejoinParamSetupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_RejoinParamSetupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_RejoinParamSetupReqValidationError) ErrorName() string {
	return "MACCommand_RejoinParamSetupReqValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_RejoinParamSetupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_RejoinParamSetupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_RejoinParamSetupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_RejoinParamSetupReqValidationError{}

// Validate checks the field values on MACCommand_RejoinParamSetupAns with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_RejoinParamSetupAns) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaxTimeExponentAck

	return nil
}

// MACCommand_RejoinParamSetupAnsValidationError is the validation error
// returned by MACCommand_RejoinParamSetupAns.Validate if the designated
// constraints aren't met.
type MACCommand_RejoinParamSetupAnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_RejoinParamSetupAnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_RejoinParamSetupAnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_RejoinParamSetupAnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_RejoinParamSetupAnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_RejoinParamSetupAnsValidationError) ErrorName() string {
	return "MACCommand_RejoinParamSetupAnsValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_RejoinParamSetupAnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_RejoinParamSetupAns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_RejoinParamSetupAnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_RejoinParamSetupAnsValidationError{}

// Validate checks the field values on MACCommand_PingSlotInfoReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_PingSlotInfoReq) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := PingSlotPeriod_name[int32(m.GetPeriod())]; !ok {
		return MACCommand_PingSlotInfoReqValidationError{
			field:  "Period",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MACCommand_PingSlotInfoReqValidationError is the validation error returned
// by MACCommand_PingSlotInfoReq.Validate if the designated constraints aren't met.
type MACCommand_PingSlotInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_PingSlotInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_PingSlotInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_PingSlotInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_PingSlotInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_PingSlotInfoReqValidationError) ErrorName() string {
	return "MACCommand_PingSlotInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_PingSlotInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_PingSlotInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_PingSlotInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_PingSlotInfoReqValidationError{}

// Validate checks the field values on MACCommand_PingSlotChannelReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_PingSlotChannelReq) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetFrequency(); val > 0 && val < 100000 {
		return MACCommand_PingSlotChannelReqValidationError{
			field:  "Frequency",
			reason: "value must be outside range (0, 100000)",
		}
	}

	if _, ok := DataRateIndex_name[int32(m.GetDataRateIndex())]; !ok {
		return MACCommand_PingSlotChannelReqValidationError{
			field:  "DataRateIndex",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MACCommand_PingSlotChannelReqValidationError is the validation error
// returned by MACCommand_PingSlotChannelReq.Validate if the designated
// constraints aren't met.
type MACCommand_PingSlotChannelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_PingSlotChannelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_PingSlotChannelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_PingSlotChannelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_PingSlotChannelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_PingSlotChannelReqValidationError) ErrorName() string {
	return "MACCommand_PingSlotChannelReqValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_PingSlotChannelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_PingSlotChannelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_PingSlotChannelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_PingSlotChannelReqValidationError{}

// Validate checks the field values on MACCommand_PingSlotChannelAns with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_PingSlotChannelAns) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FrequencyAck

	// no validation rules for DataRateIndexAck

	return nil
}

// MACCommand_PingSlotChannelAnsValidationError is the validation error
// returned by MACCommand_PingSlotChannelAns.Validate if the designated
// constraints aren't met.
type MACCommand_PingSlotChannelAnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_PingSlotChannelAnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_PingSlotChannelAnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_PingSlotChannelAnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_PingSlotChannelAnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_PingSlotChannelAnsValidationError) ErrorName() string {
	return "MACCommand_PingSlotChannelAnsValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_PingSlotChannelAnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_PingSlotChannelAns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_PingSlotChannelAnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_PingSlotChannelAnsValidationError{}

// Validate checks the field values on MACCommand_BeaconTimingAns with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_BeaconTimingAns) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetDelay() > 65535 {
		return MACCommand_BeaconTimingAnsValidationError{
			field:  "Delay",
			reason: "value must be less than or equal to 65535",
		}
	}

	if m.GetChannelIndex() > 255 {
		return MACCommand_BeaconTimingAnsValidationError{
			field:  "ChannelIndex",
			reason: "value must be less than or equal to 255",
		}
	}

	return nil
}

// MACCommand_BeaconTimingAnsValidationError is the validation error returned
// by MACCommand_BeaconTimingAns.Validate if the designated constraints aren't met.
type MACCommand_BeaconTimingAnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_BeaconTimingAnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_BeaconTimingAnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_BeaconTimingAnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_BeaconTimingAnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_BeaconTimingAnsValidationError) ErrorName() string {
	return "MACCommand_BeaconTimingAnsValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_BeaconTimingAnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_BeaconTimingAns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_BeaconTimingAnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_BeaconTimingAnsValidationError{}

// Validate checks the field values on MACCommand_BeaconFreqReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_BeaconFreqReq) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetFrequency(); val > 0 && val < 100000 {
		return MACCommand_BeaconFreqReqValidationError{
			field:  "Frequency",
			reason: "value must be outside range (0, 100000)",
		}
	}

	return nil
}

// MACCommand_BeaconFreqReqValidationError is the validation error returned by
// MACCommand_BeaconFreqReq.Validate if the designated constraints aren't met.
type MACCommand_BeaconFreqReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_BeaconFreqReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_BeaconFreqReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_BeaconFreqReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_BeaconFreqReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_BeaconFreqReqValidationError) ErrorName() string {
	return "MACCommand_BeaconFreqReqValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_BeaconFreqReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_BeaconFreqReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_BeaconFreqReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_BeaconFreqReqValidationError{}

// Validate checks the field values on MACCommand_BeaconFreqAns with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_BeaconFreqAns) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FrequencyAck

	return nil
}

// MACCommand_BeaconFreqAnsValidationError is the validation error returned by
// MACCommand_BeaconFreqAns.Validate if the designated constraints aren't met.
type MACCommand_BeaconFreqAnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_BeaconFreqAnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_BeaconFreqAnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_BeaconFreqAnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_BeaconFreqAnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_BeaconFreqAnsValidationError) ErrorName() string {
	return "MACCommand_BeaconFreqAnsValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_BeaconFreqAnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_BeaconFreqAns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_BeaconFreqAnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_BeaconFreqAnsValidationError{}

// Validate checks the field values on MACCommand_DeviceModeInd with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_DeviceModeInd) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := Class_name[int32(m.GetClass())]; !ok {
		return MACCommand_DeviceModeIndValidationError{
			field:  "Class",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MACCommand_DeviceModeIndValidationError is the validation error returned by
// MACCommand_DeviceModeInd.Validate if the designated constraints aren't met.
type MACCommand_DeviceModeIndValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_DeviceModeIndValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_DeviceModeIndValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_DeviceModeIndValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_DeviceModeIndValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_DeviceModeIndValidationError) ErrorName() string {
	return "MACCommand_DeviceModeIndValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_DeviceModeIndValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_DeviceModeInd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_DeviceModeIndValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_DeviceModeIndValidationError{}

// Validate checks the field values on MACCommand_DeviceModeConf with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACCommand_DeviceModeConf) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := Class_name[int32(m.GetClass())]; !ok {
		return MACCommand_DeviceModeConfValidationError{
			field:  "Class",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MACCommand_DeviceModeConfValidationError is the validation error returned by
// MACCommand_DeviceModeConf.Validate if the designated constraints aren't met.
type MACCommand_DeviceModeConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACCommand_DeviceModeConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACCommand_DeviceModeConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACCommand_DeviceModeConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACCommand_DeviceModeConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACCommand_DeviceModeConfValidationError) ErrorName() string {
	return "MACCommand_DeviceModeConfValidationError"
}

// Error satisfies the builtin error interface
func (e MACCommand_DeviceModeConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACCommand_DeviceModeConf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACCommand_DeviceModeConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACCommand_DeviceModeConfValidationError{}
