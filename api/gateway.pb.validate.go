// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/gateway.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _gateway_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GatewayBrand with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GatewayBrand) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Url

	return nil
}

// GatewayBrandValidationError is the validation error returned by
// GatewayBrand.Validate if the designated constraints aren't met.
type GatewayBrandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayBrandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayBrandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayBrandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayBrandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayBrandValidationError) ErrorName() string { return "GatewayBrandValidationError" }

// Error satisfies the builtin error interface
func (e GatewayBrandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayBrand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayBrandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayBrandValidationError{}

// Validate checks the field values on GatewayModel with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GatewayModel) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetBrandId()) > 36 {
		return GatewayModelValidationError{
			field:  "BrandId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_GatewayModel_BrandId_Pattern.MatchString(m.GetBrandId()) {
		return GatewayModelValidationError{
			field:  "BrandId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	if utf8.RuneCountInString(m.GetId()) > 36 {
		return GatewayModelValidationError{
			field:  "Id",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_GatewayModel_Id_Pattern.MatchString(m.GetId()) {
		return GatewayModelValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	// no validation rules for Name

	return nil
}

// GatewayModelValidationError is the validation error returned by
// GatewayModel.Validate if the designated constraints aren't met.
type GatewayModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayModelValidationError) ErrorName() string { return "GatewayModelValidationError" }

// Error satisfies the builtin error interface
func (e GatewayModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayModelValidationError{}

var _GatewayModel_BrandId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

var _GatewayModel_Id_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on GatewayVersionIdentifiers with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GatewayVersionIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetBrandId()) > 36 {
		return GatewayVersionIdentifiersValidationError{
			field:  "BrandId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_GatewayVersionIdentifiers_BrandId_Pattern.MatchString(m.GetBrandId()) {
		return GatewayVersionIdentifiersValidationError{
			field:  "BrandId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	if utf8.RuneCountInString(m.GetModelId()) > 36 {
		return GatewayVersionIdentifiersValidationError{
			field:  "ModelId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_GatewayVersionIdentifiers_ModelId_Pattern.MatchString(m.GetModelId()) {
		return GatewayVersionIdentifiersValidationError{
			field:  "ModelId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	// no validation rules for HardwareVersion

	// no validation rules for FirmwareVersion

	return nil
}

// GatewayVersionIdentifiersValidationError is the validation error returned by
// GatewayVersionIdentifiers.Validate if the designated constraints aren't met.
type GatewayVersionIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayVersionIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayVersionIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayVersionIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayVersionIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayVersionIdentifiersValidationError) ErrorName() string {
	return "GatewayVersionIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e GatewayVersionIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayVersionIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayVersionIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayVersionIdentifiersValidationError{}

var _GatewayVersionIdentifiers_BrandId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

var _GatewayVersionIdentifiers_ModelId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on GatewayRadio with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GatewayRadio) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Enable

	// no validation rules for ChipType

	// no validation rules for Frequency

	// no validation rules for RssiOffset

	if v, ok := interface{}(m.GetTxConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayRadioValidationError{
				field:  "TxConfiguration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GatewayRadioValidationError is the validation error returned by
// GatewayRadio.Validate if the designated constraints aren't met.
type GatewayRadioValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayRadioValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayRadioValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayRadioValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayRadioValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayRadioValidationError) ErrorName() string { return "GatewayRadioValidationError" }

// Error satisfies the builtin error interface
func (e GatewayRadioValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayRadio.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayRadioValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayRadioValidationError{}

// Validate checks the field values on GatewayVersion with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GatewayVersion) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return GatewayVersionValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayVersionValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRadios() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GatewayVersionValidationError{
					field:  fmt.Sprintf("Radios[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ClockSource

	return nil
}

// GatewayVersionValidationError is the validation error returned by
// GatewayVersion.Validate if the designated constraints aren't met.
type GatewayVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayVersionValidationError) ErrorName() string { return "GatewayVersionValidationError" }

// Error satisfies the builtin error interface
func (e GatewayVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayVersionValidationError{}

// Validate checks the field values on Gateway with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Gateway) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return GatewayValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetName()) > 50 {
		return GatewayValidationError{
			field:  "Name",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) > 2000 {
		return GatewayValidationError{
			field:  "Description",
			reason: "value length must be at most 2000 runes",
		}
	}

	for key, val := range m.GetAttributes() {
		_ = val

		if utf8.RuneCountInString(key) > 36 {
			return GatewayValidationError{
				field:  fmt.Sprintf("Attributes[%v]", key),
				reason: "value length must be at most 36 runes",
			}
		}

		if !_Gateway_Attributes_Pattern.MatchString(key) {
			return GatewayValidationError{
				field:  fmt.Sprintf("Attributes[%v]", key),
				reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
			}
		}

		// no validation rules for Attributes[key]
	}

	for idx, item := range m.GetContactInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GatewayValidationError{
					field:  fmt.Sprintf("ContactInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetVersionIds() == nil {
		return GatewayValidationError{
			field:  "VersionIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetVersionIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayValidationError{
				field:  "VersionIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if !_Gateway_GatewayServerAddress_Pattern.MatchString(m.GetGatewayServerAddress()) {
		return GatewayValidationError{
			field:  "GatewayServerAddress",
			reason: "value does not match regex pattern \"^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]*[a-zA-Z0-9])\\\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$\"",
		}
	}

	// no validation rules for AutoUpdate

	// no validation rules for UpdateChannel

	if utf8.RuneCountInString(m.GetFrequencyPlanId()) > 64 {
		return GatewayValidationError{
			field:  "FrequencyPlanId",
			reason: "value length must be at most 64 runes",
		}
	}

	if len(m.GetFrequencyPlanIds()) > 8 {
		return GatewayValidationError{
			field:  "FrequencyPlanIds",
			reason: "value must contain no more than 8 item(s)",
		}
	}

	for idx, item := range m.GetFrequencyPlanIds() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) > 64 {
			return GatewayValidationError{
				field:  fmt.Sprintf("FrequencyPlanIds[%v]", idx),
				reason: "value length must be at most 64 runes",
			}
		}

	}

	for idx, item := range m.GetAntennas() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GatewayValidationError{
					field:  fmt.Sprintf("Antennas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for StatusPublic

	// no validation rules for LocationPublic

	// no validation rules for ScheduleDownlinkLate

	// no validation rules for EnforceDutyCycle

	if _, ok := DownlinkPathConstraint_name[int32(m.GetDownlinkPathConstraint())]; !ok {
		return GatewayValidationError{
			field:  "DownlinkPathConstraint",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetScheduleAnytimeDelay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayValidationError{
				field:  "ScheduleAnytimeDelay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdateLocationFromStatus

	if v, ok := interface{}(m.GetLbsLnsSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayValidationError{
				field:  "LbsLnsSecret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GatewayValidationError is the validation error returned by Gateway.Validate
// if the designated constraints aren't met.
type GatewayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayValidationError) ErrorName() string { return "GatewayValidationError" }

// Error satisfies the builtin error interface
func (e GatewayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGateway.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayValidationError{}

var _Gateway_Attributes_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

var _Gateway_GatewayServerAddress_Pattern = regexp.MustCompile("^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$")

// Validate checks the field values on Gateways with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Gateways) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetGateways() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GatewaysValidationError{
					field:  fmt.Sprintf("Gateways[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GatewaysValidationError is the validation error returned by
// Gateways.Validate if the designated constraints aren't met.
type GatewaysValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewaysValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewaysValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewaysValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewaysValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewaysValidationError) ErrorName() string { return "GatewaysValidationError" }

// Error satisfies the builtin error interface
func (e GatewaysValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGateways.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewaysValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewaysValidationError{}

// Validate checks the field values on GetGatewayRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetGatewayRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGatewayIds() == nil {
		return GetGatewayRequestValidationError{
			field:  "GatewayIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetGatewayIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGatewayRequestValidationError{
				field:  "GatewayIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGatewayRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetGatewayRequestValidationError is the validation error returned by
// GetGatewayRequest.Validate if the designated constraints aren't met.
type GetGatewayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGatewayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGatewayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGatewayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGatewayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGatewayRequestValidationError) ErrorName() string {
	return "GetGatewayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGatewayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGatewayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGatewayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGatewayRequestValidationError{}

// Validate checks the field values on GetGatewayIdentifiersForEUIRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetGatewayIdentifiersForEUIRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Eui

	return nil
}

// GetGatewayIdentifiersForEUIRequestValidationError is the validation error
// returned by GetGatewayIdentifiersForEUIRequest.Validate if the designated
// constraints aren't met.
type GetGatewayIdentifiersForEUIRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGatewayIdentifiersForEUIRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGatewayIdentifiersForEUIRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGatewayIdentifiersForEUIRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGatewayIdentifiersForEUIRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGatewayIdentifiersForEUIRequestValidationError) ErrorName() string {
	return "GetGatewayIdentifiersForEUIRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGatewayIdentifiersForEUIRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGatewayIdentifiersForEUIRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGatewayIdentifiersForEUIRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGatewayIdentifiersForEUIRequestValidationError{}

// Validate checks the field values on ListGatewaysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListGatewaysRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCollaborator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGatewaysRequestValidationError{
				field:  "Collaborator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGatewaysRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _ListGatewaysRequest_Order_InLookup[m.GetOrder()]; !ok {
		return ListGatewaysRequestValidationError{
			field:  "Order",
			reason: "value must be in list [ gateway_id -gateway_id gateway_eui -gateway_eui name -name created_at -created_at]",
		}
	}

	if m.GetLimit() > 1000 {
		return ListGatewaysRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	// no validation rules for Page

	return nil
}

// ListGatewaysRequestValidationError is the validation error returned by
// ListGatewaysRequest.Validate if the designated constraints aren't met.
type ListGatewaysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGatewaysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGatewaysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGatewaysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGatewaysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGatewaysRequestValidationError) ErrorName() string {
	return "ListGatewaysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGatewaysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGatewaysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGatewaysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGatewaysRequestValidationError{}

var _ListGatewaysRequest_Order_InLookup = map[string]struct{}{
	"":             {},
	"gateway_id":   {},
	"-gateway_id":  {},
	"gateway_eui":  {},
	"-gateway_eui": {},
	"name":         {},
	"-name":        {},
	"created_at":   {},
	"-created_at":  {},
}

// Validate checks the field values on CreateGatewayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateGatewayRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGateway() == nil {
		return CreateGatewayRequestValidationError{
			field:  "Gateway",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetGateway()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGatewayRequestValidationError{
				field:  "Gateway",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCollaborator() == nil {
		return CreateGatewayRequestValidationError{
			field:  "Collaborator",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCollaborator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGatewayRequestValidationError{
				field:  "Collaborator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateGatewayRequestValidationError is the validation error returned by
// CreateGatewayRequest.Validate if the designated constraints aren't met.
type CreateGatewayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGatewayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGatewayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGatewayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGatewayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGatewayRequestValidationError) ErrorName() string {
	return "CreateGatewayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGatewayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGatewayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGatewayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGatewayRequestValidationError{}

// Validate checks the field values on UpdateGatewayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGatewayRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGateway() == nil {
		return UpdateGatewayRequestValidationError{
			field:  "Gateway",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetGateway()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGatewayRequestValidationError{
				field:  "Gateway",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGatewayRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateGatewayRequestValidationError is the validation error returned by
// UpdateGatewayRequest.Validate if the designated constraints aren't met.
type UpdateGatewayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGatewayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGatewayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGatewayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGatewayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGatewayRequestValidationError) ErrorName() string {
	return "UpdateGatewayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGatewayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGatewayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGatewayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGatewayRequestValidationError{}

// Validate checks the field values on ListGatewayAPIKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListGatewayAPIKeysRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGatewayIds() == nil {
		return ListGatewayAPIKeysRequestValidationError{
			field:  "GatewayIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetGatewayIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGatewayAPIKeysRequestValidationError{
				field:  "GatewayIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetLimit() > 1000 {
		return ListGatewayAPIKeysRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	// no validation rules for Page

	return nil
}

// ListGatewayAPIKeysRequestValidationError is the validation error returned by
// ListGatewayAPIKeysRequest.Validate if the designated constraints aren't met.
type ListGatewayAPIKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGatewayAPIKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGatewayAPIKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGatewayAPIKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGatewayAPIKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGatewayAPIKeysRequestValidationError) ErrorName() string {
	return "ListGatewayAPIKeysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGatewayAPIKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGatewayAPIKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGatewayAPIKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGatewayAPIKeysRequestValidationError{}

// Validate checks the field values on GetGatewayAPIKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGatewayAPIKeyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGatewayIds() == nil {
		return GetGatewayAPIKeyRequestValidationError{
			field:  "GatewayIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetGatewayIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGatewayAPIKeyRequestValidationError{
				field:  "GatewayIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for KeyId

	return nil
}

// GetGatewayAPIKeyRequestValidationError is the validation error returned by
// GetGatewayAPIKeyRequest.Validate if the designated constraints aren't met.
type GetGatewayAPIKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGatewayAPIKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGatewayAPIKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGatewayAPIKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGatewayAPIKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGatewayAPIKeyRequestValidationError) ErrorName() string {
	return "GetGatewayAPIKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGatewayAPIKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGatewayAPIKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGatewayAPIKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGatewayAPIKeyRequestValidationError{}

// Validate checks the field values on CreateGatewayAPIKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateGatewayAPIKeyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGatewayIds() == nil {
		return CreateGatewayAPIKeyRequestValidationError{
			field:  "GatewayIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetGatewayIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGatewayAPIKeyRequestValidationError{
				field:  "GatewayIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetName()) > 50 {
		return CreateGatewayAPIKeyRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 50 runes",
		}
	}

	for idx, item := range m.GetRights() {
		_, _ = idx, item

		if _, ok := Right_name[int32(item)]; !ok {
			return CreateGatewayAPIKeyRequestValidationError{
				field:  fmt.Sprintf("Rights[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
		}

	}

	return nil
}

// CreateGatewayAPIKeyRequestValidationError is the validation error returned
// by CreateGatewayAPIKeyRequest.Validate if the designated constraints aren't met.
type CreateGatewayAPIKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGatewayAPIKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGatewayAPIKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGatewayAPIKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGatewayAPIKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGatewayAPIKeyRequestValidationError) ErrorName() string {
	return "CreateGatewayAPIKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGatewayAPIKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGatewayAPIKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGatewayAPIKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGatewayAPIKeyRequestValidationError{}

// Validate checks the field values on UpdateGatewayAPIKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGatewayAPIKeyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGatewayIds() == nil {
		return UpdateGatewayAPIKeyRequestValidationError{
			field:  "GatewayIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetGatewayIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGatewayAPIKeyRequestValidationError{
				field:  "GatewayIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetApiKey() == nil {
		return UpdateGatewayAPIKeyRequestValidationError{
			field:  "ApiKey",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApiKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGatewayAPIKeyRequestValidationError{
				field:  "ApiKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateGatewayAPIKeyRequestValidationError is the validation error returned
// by UpdateGatewayAPIKeyRequest.Validate if the designated constraints aren't met.
type UpdateGatewayAPIKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGatewayAPIKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGatewayAPIKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGatewayAPIKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGatewayAPIKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGatewayAPIKeyRequestValidationError) ErrorName() string {
	return "UpdateGatewayAPIKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGatewayAPIKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGatewayAPIKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGatewayAPIKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGatewayAPIKeyRequestValidationError{}

// Validate checks the field values on ListGatewayCollaboratorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListGatewayCollaboratorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGatewayIds() == nil {
		return ListGatewayCollaboratorsRequestValidationError{
			field:  "GatewayIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetGatewayIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGatewayCollaboratorsRequestValidationError{
				field:  "GatewayIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetLimit() > 1000 {
		return ListGatewayCollaboratorsRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	// no validation rules for Page

	return nil
}

// ListGatewayCollaboratorsRequestValidationError is the validation error
// returned by ListGatewayCollaboratorsRequest.Validate if the designated
// constraints aren't met.
type ListGatewayCollaboratorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGatewayCollaboratorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGatewayCollaboratorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGatewayCollaboratorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGatewayCollaboratorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGatewayCollaboratorsRequestValidationError) ErrorName() string {
	return "ListGatewayCollaboratorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGatewayCollaboratorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGatewayCollaboratorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGatewayCollaboratorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGatewayCollaboratorsRequestValidationError{}

// Validate checks the field values on GetGatewayCollaboratorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGatewayCollaboratorRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGatewayIds() == nil {
		return GetGatewayCollaboratorRequestValidationError{
			field:  "GatewayIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetGatewayIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGatewayCollaboratorRequestValidationError{
				field:  "GatewayIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCollaborator() == nil {
		return GetGatewayCollaboratorRequestValidationError{
			field:  "Collaborator",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCollaborator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGatewayCollaboratorRequestValidationError{
				field:  "Collaborator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetGatewayCollaboratorRequestValidationError is the validation error
// returned by GetGatewayCollaboratorRequest.Validate if the designated
// constraints aren't met.
type GetGatewayCollaboratorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGatewayCollaboratorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGatewayCollaboratorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGatewayCollaboratorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGatewayCollaboratorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGatewayCollaboratorRequestValidationError) ErrorName() string {
	return "GetGatewayCollaboratorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGatewayCollaboratorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGatewayCollaboratorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGatewayCollaboratorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGatewayCollaboratorRequestValidationError{}

// Validate checks the field values on SetGatewayCollaboratorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetGatewayCollaboratorRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGatewayIds() == nil {
		return SetGatewayCollaboratorRequestValidationError{
			field:  "GatewayIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetGatewayIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGatewayCollaboratorRequestValidationError{
				field:  "GatewayIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCollaborator() == nil {
		return SetGatewayCollaboratorRequestValidationError{
			field:  "Collaborator",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCollaborator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGatewayCollaboratorRequestValidationError{
				field:  "Collaborator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetGatewayCollaboratorRequestValidationError is the validation error
// returned by SetGatewayCollaboratorRequest.Validate if the designated
// constraints aren't met.
type SetGatewayCollaboratorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetGatewayCollaboratorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetGatewayCollaboratorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetGatewayCollaboratorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetGatewayCollaboratorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetGatewayCollaboratorRequestValidationError) ErrorName() string {
	return "SetGatewayCollaboratorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetGatewayCollaboratorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetGatewayCollaboratorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetGatewayCollaboratorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetGatewayCollaboratorRequestValidationError{}

// Validate checks the field values on GatewayAntenna with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GatewayAntenna) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Gain

	if m.GetLocation() == nil {
		return GatewayAntennaValidationError{
			field:  "Location",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayAntennaValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetAttributes() {
		_ = val

		if utf8.RuneCountInString(key) > 36 {
			return GatewayAntennaValidationError{
				field:  fmt.Sprintf("Attributes[%v]", key),
				reason: "value length must be at most 36 runes",
			}
		}

		if !_GatewayAntenna_Attributes_Pattern.MatchString(key) {
			return GatewayAntennaValidationError{
				field:  fmt.Sprintf("Attributes[%v]", key),
				reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
			}
		}

		// no validation rules for Attributes[key]
	}

	return nil
}

// GatewayAntennaValidationError is the validation error returned by
// GatewayAntenna.Validate if the designated constraints aren't met.
type GatewayAntennaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayAntennaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayAntennaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayAntennaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayAntennaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayAntennaValidationError) ErrorName() string { return "GatewayAntennaValidationError" }

// Error satisfies the builtin error interface
func (e GatewayAntennaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayAntenna.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayAntennaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayAntennaValidationError{}

var _GatewayAntenna_Attributes_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on GatewayStatus with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GatewayStatus) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTime() == nil {
		return GatewayStatusValidationError{
			field:  "Time",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetBootTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayStatusValidationError{
				field:  "BootTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetVersions() {
		_ = val

		if utf8.RuneCountInString(key) > 36 {
			return GatewayStatusValidationError{
				field:  fmt.Sprintf("Versions[%v]", key),
				reason: "value length must be at most 36 runes",
			}
		}

		if !_GatewayStatus_Versions_Pattern.MatchString(key) {
			return GatewayStatusValidationError{
				field:  fmt.Sprintf("Versions[%v]", key),
				reason: "value does not match regex pattern \"^[a-z0-9](?:[_-]?[a-z0-9]){2,}$\"",
			}
		}

		// no validation rules for Versions[key]
	}

	for idx, item := range m.GetAntennaLocations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GatewayStatusValidationError{
					field:  fmt.Sprintf("AntennaLocations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetMetrics() {
		_ = val

		if utf8.RuneCountInString(key) > 36 {
			return GatewayStatusValidationError{
				field:  fmt.Sprintf("Metrics[%v]", key),
				reason: "value length must be at most 36 runes",
			}
		}

		if !_GatewayStatus_Metrics_Pattern.MatchString(key) {
			return GatewayStatusValidationError{
				field:  fmt.Sprintf("Metrics[%v]", key),
				reason: "value does not match regex pattern \"^[a-z0-9](?:[_-]?[a-z0-9]){2,}$\"",
			}
		}

		// no validation rules for Metrics[key]
	}

	if v, ok := interface{}(m.GetAdvanced()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayStatusValidationError{
				field:  "Advanced",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GatewayStatusValidationError is the validation error returned by
// GatewayStatus.Validate if the designated constraints aren't met.
type GatewayStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayStatusValidationError) ErrorName() string { return "GatewayStatusValidationError" }

// Error satisfies the builtin error interface
func (e GatewayStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayStatusValidationError{}

var _GatewayStatus_Versions_Pattern = regexp.MustCompile("^[a-z0-9](?:[_-]?[a-z0-9]){2,}$")

var _GatewayStatus_Metrics_Pattern = regexp.MustCompile("^[a-z0-9](?:[_-]?[a-z0-9]){2,}$")

// Validate checks the field values on GatewayConnectionStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GatewayConnectionStats) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetConnectedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayConnectionStatsValidationError{
				field:  "ConnectedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Protocol

	if v, ok := interface{}(m.GetLastStatusReceivedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayConnectionStatsValidationError{
				field:  "LastStatusReceivedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayConnectionStatsValidationError{
				field:  "LastStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastUplinkReceivedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayConnectionStatsValidationError{
				field:  "LastUplinkReceivedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UplinkCount

	if v, ok := interface{}(m.GetLastDownlinkReceivedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayConnectionStatsValidationError{
				field:  "LastDownlinkReceivedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DownlinkCount

	if v, ok := interface{}(m.GetRoundTripTimes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayConnectionStatsValidationError{
				field:  "RoundTripTimes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSubBands() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GatewayConnectionStatsValidationError{
					field:  fmt.Sprintf("SubBands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GatewayConnectionStatsValidationError is the validation error returned by
// GatewayConnectionStats.Validate if the designated constraints aren't met.
type GatewayConnectionStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayConnectionStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayConnectionStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayConnectionStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayConnectionStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayConnectionStatsValidationError) ErrorName() string {
	return "GatewayConnectionStatsValidationError"
}

// Error satisfies the builtin error interface
func (e GatewayConnectionStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayConnectionStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayConnectionStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayConnectionStatsValidationError{}

// Validate checks the field values on GatewayRadio_TxConfiguration with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GatewayRadio_TxConfiguration) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MinFrequency

	// no validation rules for MaxFrequency

	// no validation rules for NotchFrequency

	return nil
}

// GatewayRadio_TxConfigurationValidationError is the validation error returned
// by GatewayRadio_TxConfiguration.Validate if the designated constraints
// aren't met.
type GatewayRadio_TxConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayRadio_TxConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayRadio_TxConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayRadio_TxConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayRadio_TxConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayRadio_TxConfigurationValidationError) ErrorName() string {
	return "GatewayRadio_TxConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e GatewayRadio_TxConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayRadio_TxConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayRadio_TxConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayRadio_TxConfigurationValidationError{}

// Validate checks the field values on GatewayConnectionStats_RoundTripTimes
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GatewayConnectionStats_RoundTripTimes) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetMin() == nil {
		return GatewayConnectionStats_RoundTripTimesValidationError{
			field:  "Min",
			reason: "value is required",
		}
	}

	if m.GetMax() == nil {
		return GatewayConnectionStats_RoundTripTimesValidationError{
			field:  "Max",
			reason: "value is required",
		}
	}

	if m.GetMedian() == nil {
		return GatewayConnectionStats_RoundTripTimesValidationError{
			field:  "Median",
			reason: "value is required",
		}
	}

	// no validation rules for Count

	return nil
}

// GatewayConnectionStats_RoundTripTimesValidationError is the validation error
// returned by GatewayConnectionStats_RoundTripTimes.Validate if the
// designated constraints aren't met.
type GatewayConnectionStats_RoundTripTimesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayConnectionStats_RoundTripTimesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayConnectionStats_RoundTripTimesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayConnectionStats_RoundTripTimesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayConnectionStats_RoundTripTimesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayConnectionStats_RoundTripTimesValidationError) ErrorName() string {
	return "GatewayConnectionStats_RoundTripTimesValidationError"
}

// Error satisfies the builtin error interface
func (e GatewayConnectionStats_RoundTripTimesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayConnectionStats_RoundTripTimes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayConnectionStats_RoundTripTimesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayConnectionStats_RoundTripTimesValidationError{}

// Validate checks the field values on GatewayConnectionStats_SubBand with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GatewayConnectionStats_SubBand) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MinFrequency

	// no validation rules for MaxFrequency

	// no validation rules for DownlinkUtilizationLimit

	// no validation rules for DownlinkUtilization

	return nil
}

// GatewayConnectionStats_SubBandValidationError is the validation error
// returned by GatewayConnectionStats_SubBand.Validate if the designated
// constraints aren't met.
type GatewayConnectionStats_SubBandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayConnectionStats_SubBandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayConnectionStats_SubBandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayConnectionStats_SubBandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayConnectionStats_SubBandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayConnectionStats_SubBandValidationError) ErrorName() string {
	return "GatewayConnectionStats_SubBandValidationError"
}

// Error satisfies the builtin error interface
func (e GatewayConnectionStats_SubBandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayConnectionStats_SubBand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayConnectionStats_SubBandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayConnectionStats_SubBandValidationError{}
