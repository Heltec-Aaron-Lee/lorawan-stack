// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/oauth.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _oauth_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on OAuthClientAuthorizationIdentifiers with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *OAuthClientAuthorizationIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserIds() == nil {
		return OAuthClientAuthorizationIdentifiersValidationError{
			field:  "UserIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetUserIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthClientAuthorizationIdentifiersValidationError{
				field:  "UserIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetClientIds() == nil {
		return OAuthClientAuthorizationIdentifiersValidationError{
			field:  "ClientIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetClientIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthClientAuthorizationIdentifiersValidationError{
				field:  "ClientIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OAuthClientAuthorizationIdentifiersValidationError is the validation error
// returned by OAuthClientAuthorizationIdentifiers.Validate if the designated
// constraints aren't met.
type OAuthClientAuthorizationIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthClientAuthorizationIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthClientAuthorizationIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthClientAuthorizationIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthClientAuthorizationIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthClientAuthorizationIdentifiersValidationError) ErrorName() string {
	return "OAuthClientAuthorizationIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e OAuthClientAuthorizationIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthClientAuthorizationIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthClientAuthorizationIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthClientAuthorizationIdentifiersValidationError{}

// Validate checks the field values on OAuthClientAuthorization with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OAuthClientAuthorization) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserIds() == nil {
		return OAuthClientAuthorizationValidationError{
			field:  "UserIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetUserIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthClientAuthorizationValidationError{
				field:  "UserIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetClientIds() == nil {
		return OAuthClientAuthorizationValidationError{
			field:  "ClientIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetClientIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthClientAuthorizationValidationError{
				field:  "ClientIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthClientAuthorizationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthClientAuthorizationValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OAuthClientAuthorizationValidationError is the validation error returned by
// OAuthClientAuthorization.Validate if the designated constraints aren't met.
type OAuthClientAuthorizationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthClientAuthorizationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthClientAuthorizationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthClientAuthorizationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthClientAuthorizationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthClientAuthorizationValidationError) ErrorName() string {
	return "OAuthClientAuthorizationValidationError"
}

// Error satisfies the builtin error interface
func (e OAuthClientAuthorizationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthClientAuthorization.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthClientAuthorizationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthClientAuthorizationValidationError{}

// Validate checks the field values on OAuthClientAuthorizations with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OAuthClientAuthorizations) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAuthorizations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OAuthClientAuthorizationsValidationError{
					field:  fmt.Sprintf("Authorizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OAuthClientAuthorizationsValidationError is the validation error returned by
// OAuthClientAuthorizations.Validate if the designated constraints aren't met.
type OAuthClientAuthorizationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthClientAuthorizationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthClientAuthorizationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthClientAuthorizationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthClientAuthorizationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthClientAuthorizationsValidationError) ErrorName() string {
	return "OAuthClientAuthorizationsValidationError"
}

// Error satisfies the builtin error interface
func (e OAuthClientAuthorizationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthClientAuthorizations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthClientAuthorizationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthClientAuthorizationsValidationError{}

// Validate checks the field values on ListOAuthClientAuthorizationsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListOAuthClientAuthorizationsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserIds() == nil {
		return ListOAuthClientAuthorizationsRequestValidationError{
			field:  "UserIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetUserIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOAuthClientAuthorizationsRequestValidationError{
				field:  "UserIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _ListOAuthClientAuthorizationsRequest_Order_InLookup[m.GetOrder()]; !ok {
		return ListOAuthClientAuthorizationsRequestValidationError{
			field:  "Order",
			reason: "value must be in list [ created_at -created_at]",
		}
	}

	if m.GetLimit() > 1000 {
		return ListOAuthClientAuthorizationsRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	// no validation rules for Page

	return nil
}

// ListOAuthClientAuthorizationsRequestValidationError is the validation error
// returned by ListOAuthClientAuthorizationsRequest.Validate if the designated
// constraints aren't met.
type ListOAuthClientAuthorizationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOAuthClientAuthorizationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOAuthClientAuthorizationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOAuthClientAuthorizationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOAuthClientAuthorizationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOAuthClientAuthorizationsRequestValidationError) ErrorName() string {
	return "ListOAuthClientAuthorizationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOAuthClientAuthorizationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOAuthClientAuthorizationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOAuthClientAuthorizationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOAuthClientAuthorizationsRequestValidationError{}

var _ListOAuthClientAuthorizationsRequest_Order_InLookup = map[string]struct{}{
	"":            {},
	"created_at":  {},
	"-created_at": {},
}

// Validate checks the field values on OAuthAuthorizationCode with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OAuthAuthorizationCode) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserIds() == nil {
		return OAuthAuthorizationCodeValidationError{
			field:  "UserIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetUserIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthAuthorizationCodeValidationError{
				field:  "UserIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetUserSessionId()) > 64 {
		return OAuthAuthorizationCodeValidationError{
			field:  "UserSessionId",
			reason: "value length must be at most 64 runes",
		}
	}

	if m.GetClientIds() == nil {
		return OAuthAuthorizationCodeValidationError{
			field:  "ClientIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetClientIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthAuthorizationCodeValidationError{
				field:  "ClientIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Code

	if _, err := url.Parse(m.GetRedirectUri()); err != nil {
		return OAuthAuthorizationCodeValidationError{
			field:  "RedirectUri",
			reason: "value must be a valid URI",
			cause:  err,
		}
	}

	// no validation rules for State

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthAuthorizationCodeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthAuthorizationCodeValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OAuthAuthorizationCodeValidationError is the validation error returned by
// OAuthAuthorizationCode.Validate if the designated constraints aren't met.
type OAuthAuthorizationCodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthAuthorizationCodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthAuthorizationCodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthAuthorizationCodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthAuthorizationCodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthAuthorizationCodeValidationError) ErrorName() string {
	return "OAuthAuthorizationCodeValidationError"
}

// Error satisfies the builtin error interface
func (e OAuthAuthorizationCodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthAuthorizationCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthAuthorizationCodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthAuthorizationCodeValidationError{}

// Validate checks the field values on OAuthAccessTokenIdentifiers with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OAuthAccessTokenIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserIds() == nil {
		return OAuthAccessTokenIdentifiersValidationError{
			field:  "UserIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetUserIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthAccessTokenIdentifiersValidationError{
				field:  "UserIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetClientIds() == nil {
		return OAuthAccessTokenIdentifiersValidationError{
			field:  "ClientIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetClientIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthAccessTokenIdentifiersValidationError{
				field:  "ClientIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	return nil
}

// OAuthAccessTokenIdentifiersValidationError is the validation error returned
// by OAuthAccessTokenIdentifiers.Validate if the designated constraints
// aren't met.
type OAuthAccessTokenIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthAccessTokenIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthAccessTokenIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthAccessTokenIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthAccessTokenIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthAccessTokenIdentifiersValidationError) ErrorName() string {
	return "OAuthAccessTokenIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e OAuthAccessTokenIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthAccessTokenIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthAccessTokenIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthAccessTokenIdentifiersValidationError{}

// Validate checks the field values on OAuthAccessToken with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OAuthAccessToken) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserIds() == nil {
		return OAuthAccessTokenValidationError{
			field:  "UserIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetUserIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthAccessTokenValidationError{
				field:  "UserIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetUserSessionId()) > 64 {
		return OAuthAccessTokenValidationError{
			field:  "UserSessionId",
			reason: "value length must be at most 64 runes",
		}
	}

	if m.GetClientIds() == nil {
		return OAuthAccessTokenValidationError{
			field:  "ClientIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetClientIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthAccessTokenValidationError{
				field:  "ClientIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthAccessTokenValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthAccessTokenValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OAuthAccessTokenValidationError is the validation error returned by
// OAuthAccessToken.Validate if the designated constraints aren't met.
type OAuthAccessTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthAccessTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthAccessTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthAccessTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthAccessTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthAccessTokenValidationError) ErrorName() string { return "OAuthAccessTokenValidationError" }

// Error satisfies the builtin error interface
func (e OAuthAccessTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthAccessToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthAccessTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthAccessTokenValidationError{}

// Validate checks the field values on OAuthAccessTokens with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OAuthAccessTokens) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTokens() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OAuthAccessTokensValidationError{
					field:  fmt.Sprintf("Tokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OAuthAccessTokensValidationError is the validation error returned by
// OAuthAccessTokens.Validate if the designated constraints aren't met.
type OAuthAccessTokensValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthAccessTokensValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthAccessTokensValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthAccessTokensValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthAccessTokensValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthAccessTokensValidationError) ErrorName() string {
	return "OAuthAccessTokensValidationError"
}

// Error satisfies the builtin error interface
func (e OAuthAccessTokensValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthAccessTokens.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthAccessTokensValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthAccessTokensValidationError{}

// Validate checks the field values on ListOAuthAccessTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOAuthAccessTokensRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserIds() == nil {
		return ListOAuthAccessTokensRequestValidationError{
			field:  "UserIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetUserIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOAuthAccessTokensRequestValidationError{
				field:  "UserIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetClientIds() == nil {
		return ListOAuthAccessTokensRequestValidationError{
			field:  "ClientIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetClientIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOAuthAccessTokensRequestValidationError{
				field:  "ClientIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _ListOAuthAccessTokensRequest_Order_InLookup[m.GetOrder()]; !ok {
		return ListOAuthAccessTokensRequestValidationError{
			field:  "Order",
			reason: "value must be in list [ created_at -created_at]",
		}
	}

	if m.GetLimit() > 1000 {
		return ListOAuthAccessTokensRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	// no validation rules for Page

	return nil
}

// ListOAuthAccessTokensRequestValidationError is the validation error returned
// by ListOAuthAccessTokensRequest.Validate if the designated constraints
// aren't met.
type ListOAuthAccessTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOAuthAccessTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOAuthAccessTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOAuthAccessTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOAuthAccessTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOAuthAccessTokensRequestValidationError) ErrorName() string {
	return "ListOAuthAccessTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOAuthAccessTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOAuthAccessTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOAuthAccessTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOAuthAccessTokensRequestValidationError{}

var _ListOAuthAccessTokensRequest_Order_InLookup = map[string]struct{}{
	"":            {},
	"created_at":  {},
	"-created_at": {},
}
