// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/identityserver.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _identityserver_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AuthInfoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AuthInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUniversalRights()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthInfoResponseValidationError{
				field:  "UniversalRights",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsAdmin

	switch m.AccessMethod.(type) {

	case *AuthInfoResponse_ApiKey:

		if v, ok := interface{}(m.GetApiKey()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthInfoResponseValidationError{
					field:  "ApiKey",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AuthInfoResponse_OauthAccessToken:

		if v, ok := interface{}(m.GetOauthAccessToken()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthInfoResponseValidationError{
					field:  "OauthAccessToken",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AuthInfoResponse_UserSession:

		if v, ok := interface{}(m.GetUserSession()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthInfoResponseValidationError{
					field:  "UserSession",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AuthInfoResponseValidationError is the validation error returned by
// AuthInfoResponse.Validate if the designated constraints aren't met.
type AuthInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthInfoResponseValidationError) ErrorName() string { return "AuthInfoResponseValidationError" }

// Error satisfies the builtin error interface
func (e AuthInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthInfoResponseValidationError{}

// Validate checks the field values on GetIsConfigurationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetIsConfigurationRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetIsConfigurationRequestValidationError is the validation error returned by
// GetIsConfigurationRequest.Validate if the designated constraints aren't met.
type GetIsConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIsConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIsConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIsConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIsConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIsConfigurationRequestValidationError) ErrorName() string {
	return "GetIsConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIsConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIsConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIsConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIsConfigurationRequestValidationError{}

// Validate checks the field values on IsConfiguration with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *IsConfiguration) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUserRegistration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfigurationValidationError{
				field:  "UserRegistration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProfilePicture()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfigurationValidationError{
				field:  "ProfilePicture",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndDevicePicture()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfigurationValidationError{
				field:  "EndDevicePicture",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUserRights()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfigurationValidationError{
				field:  "UserRights",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// IsConfigurationValidationError is the validation error returned by
// IsConfiguration.Validate if the designated constraints aren't met.
type IsConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsConfigurationValidationError) ErrorName() string { return "IsConfigurationValidationError" }

// Error satisfies the builtin error interface
func (e IsConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsConfigurationValidationError{}

// Validate checks the field values on GetIsConfigurationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetIsConfigurationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIsConfigurationResponseValidationError{
				field:  "Configuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetIsConfigurationResponseValidationError is the validation error returned
// by GetIsConfigurationResponse.Validate if the designated constraints aren't met.
type GetIsConfigurationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIsConfigurationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIsConfigurationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIsConfigurationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIsConfigurationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIsConfigurationResponseValidationError) ErrorName() string {
	return "GetIsConfigurationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIsConfigurationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIsConfigurationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIsConfigurationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIsConfigurationResponseValidationError{}

// Validate checks the field values on AuthInfoResponse_APIKeyAccess with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AuthInfoResponse_APIKeyAccess) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApiKey() == nil {
		return AuthInfoResponse_APIKeyAccessValidationError{
			field:  "ApiKey",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApiKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthInfoResponse_APIKeyAccessValidationError{
				field:  "ApiKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetEntityIds() == nil {
		return AuthInfoResponse_APIKeyAccessValidationError{
			field:  "EntityIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEntityIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthInfoResponse_APIKeyAccessValidationError{
				field:  "EntityIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AuthInfoResponse_APIKeyAccessValidationError is the validation error
// returned by AuthInfoResponse_APIKeyAccess.Validate if the designated
// constraints aren't met.
type AuthInfoResponse_APIKeyAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthInfoResponse_APIKeyAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthInfoResponse_APIKeyAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthInfoResponse_APIKeyAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthInfoResponse_APIKeyAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthInfoResponse_APIKeyAccessValidationError) ErrorName() string {
	return "AuthInfoResponse_APIKeyAccessValidationError"
}

// Error satisfies the builtin error interface
func (e AuthInfoResponse_APIKeyAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthInfoResponse_APIKeyAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthInfoResponse_APIKeyAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthInfoResponse_APIKeyAccessValidationError{}

// Validate checks the field values on IsConfiguration_UserRegistration with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *IsConfiguration_UserRegistration) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInvitation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRegistrationValidationError{
				field:  "Invitation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetContactInfoValidation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRegistrationValidationError{
				field:  "ContactInfoValidation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAdminApproval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRegistrationValidationError{
				field:  "AdminApproval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordRequirements()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRegistrationValidationError{
				field:  "PasswordRequirements",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// IsConfiguration_UserRegistrationValidationError is the validation error
// returned by IsConfiguration_UserRegistration.Validate if the designated
// constraints aren't met.
type IsConfiguration_UserRegistrationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsConfiguration_UserRegistrationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsConfiguration_UserRegistrationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsConfiguration_UserRegistrationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsConfiguration_UserRegistrationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsConfiguration_UserRegistrationValidationError) ErrorName() string {
	return "IsConfiguration_UserRegistrationValidationError"
}

// Error satisfies the builtin error interface
func (e IsConfiguration_UserRegistrationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsConfiguration_UserRegistration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsConfiguration_UserRegistrationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsConfiguration_UserRegistrationValidationError{}

// Validate checks the field values on IsConfiguration_ProfilePicture with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsConfiguration_ProfilePicture) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDisableUpload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_ProfilePictureValidationError{
				field:  "DisableUpload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUseGravatar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_ProfilePictureValidationError{
				field:  "UseGravatar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// IsConfiguration_ProfilePictureValidationError is the validation error
// returned by IsConfiguration_ProfilePicture.Validate if the designated
// constraints aren't met.
type IsConfiguration_ProfilePictureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsConfiguration_ProfilePictureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsConfiguration_ProfilePictureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsConfiguration_ProfilePictureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsConfiguration_ProfilePictureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsConfiguration_ProfilePictureValidationError) ErrorName() string {
	return "IsConfiguration_ProfilePictureValidationError"
}

// Error satisfies the builtin error interface
func (e IsConfiguration_ProfilePictureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsConfiguration_ProfilePicture.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsConfiguration_ProfilePictureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsConfiguration_ProfilePictureValidationError{}

// Validate checks the field values on IsConfiguration_EndDevicePicture with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *IsConfiguration_EndDevicePicture) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDisableUpload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_EndDevicePictureValidationError{
				field:  "DisableUpload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// IsConfiguration_EndDevicePictureValidationError is the validation error
// returned by IsConfiguration_EndDevicePicture.Validate if the designated
// constraints aren't met.
type IsConfiguration_EndDevicePictureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsConfiguration_EndDevicePictureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsConfiguration_EndDevicePictureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsConfiguration_EndDevicePictureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsConfiguration_EndDevicePictureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsConfiguration_EndDevicePictureValidationError) ErrorName() string {
	return "IsConfiguration_EndDevicePictureValidationError"
}

// Error satisfies the builtin error interface
func (e IsConfiguration_EndDevicePictureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsConfiguration_EndDevicePicture.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsConfiguration_EndDevicePictureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsConfiguration_EndDevicePictureValidationError{}

// Validate checks the field values on IsConfiguration_UserRights with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsConfiguration_UserRights) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCreateApplications()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRightsValidationError{
				field:  "CreateApplications",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreateClients()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRightsValidationError{
				field:  "CreateClients",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreateGateways()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRightsValidationError{
				field:  "CreateGateways",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreateOrganizations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRightsValidationError{
				field:  "CreateOrganizations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// IsConfiguration_UserRightsValidationError is the validation error returned
// by IsConfiguration_UserRights.Validate if the designated constraints aren't met.
type IsConfiguration_UserRightsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsConfiguration_UserRightsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsConfiguration_UserRightsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsConfiguration_UserRightsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsConfiguration_UserRightsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsConfiguration_UserRightsValidationError) ErrorName() string {
	return "IsConfiguration_UserRightsValidationError"
}

// Error satisfies the builtin error interface
func (e IsConfiguration_UserRightsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsConfiguration_UserRights.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsConfiguration_UserRightsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsConfiguration_UserRightsValidationError{}

// Validate checks the field values on
// IsConfiguration_UserRegistration_Invitation with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IsConfiguration_UserRegistration_Invitation) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRequired()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRegistration_InvitationValidationError{
				field:  "Required",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTokenTtl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRegistration_InvitationValidationError{
				field:  "TokenTtl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// IsConfiguration_UserRegistration_InvitationValidationError is the validation
// error returned by IsConfiguration_UserRegistration_Invitation.Validate if
// the designated constraints aren't met.
type IsConfiguration_UserRegistration_InvitationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsConfiguration_UserRegistration_InvitationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsConfiguration_UserRegistration_InvitationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsConfiguration_UserRegistration_InvitationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsConfiguration_UserRegistration_InvitationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsConfiguration_UserRegistration_InvitationValidationError) ErrorName() string {
	return "IsConfiguration_UserRegistration_InvitationValidationError"
}

// Error satisfies the builtin error interface
func (e IsConfiguration_UserRegistration_InvitationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsConfiguration_UserRegistration_Invitation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsConfiguration_UserRegistration_InvitationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsConfiguration_UserRegistration_InvitationValidationError{}

// Validate checks the field values on
// IsConfiguration_UserRegistration_ContactInfoValidation with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsConfiguration_UserRegistration_ContactInfoValidation) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRequired()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRegistration_ContactInfoValidationValidationError{
				field:  "Required",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// IsConfiguration_UserRegistration_ContactInfoValidationValidationError is the
// validation error returned by
// IsConfiguration_UserRegistration_ContactInfoValidation.Validate if the
// designated constraints aren't met.
type IsConfiguration_UserRegistration_ContactInfoValidationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsConfiguration_UserRegistration_ContactInfoValidationValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IsConfiguration_UserRegistration_ContactInfoValidationValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IsConfiguration_UserRegistration_ContactInfoValidationValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e IsConfiguration_UserRegistration_ContactInfoValidationValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e IsConfiguration_UserRegistration_ContactInfoValidationValidationError) ErrorName() string {
	return "IsConfiguration_UserRegistration_ContactInfoValidationValidationError"
}

// Error satisfies the builtin error interface
func (e IsConfiguration_UserRegistration_ContactInfoValidationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsConfiguration_UserRegistration_ContactInfoValidation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsConfiguration_UserRegistration_ContactInfoValidationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsConfiguration_UserRegistration_ContactInfoValidationValidationError{}

// Validate checks the field values on
// IsConfiguration_UserRegistration_AdminApproval with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *IsConfiguration_UserRegistration_AdminApproval) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRequired()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRegistration_AdminApprovalValidationError{
				field:  "Required",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// IsConfiguration_UserRegistration_AdminApprovalValidationError is the
// validation error returned by
// IsConfiguration_UserRegistration_AdminApproval.Validate if the designated
// constraints aren't met.
type IsConfiguration_UserRegistration_AdminApprovalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsConfiguration_UserRegistration_AdminApprovalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsConfiguration_UserRegistration_AdminApprovalValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IsConfiguration_UserRegistration_AdminApprovalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsConfiguration_UserRegistration_AdminApprovalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsConfiguration_UserRegistration_AdminApprovalValidationError) ErrorName() string {
	return "IsConfiguration_UserRegistration_AdminApprovalValidationError"
}

// Error satisfies the builtin error interface
func (e IsConfiguration_UserRegistration_AdminApprovalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsConfiguration_UserRegistration_AdminApproval.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsConfiguration_UserRegistration_AdminApprovalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsConfiguration_UserRegistration_AdminApprovalValidationError{}

// Validate checks the field values on
// IsConfiguration_UserRegistration_PasswordRequirements with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsConfiguration_UserRegistration_PasswordRequirements) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMinLength()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRegistration_PasswordRequirementsValidationError{
				field:  "MinLength",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMaxLength()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRegistration_PasswordRequirementsValidationError{
				field:  "MaxLength",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMinUppercase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRegistration_PasswordRequirementsValidationError{
				field:  "MinUppercase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMinDigits()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRegistration_PasswordRequirementsValidationError{
				field:  "MinDigits",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMinSpecial()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsConfiguration_UserRegistration_PasswordRequirementsValidationError{
				field:  "MinSpecial",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// IsConfiguration_UserRegistration_PasswordRequirementsValidationError is the
// validation error returned by
// IsConfiguration_UserRegistration_PasswordRequirements.Validate if the
// designated constraints aren't met.
type IsConfiguration_UserRegistration_PasswordRequirementsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsConfiguration_UserRegistration_PasswordRequirementsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IsConfiguration_UserRegistration_PasswordRequirementsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IsConfiguration_UserRegistration_PasswordRequirementsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e IsConfiguration_UserRegistration_PasswordRequirementsValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e IsConfiguration_UserRegistration_PasswordRequirementsValidationError) ErrorName() string {
	return "IsConfiguration_UserRegistration_PasswordRequirementsValidationError"
}

// Error satisfies the builtin error interface
func (e IsConfiguration_UserRegistration_PasswordRequirementsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsConfiguration_UserRegistration_PasswordRequirements.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsConfiguration_UserRegistration_PasswordRequirementsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsConfiguration_UserRegistration_PasswordRequirementsValidationError{}
