// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/joinserver.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _joinserver_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SessionKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SessionKeyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetSessionKeyId()) > 2048 {
		return SessionKeyRequestValidationError{
			field:  "SessionKeyId",
			reason: "value length must be at most 2048 bytes",
		}
	}

	// no validation rules for DevEui

	// no validation rules for JoinEui

	return nil
}

// SessionKeyRequestValidationError is the validation error returned by
// SessionKeyRequest.Validate if the designated constraints aren't met.
type SessionKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionKeyRequestValidationError) ErrorName() string {
	return "SessionKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SessionKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionKeyRequestValidationError{}

// Validate checks the field values on NwkSKeysResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *NwkSKeysResponse) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetFNwkSIntKey() == nil {
		return NwkSKeysResponseValidationError{
			field:  "FNwkSIntKey",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetFNwkSIntKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NwkSKeysResponseValidationError{
				field:  "FNwkSIntKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSNwkSIntKey() == nil {
		return NwkSKeysResponseValidationError{
			field:  "SNwkSIntKey",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSNwkSIntKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NwkSKeysResponseValidationError{
				field:  "SNwkSIntKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetNwkSEncKey() == nil {
		return NwkSKeysResponseValidationError{
			field:  "NwkSEncKey",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetNwkSEncKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NwkSKeysResponseValidationError{
				field:  "NwkSEncKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NwkSKeysResponseValidationError is the validation error returned by
// NwkSKeysResponse.Validate if the designated constraints aren't met.
type NwkSKeysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NwkSKeysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NwkSKeysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NwkSKeysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NwkSKeysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NwkSKeysResponseValidationError) ErrorName() string { return "NwkSKeysResponseValidationError" }

// Error satisfies the builtin error interface
func (e NwkSKeysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNwkSKeysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NwkSKeysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NwkSKeysResponseValidationError{}

// Validate checks the field values on AppSKeyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AppSKeyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAppSKey() == nil {
		return AppSKeyResponseValidationError{
			field:  "AppSKey",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAppSKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppSKeyResponseValidationError{
				field:  "AppSKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AppSKeyResponseValidationError is the validation error returned by
// AppSKeyResponse.Validate if the designated constraints aren't met.
type AppSKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppSKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppSKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppSKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppSKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppSKeyResponseValidationError) ErrorName() string { return "AppSKeyResponseValidationError" }

// Error satisfies the builtin error interface
func (e AppSKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppSKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppSKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppSKeyResponseValidationError{}

// Validate checks the field values on CryptoServicePayloadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CryptoServicePayloadRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return CryptoServicePayloadRequestValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CryptoServicePayloadRequestValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := MACVersion_name[int32(m.GetLorawanVersion())]; !ok {
		return CryptoServicePayloadRequestValidationError{
			field:  "LorawanVersion",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for Payload

	if utf8.RuneCountInString(m.GetProvisionerId()) > 36 {
		return CryptoServicePayloadRequestValidationError{
			field:  "ProvisionerId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_CryptoServicePayloadRequest_ProvisionerId_Pattern.MatchString(m.GetProvisionerId()) {
		return CryptoServicePayloadRequestValidationError{
			field:  "ProvisionerId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$|^$\"",
		}
	}

	if v, ok := interface{}(m.GetProvisioningData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CryptoServicePayloadRequestValidationError{
				field:  "ProvisioningData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CryptoServicePayloadRequestValidationError is the validation error returned
// by CryptoServicePayloadRequest.Validate if the designated constraints
// aren't met.
type CryptoServicePayloadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CryptoServicePayloadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CryptoServicePayloadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CryptoServicePayloadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CryptoServicePayloadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CryptoServicePayloadRequestValidationError) ErrorName() string {
	return "CryptoServicePayloadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CryptoServicePayloadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCryptoServicePayloadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CryptoServicePayloadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CryptoServicePayloadRequestValidationError{}

var _CryptoServicePayloadRequest_ProvisionerId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$|^$")

// Validate checks the field values on CryptoServicePayloadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CryptoServicePayloadResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Payload

	return nil
}

// CryptoServicePayloadResponseValidationError is the validation error returned
// by CryptoServicePayloadResponse.Validate if the designated constraints
// aren't met.
type CryptoServicePayloadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CryptoServicePayloadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CryptoServicePayloadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CryptoServicePayloadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CryptoServicePayloadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CryptoServicePayloadResponseValidationError) ErrorName() string {
	return "CryptoServicePayloadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CryptoServicePayloadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCryptoServicePayloadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CryptoServicePayloadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CryptoServicePayloadResponseValidationError{}

// Validate checks the field values on JoinAcceptMICRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *JoinAcceptMICRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPayloadRequest() == nil {
		return JoinAcceptMICRequestValidationError{
			field:  "PayloadRequest",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPayloadRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinAcceptMICRequestValidationError{
				field:  "PayloadRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := RejoinType_name[int32(m.GetJoinRequestType())]; !ok {
		return JoinAcceptMICRequestValidationError{
			field:  "JoinRequestType",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for DevNonce

	return nil
}

// JoinAcceptMICRequestValidationError is the validation error returned by
// JoinAcceptMICRequest.Validate if the designated constraints aren't met.
type JoinAcceptMICRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinAcceptMICRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinAcceptMICRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinAcceptMICRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinAcceptMICRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinAcceptMICRequestValidationError) ErrorName() string {
	return "JoinAcceptMICRequestValidationError"
}

// Error satisfies the builtin error interface
func (e JoinAcceptMICRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinAcceptMICRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinAcceptMICRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinAcceptMICRequestValidationError{}

// Validate checks the field values on DeriveSessionKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeriveSessionKeysRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return DeriveSessionKeysRequestValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeriveSessionKeysRequestValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := MACVersion_name[int32(m.GetLorawanVersion())]; !ok {
		return DeriveSessionKeysRequestValidationError{
			field:  "LorawanVersion",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for JoinNonce

	// no validation rules for DevNonce

	// no validation rules for NetId

	if utf8.RuneCountInString(m.GetProvisionerId()) > 36 {
		return DeriveSessionKeysRequestValidationError{
			field:  "ProvisionerId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_DeriveSessionKeysRequest_ProvisionerId_Pattern.MatchString(m.GetProvisionerId()) {
		return DeriveSessionKeysRequestValidationError{
			field:  "ProvisionerId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$|^$\"",
		}
	}

	if v, ok := interface{}(m.GetProvisioningData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeriveSessionKeysRequestValidationError{
				field:  "ProvisioningData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeriveSessionKeysRequestValidationError is the validation error returned by
// DeriveSessionKeysRequest.Validate if the designated constraints aren't met.
type DeriveSessionKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeriveSessionKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeriveSessionKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeriveSessionKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeriveSessionKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeriveSessionKeysRequestValidationError) ErrorName() string {
	return "DeriveSessionKeysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeriveSessionKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeriveSessionKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeriveSessionKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeriveSessionKeysRequestValidationError{}

var _DeriveSessionKeysRequest_ProvisionerId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$|^$")

// Validate checks the field values on GetRootKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRootKeysRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return GetRootKeysRequestValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRootKeysRequestValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetProvisionerId()) > 36 {
		return GetRootKeysRequestValidationError{
			field:  "ProvisionerId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_GetRootKeysRequest_ProvisionerId_Pattern.MatchString(m.GetProvisionerId()) {
		return GetRootKeysRequestValidationError{
			field:  "ProvisionerId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$|^$\"",
		}
	}

	if v, ok := interface{}(m.GetProvisioningData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRootKeysRequestValidationError{
				field:  "ProvisioningData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetRootKeysRequestValidationError is the validation error returned by
// GetRootKeysRequest.Validate if the designated constraints aren't met.
type GetRootKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRootKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRootKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRootKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRootKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRootKeysRequestValidationError) ErrorName() string {
	return "GetRootKeysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRootKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRootKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRootKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRootKeysRequestValidationError{}

var _GetRootKeysRequest_ProvisionerId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$|^$")

// Validate checks the field values on ProvisionEndDevicesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProvisionEndDevicesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProvisionEndDevicesRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetProvisionerId()) > 36 {
		return ProvisionEndDevicesRequestValidationError{
			field:  "ProvisionerId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_ProvisionEndDevicesRequest_ProvisionerId_Pattern.MatchString(m.GetProvisionerId()) {
		return ProvisionEndDevicesRequestValidationError{
			field:  "ProvisionerId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	// no validation rules for ProvisioningData

	switch m.EndDevices.(type) {

	case *ProvisionEndDevicesRequest_List:

		if v, ok := interface{}(m.GetList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProvisionEndDevicesRequestValidationError{
					field:  "List",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProvisionEndDevicesRequest_Range:

		if v, ok := interface{}(m.GetRange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProvisionEndDevicesRequestValidationError{
					field:  "Range",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProvisionEndDevicesRequest_FromData:

		if v, ok := interface{}(m.GetFromData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProvisionEndDevicesRequestValidationError{
					field:  "FromData",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProvisionEndDevicesRequestValidationError is the validation error returned
// by ProvisionEndDevicesRequest.Validate if the designated constraints aren't met.
type ProvisionEndDevicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvisionEndDevicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvisionEndDevicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvisionEndDevicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvisionEndDevicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvisionEndDevicesRequestValidationError) ErrorName() string {
	return "ProvisionEndDevicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProvisionEndDevicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvisionEndDevicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvisionEndDevicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvisionEndDevicesRequestValidationError{}

var _ProvisionEndDevicesRequest_ProvisionerId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on ApplicationActivationSettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationActivationSettings) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetKekLabel()) > 2048 {
		return ApplicationActivationSettingsValidationError{
			field:  "KekLabel",
			reason: "value length must be at most 2048 runes",
		}
	}

	if v, ok := interface{}(m.GetKek()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationActivationSettingsValidationError{
				field:  "Kek",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for HomeNetId

	if utf8.RuneCountInString(m.GetApplicationServerId()) > 100 {
		return ApplicationActivationSettingsValidationError{
			field:  "ApplicationServerId",
			reason: "value length must be at most 100 runes",
		}
	}

	return nil
}

// ApplicationActivationSettingsValidationError is the validation error
// returned by ApplicationActivationSettings.Validate if the designated
// constraints aren't met.
type ApplicationActivationSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationActivationSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationActivationSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationActivationSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationActivationSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationActivationSettingsValidationError) ErrorName() string {
	return "ApplicationActivationSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationActivationSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationActivationSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationActivationSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationActivationSettingsValidationError{}

// Validate checks the field values on GetApplicationActivationSettingsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetApplicationActivationSettingsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationActivationSettingsRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationActivationSettingsRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetApplicationActivationSettingsRequestValidationError is the validation
// error returned by GetApplicationActivationSettingsRequest.Validate if the
// designated constraints aren't met.
type GetApplicationActivationSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationActivationSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationActivationSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationActivationSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationActivationSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationActivationSettingsRequestValidationError) ErrorName() string {
	return "GetApplicationActivationSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationActivationSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationActivationSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationActivationSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationActivationSettingsRequestValidationError{}

// Validate checks the field values on SetApplicationActivationSettingsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SetApplicationActivationSettingsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetApplicationActivationSettingsRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetApplicationActivationSettingsRequestValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetApplicationActivationSettingsRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetApplicationActivationSettingsRequestValidationError is the validation
// error returned by SetApplicationActivationSettingsRequest.Validate if the
// designated constraints aren't met.
type SetApplicationActivationSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetApplicationActivationSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetApplicationActivationSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetApplicationActivationSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetApplicationActivationSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetApplicationActivationSettingsRequestValidationError) ErrorName() string {
	return "SetApplicationActivationSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetApplicationActivationSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetApplicationActivationSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetApplicationActivationSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetApplicationActivationSettingsRequestValidationError{}

// Validate checks the field values on
// DeleteApplicationActivationSettingsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DeleteApplicationActivationSettingsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteApplicationActivationSettingsRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteApplicationActivationSettingsRequestValidationError is the validation
// error returned by DeleteApplicationActivationSettingsRequest.Validate if
// the designated constraints aren't met.
type DeleteApplicationActivationSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationActivationSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationActivationSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationActivationSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationActivationSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationActivationSettingsRequestValidationError) ErrorName() string {
	return "DeleteApplicationActivationSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationActivationSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationActivationSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationActivationSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationActivationSettingsRequestValidationError{}

// Validate checks the field values on JoinEUIPrefix with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *JoinEUIPrefix) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JoinEui

	// no validation rules for Length

	return nil
}

// JoinEUIPrefixValidationError is the validation error returned by
// JoinEUIPrefix.Validate if the designated constraints aren't met.
type JoinEUIPrefixValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinEUIPrefixValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinEUIPrefixValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinEUIPrefixValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinEUIPrefixValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinEUIPrefixValidationError) ErrorName() string { return "JoinEUIPrefixValidationError" }

// Error satisfies the builtin error interface
func (e JoinEUIPrefixValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinEUIPrefix.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinEUIPrefixValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinEUIPrefixValidationError{}

// Validate checks the field values on JoinEUIPrefixes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *JoinEUIPrefixes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPrefixes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JoinEUIPrefixesValidationError{
					field:  fmt.Sprintf("Prefixes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// JoinEUIPrefixesValidationError is the validation error returned by
// JoinEUIPrefixes.Validate if the designated constraints aren't met.
type JoinEUIPrefixesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinEUIPrefixesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinEUIPrefixesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinEUIPrefixesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinEUIPrefixesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinEUIPrefixesValidationError) ErrorName() string { return "JoinEUIPrefixesValidationError" }

// Error satisfies the builtin error interface
func (e JoinEUIPrefixesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinEUIPrefixes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinEUIPrefixesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinEUIPrefixesValidationError{}

// Validate checks the field values on
// ProvisionEndDevicesRequest_IdentifiersList with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProvisionEndDevicesRequest_IdentifiersList) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JoinEui

	for idx, item := range m.GetEndDeviceIds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProvisionEndDevicesRequest_IdentifiersListValidationError{
					field:  fmt.Sprintf("EndDeviceIds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProvisionEndDevicesRequest_IdentifiersListValidationError is the validation
// error returned by ProvisionEndDevicesRequest_IdentifiersList.Validate if
// the designated constraints aren't met.
type ProvisionEndDevicesRequest_IdentifiersListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvisionEndDevicesRequest_IdentifiersListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvisionEndDevicesRequest_IdentifiersListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvisionEndDevicesRequest_IdentifiersListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvisionEndDevicesRequest_IdentifiersListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvisionEndDevicesRequest_IdentifiersListValidationError) ErrorName() string {
	return "ProvisionEndDevicesRequest_IdentifiersListValidationError"
}

// Error satisfies the builtin error interface
func (e ProvisionEndDevicesRequest_IdentifiersListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvisionEndDevicesRequest_IdentifiersList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvisionEndDevicesRequest_IdentifiersListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvisionEndDevicesRequest_IdentifiersListValidationError{}

// Validate checks the field values on
// ProvisionEndDevicesRequest_IdentifiersRange with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProvisionEndDevicesRequest_IdentifiersRange) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JoinEui

	// no validation rules for StartDevEui

	return nil
}

// ProvisionEndDevicesRequest_IdentifiersRangeValidationError is the validation
// error returned by ProvisionEndDevicesRequest_IdentifiersRange.Validate if
// the designated constraints aren't met.
type ProvisionEndDevicesRequest_IdentifiersRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvisionEndDevicesRequest_IdentifiersRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvisionEndDevicesRequest_IdentifiersRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvisionEndDevicesRequest_IdentifiersRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvisionEndDevicesRequest_IdentifiersRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvisionEndDevicesRequest_IdentifiersRangeValidationError) ErrorName() string {
	return "ProvisionEndDevicesRequest_IdentifiersRangeValidationError"
}

// Error satisfies the builtin error interface
func (e ProvisionEndDevicesRequest_IdentifiersRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvisionEndDevicesRequest_IdentifiersRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvisionEndDevicesRequest_IdentifiersRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvisionEndDevicesRequest_IdentifiersRangeValidationError{}

// Validate checks the field values on
// ProvisionEndDevicesRequest_IdentifiersFromData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProvisionEndDevicesRequest_IdentifiersFromData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JoinEui

	return nil
}

// ProvisionEndDevicesRequest_IdentifiersFromDataValidationError is the
// validation error returned by
// ProvisionEndDevicesRequest_IdentifiersFromData.Validate if the designated
// constraints aren't met.
type ProvisionEndDevicesRequest_IdentifiersFromDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvisionEndDevicesRequest_IdentifiersFromDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvisionEndDevicesRequest_IdentifiersFromDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ProvisionEndDevicesRequest_IdentifiersFromDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvisionEndDevicesRequest_IdentifiersFromDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvisionEndDevicesRequest_IdentifiersFromDataValidationError) ErrorName() string {
	return "ProvisionEndDevicesRequest_IdentifiersFromDataValidationError"
}

// Error satisfies the builtin error interface
func (e ProvisionEndDevicesRequest_IdentifiersFromDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvisionEndDevicesRequest_IdentifiersFromData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvisionEndDevicesRequest_IdentifiersFromDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvisionEndDevicesRequest_IdentifiersFromDataValidationError{}
