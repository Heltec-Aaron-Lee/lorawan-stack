// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/keys.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _keys_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on KeyEnvelope with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *KeyEnvelope) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	if utf8.RuneCountInString(m.GetKekLabel()) > 2048 {
		return KeyEnvelopeValidationError{
			field:  "KekLabel",
			reason: "value length must be at most 2048 runes",
		}
	}

	// no validation rules for EncryptedKey

	return nil
}

// KeyEnvelopeValidationError is the validation error returned by
// KeyEnvelope.Validate if the designated constraints aren't met.
type KeyEnvelopeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyEnvelopeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyEnvelopeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyEnvelopeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyEnvelopeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyEnvelopeValidationError) ErrorName() string { return "KeyEnvelopeValidationError" }

// Error satisfies the builtin error interface
func (e KeyEnvelopeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyEnvelope.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyEnvelopeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyEnvelopeValidationError{}

// Validate checks the field values on RootKeys with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RootKeys) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetRootKeyId()) > 2048 {
		return RootKeysValidationError{
			field:  "RootKeyId",
			reason: "value length must be at most 2048 runes",
		}
	}

	if v, ok := interface{}(m.GetAppKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RootKeysValidationError{
				field:  "AppKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNwkKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RootKeysValidationError{
				field:  "NwkKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RootKeysValidationError is the validation error returned by
// RootKeys.Validate if the designated constraints aren't met.
type RootKeysValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RootKeysValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RootKeysValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RootKeysValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RootKeysValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RootKeysValidationError) ErrorName() string { return "RootKeysValidationError" }

// Error satisfies the builtin error interface
func (e RootKeysValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRootKeys.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RootKeysValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RootKeysValidationError{}

// Validate checks the field values on SessionKeys with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SessionKeys) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetSessionKeyId()) > 2048 {
		return SessionKeysValidationError{
			field:  "SessionKeyId",
			reason: "value length must be at most 2048 bytes",
		}
	}

	if v, ok := interface{}(m.GetFNwkSIntKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionKeysValidationError{
				field:  "FNwkSIntKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSNwkSIntKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionKeysValidationError{
				field:  "SNwkSIntKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNwkSEncKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionKeysValidationError{
				field:  "NwkSEncKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAppSKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionKeysValidationError{
				field:  "AppSKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SessionKeysValidationError is the validation error returned by
// SessionKeys.Validate if the designated constraints aren't met.
type SessionKeysValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionKeysValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionKeysValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionKeysValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionKeysValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionKeysValidationError) ErrorName() string { return "SessionKeysValidationError" }

// Error satisfies the builtin error interface
func (e SessionKeysValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionKeys.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionKeysValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionKeysValidationError{}
