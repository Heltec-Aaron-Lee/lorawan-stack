// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/message_services.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _message_services_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on EncodeDownlinkMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EncodeDownlinkMessageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return EncodeDownlinkMessageRequestValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EncodeDownlinkMessageRequestValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetEndDeviceVersionIds() == nil {
		return EncodeDownlinkMessageRequestValidationError{
			field:  "EndDeviceVersionIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEndDeviceVersionIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EncodeDownlinkMessageRequestValidationError{
				field:  "EndDeviceVersionIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetMessage() == nil {
		return EncodeDownlinkMessageRequestValidationError{
			field:  "Message",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EncodeDownlinkMessageRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Formatter

	// no validation rules for Parameter

	return nil
}

// EncodeDownlinkMessageRequestValidationError is the validation error returned
// by EncodeDownlinkMessageRequest.Validate if the designated constraints
// aren't met.
type EncodeDownlinkMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EncodeDownlinkMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EncodeDownlinkMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EncodeDownlinkMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EncodeDownlinkMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EncodeDownlinkMessageRequestValidationError) ErrorName() string {
	return "EncodeDownlinkMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EncodeDownlinkMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEncodeDownlinkMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EncodeDownlinkMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EncodeDownlinkMessageRequestValidationError{}

// Validate checks the field values on DecodeUplinkMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DecodeUplinkMessageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return DecodeUplinkMessageRequestValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DecodeUplinkMessageRequestValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetEndDeviceVersionIds() == nil {
		return DecodeUplinkMessageRequestValidationError{
			field:  "EndDeviceVersionIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEndDeviceVersionIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DecodeUplinkMessageRequestValidationError{
				field:  "EndDeviceVersionIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetMessage() == nil {
		return DecodeUplinkMessageRequestValidationError{
			field:  "Message",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DecodeUplinkMessageRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Formatter

	// no validation rules for Parameter

	return nil
}

// DecodeUplinkMessageRequestValidationError is the validation error returned
// by DecodeUplinkMessageRequest.Validate if the designated constraints aren't met.
type DecodeUplinkMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecodeUplinkMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecodeUplinkMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecodeUplinkMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecodeUplinkMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecodeUplinkMessageRequestValidationError) ErrorName() string {
	return "DecodeUplinkMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DecodeUplinkMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecodeUplinkMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecodeUplinkMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecodeUplinkMessageRequestValidationError{}

// Validate checks the field values on DecodeDownlinkMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DecodeDownlinkMessageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return DecodeDownlinkMessageRequestValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DecodeDownlinkMessageRequestValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetEndDeviceVersionIds() == nil {
		return DecodeDownlinkMessageRequestValidationError{
			field:  "EndDeviceVersionIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEndDeviceVersionIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DecodeDownlinkMessageRequestValidationError{
				field:  "EndDeviceVersionIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetMessage() == nil {
		return DecodeDownlinkMessageRequestValidationError{
			field:  "Message",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DecodeDownlinkMessageRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Formatter

	// no validation rules for Parameter

	return nil
}

// DecodeDownlinkMessageRequestValidationError is the validation error returned
// by DecodeDownlinkMessageRequest.Validate if the designated constraints
// aren't met.
type DecodeDownlinkMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecodeDownlinkMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecodeDownlinkMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecodeDownlinkMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecodeDownlinkMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecodeDownlinkMessageRequestValidationError) ErrorName() string {
	return "DecodeDownlinkMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DecodeDownlinkMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecodeDownlinkMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecodeDownlinkMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecodeDownlinkMessageRequestValidationError{}
