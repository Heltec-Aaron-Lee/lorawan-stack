// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/gatewayserver.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _gatewayserver_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GatewayUp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GatewayUp) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUplinkMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GatewayUpValidationError{
					field:  fmt.Sprintf("UplinkMessages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetGatewayStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayUpValidationError{
				field:  "GatewayStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTxAcknowledgment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayUpValidationError{
				field:  "TxAcknowledgment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GatewayUpValidationError is the validation error returned by
// GatewayUp.Validate if the designated constraints aren't met.
type GatewayUpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayUpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayUpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayUpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayUpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayUpValidationError) ErrorName() string { return "GatewayUpValidationError" }

// Error satisfies the builtin error interface
func (e GatewayUpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayUp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayUpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayUpValidationError{}

// Validate checks the field values on GatewayDown with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GatewayDown) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDownlinkMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayDownValidationError{
				field:  "DownlinkMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GatewayDownValidationError is the validation error returned by
// GatewayDown.Validate if the designated constraints aren't met.
type GatewayDownValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayDownValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayDownValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayDownValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayDownValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayDownValidationError) ErrorName() string { return "GatewayDownValidationError" }

// Error satisfies the builtin error interface
func (e GatewayDownValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayDown.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayDownValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayDownValidationError{}

// Validate checks the field values on ScheduleDownlinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ScheduleDownlinkResponse) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetDelay() == nil {
		return ScheduleDownlinkResponseValidationError{
			field:  "Delay",
			reason: "value is required",
		}
	}

	return nil
}

// ScheduleDownlinkResponseValidationError is the validation error returned by
// ScheduleDownlinkResponse.Validate if the designated constraints aren't met.
type ScheduleDownlinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleDownlinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleDownlinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleDownlinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleDownlinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleDownlinkResponseValidationError) ErrorName() string {
	return "ScheduleDownlinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleDownlinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleDownlinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleDownlinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleDownlinkResponseValidationError{}

// Validate checks the field values on ScheduleDownlinkErrorDetails with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ScheduleDownlinkErrorDetails) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPathErrors() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScheduleDownlinkErrorDetailsValidationError{
					field:  fmt.Sprintf("PathErrors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ScheduleDownlinkErrorDetailsValidationError is the validation error returned
// by ScheduleDownlinkErrorDetails.Validate if the designated constraints
// aren't met.
type ScheduleDownlinkErrorDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleDownlinkErrorDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleDownlinkErrorDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleDownlinkErrorDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleDownlinkErrorDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleDownlinkErrorDetailsValidationError) ErrorName() string {
	return "ScheduleDownlinkErrorDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleDownlinkErrorDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleDownlinkErrorDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleDownlinkErrorDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleDownlinkErrorDetailsValidationError{}
