// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/end_device.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _end_device_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Session) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DevAddr

	if m.GetKeys() == nil {
		return SessionValidationError{
			field:  "Keys",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetKeys()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionValidationError{
				field:  "Keys",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LastFCntUp

	// no validation rules for LastNFCntDown

	// no validation rules for LastAFCntDown

	// no validation rules for LastConfFCntDown

	if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueuedApplicationDownlinks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionValidationError{
					field:  fmt.Sprintf("QueuedApplicationDownlinks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SessionValidationError is the validation error returned by Session.Validate
// if the designated constraints aren't met.
type SessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionValidationError) ErrorName() string { return "SessionValidationError" }

// Error satisfies the builtin error interface
func (e SessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionValidationError{}

// Validate checks the field values on MACParameters with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MACParameters) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaxEirp

	if _, ok := DataRateIndex_name[int32(m.GetAdrDataRateIndex())]; !ok {
		return MACParametersValidationError{
			field:  "AdrDataRateIndex",
			reason: "value must be one of the defined enum values",
		}
	}

	if m.GetAdrTxPowerIndex() > 15 {
		return MACParametersValidationError{
			field:  "AdrTxPowerIndex",
			reason: "value must be less than or equal to 15",
		}
	}

	if m.GetAdrNbTrans() > 15 {
		return MACParametersValidationError{
			field:  "AdrNbTrans",
			reason: "value must be less than or equal to 15",
		}
	}

	// no validation rules for AdrAckLimit

	// no validation rules for AdrAckDelay

	if _, ok := RxDelay_name[int32(m.GetRx1Delay())]; !ok {
		return MACParametersValidationError{
			field:  "Rx1Delay",
			reason: "value must be one of the defined enum values",
		}
	}

	if m.GetRx1DataRateOffset() > 7 {
		return MACParametersValidationError{
			field:  "Rx1DataRateOffset",
			reason: "value must be less than or equal to 7",
		}
	}

	if _, ok := DataRateIndex_name[int32(m.GetRx2DataRateIndex())]; !ok {
		return MACParametersValidationError{
			field:  "Rx2DataRateIndex",
			reason: "value must be one of the defined enum values",
		}
	}

	if m.GetRx2Frequency() < 100000 {
		return MACParametersValidationError{
			field:  "Rx2Frequency",
			reason: "value must be greater than or equal to 100000",
		}
	}

	if _, ok := AggregatedDutyCycle_name[int32(m.GetMaxDutyCycle())]; !ok {
		return MACParametersValidationError{
			field:  "MaxDutyCycle",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := RejoinTimeExponent_name[int32(m.GetRejoinTimePeriodicity())]; !ok {
		return MACParametersValidationError{
			field:  "RejoinTimePeriodicity",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := RejoinCountExponent_name[int32(m.GetRejoinCountPeriodicity())]; !ok {
		return MACParametersValidationError{
			field:  "RejoinCountPeriodicity",
			reason: "value must be one of the defined enum values",
		}
	}

	if val := m.GetPingSlotFrequency(); val > 0 && val < 100000 {
		return MACParametersValidationError{
			field:  "PingSlotFrequency",
			reason: "value must be outside range (0, 100000)",
		}
	}

	// no validation rules for PingSlotDataRateIndex

	if val := m.GetBeaconFrequency(); val > 0 && val < 100000 {
		return MACParametersValidationError{
			field:  "BeaconFrequency",
			reason: "value must be outside range (0, 100000)",
		}
	}

	if len(m.GetChannels()) < 1 {
		return MACParametersValidationError{
			field:  "Channels",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetChannels() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACParametersValidationError{
					field:  fmt.Sprintf("Channels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetUplinkDwellTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACParametersValidationError{
				field:  "UplinkDwellTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkDwellTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACParametersValidationError{
				field:  "DownlinkDwellTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAdrAckLimitExponent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACParametersValidationError{
				field:  "AdrAckLimitExponent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAdrAckDelayExponent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACParametersValidationError{
				field:  "AdrAckDelayExponent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPingSlotDataRateIndexValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACParametersValidationError{
				field:  "PingSlotDataRateIndexValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MACParametersValidationError is the validation error returned by
// MACParameters.Validate if the designated constraints aren't met.
type MACParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACParametersValidationError) ErrorName() string { return "MACParametersValidationError" }

// Error satisfies the builtin error interface
func (e MACParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACParametersValidationError{}

// Validate checks the field values on EndDeviceBrand with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EndDeviceBrand) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Url

	return nil
}

// EndDeviceBrandValidationError is the validation error returned by
// EndDeviceBrand.Validate if the designated constraints aren't met.
type EndDeviceBrandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceBrandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceBrandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceBrandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceBrandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceBrandValidationError) ErrorName() string { return "EndDeviceBrandValidationError" }

// Error satisfies the builtin error interface
func (e EndDeviceBrandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceBrand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceBrandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceBrandValidationError{}

// Validate checks the field values on EndDeviceModel with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EndDeviceModel) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetBrandId()) > 36 {
		return EndDeviceModelValidationError{
			field:  "BrandId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_EndDeviceModel_BrandId_Pattern.MatchString(m.GetBrandId()) {
		return EndDeviceModelValidationError{
			field:  "BrandId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	if utf8.RuneCountInString(m.GetId()) > 36 {
		return EndDeviceModelValidationError{
			field:  "Id",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_EndDeviceModel_Id_Pattern.MatchString(m.GetId()) {
		return EndDeviceModelValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	// no validation rules for Name

	return nil
}

// EndDeviceModelValidationError is the validation error returned by
// EndDeviceModel.Validate if the designated constraints aren't met.
type EndDeviceModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceModelValidationError) ErrorName() string { return "EndDeviceModelValidationError" }

// Error satisfies the builtin error interface
func (e EndDeviceModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceModelValidationError{}

var _EndDeviceModel_BrandId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

var _EndDeviceModel_Id_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on EndDeviceVersionIdentifiers with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EndDeviceVersionIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetBrandId()) > 36 {
		return EndDeviceVersionIdentifiersValidationError{
			field:  "BrandId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_EndDeviceVersionIdentifiers_BrandId_Pattern.MatchString(m.GetBrandId()) {
		return EndDeviceVersionIdentifiersValidationError{
			field:  "BrandId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	if utf8.RuneCountInString(m.GetModelId()) > 36 {
		return EndDeviceVersionIdentifiersValidationError{
			field:  "ModelId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_EndDeviceVersionIdentifiers_ModelId_Pattern.MatchString(m.GetModelId()) {
		return EndDeviceVersionIdentifiersValidationError{
			field:  "ModelId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	// no validation rules for HardwareVersion

	// no validation rules for FirmwareVersion

	return nil
}

// EndDeviceVersionIdentifiersValidationError is the validation error returned
// by EndDeviceVersionIdentifiers.Validate if the designated constraints
// aren't met.
type EndDeviceVersionIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceVersionIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceVersionIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceVersionIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceVersionIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceVersionIdentifiersValidationError) ErrorName() string {
	return "EndDeviceVersionIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceVersionIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceVersionIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceVersionIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceVersionIdentifiersValidationError{}

var _EndDeviceVersionIdentifiers_BrandId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

var _EndDeviceVersionIdentifiers_ModelId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on EndDeviceVersion with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EndDeviceVersion) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return EndDeviceVersionValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceVersionValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := MACVersion_name[int32(m.GetLorawanVersion())]; !ok {
		return EndDeviceVersionValidationError{
			field:  "LorawanVersion",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := PHYVersion_name[int32(m.GetLorawanPhyVersion())]; !ok {
		return EndDeviceVersionValidationError{
			field:  "LorawanPhyVersion",
			reason: "value must be one of the defined enum values",
		}
	}

	if utf8.RuneCountInString(m.GetFrequencyPlanId()) > 64 {
		return EndDeviceVersionValidationError{
			field:  "FrequencyPlanId",
			reason: "value length must be at most 64 runes",
		}
	}

	// no validation rules for SupportsClassB

	// no validation rules for SupportsClassC

	if v, ok := interface{}(m.GetDefaultMacSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceVersionValidationError{
				field:  "DefaultMacSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MinFrequency

	// no validation rules for MaxFrequency

	// no validation rules for SupportsJoin

	// no validation rules for ResetsJoinNonces

	if m.GetDefaultFormatters() == nil {
		return EndDeviceVersionValidationError{
			field:  "DefaultFormatters",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDefaultFormatters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceVersionValidationError{
				field:  "DefaultFormatters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EndDeviceVersionValidationError is the validation error returned by
// EndDeviceVersion.Validate if the designated constraints aren't met.
type EndDeviceVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceVersionValidationError) ErrorName() string { return "EndDeviceVersionValidationError" }

// Error satisfies the builtin error interface
func (e EndDeviceVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceVersionValidationError{}

// Validate checks the field values on MACSettings with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MACSettings) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetClassBTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "ClassBTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPingSlotPeriodicity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "PingSlotPeriodicity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPingSlotDataRateIndex()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "PingSlotDataRateIndex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetPingSlotFrequency(); wrapper != nil {

		if wrapper.GetValue() < 100000 {
			return MACSettingsValidationError{
				field:  "PingSlotFrequency",
				reason: "value must be greater than or equal to 100000",
			}
		}

	}

	if wrapper := m.GetBeaconFrequency(); wrapper != nil {

		if wrapper.GetValue() < 100000 {
			return MACSettingsValidationError{
				field:  "BeaconFrequency",
				reason: "value must be greater than or equal to 100000",
			}
		}

	}

	if v, ok := interface{}(m.GetClassCTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "ClassCTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRx1Delay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "Rx1Delay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetRx1DataRateOffset(); wrapper != nil {

		if wrapper.GetValue() > 7 {
			return MACSettingsValidationError{
				field:  "Rx1DataRateOffset",
				reason: "value must be less than or equal to 7",
			}
		}

	}

	if v, ok := interface{}(m.GetRx2DataRateIndex()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "Rx2DataRateIndex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetRx2Frequency(); wrapper != nil {

		if wrapper.GetValue() < 100000 {
			return MACSettingsValidationError{
				field:  "Rx2Frequency",
				reason: "value must be greater than or equal to 100000",
			}
		}

	}

	if v, ok := interface{}(m.GetMaxDutyCycle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "MaxDutyCycle",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSupports_32BitFCnt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "Supports_32BitFCnt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUseAdr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "UseAdr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAdrMargin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "AdrMargin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetResetsFCnt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "ResetsFCnt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStatusTimePeriodicity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "StatusTimePeriodicity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStatusCountPeriodicity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "StatusCountPeriodicity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDesiredRx1Delay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "DesiredRx1Delay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDesiredRx1DataRateOffset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "DesiredRx1DataRateOffset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDesiredRx2DataRateIndex()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "DesiredRx2DataRateIndex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetDesiredRx2Frequency(); wrapper != nil {

		if wrapper.GetValue() < 100000 {
			return MACSettingsValidationError{
				field:  "DesiredRx2Frequency",
				reason: "value must be greater than or equal to 100000",
			}
		}

	}

	if v, ok := interface{}(m.GetDesiredMaxDutyCycle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "DesiredMaxDutyCycle",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDesiredAdrAckLimitExponent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "DesiredAdrAckLimitExponent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDesiredAdrAckDelayExponent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "DesiredAdrAckDelayExponent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDesiredPingSlotDataRateIndex()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACSettingsValidationError{
				field:  "DesiredPingSlotDataRateIndex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetDesiredPingSlotFrequency(); wrapper != nil {

		if wrapper.GetValue() < 100000 {
			return MACSettingsValidationError{
				field:  "DesiredPingSlotFrequency",
				reason: "value must be greater than or equal to 100000",
			}
		}

	}

	if wrapper := m.GetDesiredBeaconFrequency(); wrapper != nil {

		if wrapper.GetValue() < 100000 {
			return MACSettingsValidationError{
				field:  "DesiredBeaconFrequency",
				reason: "value must be greater than or equal to 100000",
			}
		}

	}

	return nil
}

// MACSettingsValidationError is the validation error returned by
// MACSettings.Validate if the designated constraints aren't met.
type MACSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACSettingsValidationError) ErrorName() string { return "MACSettingsValidationError" }

// Error satisfies the builtin error interface
func (e MACSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACSettingsValidationError{}

// Validate checks the field values on MACState with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MACState) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCurrentParameters() == nil {
		return MACStateValidationError{
			field:  "CurrentParameters",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCurrentParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACStateValidationError{
				field:  "CurrentParameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetDesiredParameters() == nil {
		return MACStateValidationError{
			field:  "DesiredParameters",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDesiredParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACStateValidationError{
				field:  "DesiredParameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := Class_name[int32(m.GetDeviceClass())]; !ok {
		return MACStateValidationError{
			field:  "DeviceClass",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := MACVersion_name[int32(m.GetLorawanVersion())]; !ok {
		return MACStateValidationError{
			field:  "LorawanVersion",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetLastConfirmedDownlinkAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACStateValidationError{
				field:  "LastConfirmedDownlinkAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LastDevStatusFCntUp

	if v, ok := interface{}(m.GetPingSlotPeriodicity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACStateValidationError{
				field:  "PingSlotPeriodicity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPendingApplicationDownlink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACStateValidationError{
				field:  "PendingApplicationDownlink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueuedResponses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACStateValidationError{
					field:  fmt.Sprintf("QueuedResponses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPendingRequests() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACStateValidationError{
					field:  fmt.Sprintf("PendingRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetQueuedJoinAccept()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACStateValidationError{
				field:  "QueuedJoinAccept",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPendingJoinRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACStateValidationError{
				field:  "PendingJoinRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RxWindowsAvailable

	for idx, item := range m.GetRecentUplinks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACStateValidationError{
					field:  fmt.Sprintf("RecentUplinks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRecentDownlinks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACStateValidationError{
					field:  fmt.Sprintf("RecentDownlinks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetLastNetworkInitiatedDownlinkAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACStateValidationError{
				field:  "LastNetworkInitiatedDownlinkAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRejectedAdrDataRateIndexes()) > 15 {
		return MACStateValidationError{
			field:  "RejectedAdrDataRateIndexes",
			reason: "value must contain no more than 15 item(s)",
		}
	}

	for idx, item := range m.GetRejectedAdrDataRateIndexes() {
		_, _ = idx, item

		if _, ok := DataRateIndex_name[int32(item)]; !ok {
			return MACStateValidationError{
				field:  fmt.Sprintf("RejectedAdrDataRateIndexes[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
		}

	}

	if len(m.GetRejectedAdrTxPowerIndexes()) > 15 {
		return MACStateValidationError{
			field:  "RejectedAdrTxPowerIndexes",
			reason: "value must contain no more than 15 item(s)",
		}
	}

	for idx, item := range m.GetRejectedAdrTxPowerIndexes() {
		_, _ = idx, item

		if item > 15 {
			return MACStateValidationError{
				field:  fmt.Sprintf("RejectedAdrTxPowerIndexes[%v]", idx),
				reason: "value must be less than or equal to 15",
			}
		}

	}

	for idx, item := range m.GetRejectedFrequencies() {
		_, _ = idx, item

		if item < 100000 {
			return MACStateValidationError{
				field:  fmt.Sprintf("RejectedFrequencies[%v]", idx),
				reason: "value must be greater than or equal to 100000",
			}
		}

	}

	if v, ok := interface{}(m.GetLastDownlinkAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACStateValidationError{
				field:  "LastDownlinkAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetRejectedDataRateRanges() {
		_ = val

		// no validation rules for RejectedDataRateRanges[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACStateValidationError{
					field:  fmt.Sprintf("RejectedDataRateRanges[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MACStateValidationError is the validation error returned by
// MACState.Validate if the designated constraints aren't met.
type MACStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACStateValidationError) ErrorName() string { return "MACStateValidationError" }

// Error satisfies the builtin error interface
func (e MACStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACStateValidationError{}

// Validate checks the field values on EndDeviceAuthenticationCode with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EndDeviceAuthenticationCode) Validate() error {
	if m == nil {
		return nil
	}

	if !_EndDeviceAuthenticationCode_Value_Pattern.MatchString(m.GetValue()) {
		return EndDeviceAuthenticationCodeValidationError{
			field:  "Value",
			reason: "value does not match regex pattern \"^[A-Z0-9]{1,32}$\"",
		}
	}

	if v, ok := interface{}(m.GetValidFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceAuthenticationCodeValidationError{
				field:  "ValidFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetValidTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceAuthenticationCodeValidationError{
				field:  "ValidTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EndDeviceAuthenticationCodeValidationError is the validation error returned
// by EndDeviceAuthenticationCode.Validate if the designated constraints
// aren't met.
type EndDeviceAuthenticationCodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceAuthenticationCodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceAuthenticationCodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceAuthenticationCodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceAuthenticationCodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceAuthenticationCodeValidationError) ErrorName() string {
	return "EndDeviceAuthenticationCodeValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceAuthenticationCodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceAuthenticationCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceAuthenticationCodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceAuthenticationCodeValidationError{}

var _EndDeviceAuthenticationCode_Value_Pattern = regexp.MustCompile("^[A-Z0-9]{1,32}$")

// Validate checks the field values on EndDevice with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EndDevice) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return EndDeviceValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetName()) > 50 {
		return EndDeviceValidationError{
			field:  "Name",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) > 2000 {
		return EndDeviceValidationError{
			field:  "Description",
			reason: "value length must be at most 2000 runes",
		}
	}

	for key, val := range m.GetAttributes() {
		_ = val

		if utf8.RuneCountInString(key) > 36 {
			return EndDeviceValidationError{
				field:  fmt.Sprintf("Attributes[%v]", key),
				reason: "value length must be at most 36 runes",
			}
		}

		if !_EndDevice_Attributes_Pattern.MatchString(key) {
			return EndDeviceValidationError{
				field:  fmt.Sprintf("Attributes[%v]", key),
				reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
			}
		}

		// no validation rules for Attributes[key]
	}

	if v, ok := interface{}(m.GetVersionIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceValidationError{
				field:  "VersionIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetServiceProfileId()) > 64 {
		return EndDeviceValidationError{
			field:  "ServiceProfileId",
			reason: "value length must be at most 64 runes",
		}
	}

	if !_EndDevice_NetworkServerAddress_Pattern.MatchString(m.GetNetworkServerAddress()) {
		return EndDeviceValidationError{
			field:  "NetworkServerAddress",
			reason: "value does not match regex pattern \"^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]*[a-zA-Z0-9])\\\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$\"",
		}
	}

	if utf8.RuneCountInString(m.GetNetworkServerKekLabel()) > 2048 {
		return EndDeviceValidationError{
			field:  "NetworkServerKekLabel",
			reason: "value length must be at most 2048 runes",
		}
	}

	if !_EndDevice_ApplicationServerAddress_Pattern.MatchString(m.GetApplicationServerAddress()) {
		return EndDeviceValidationError{
			field:  "ApplicationServerAddress",
			reason: "value does not match regex pattern \"^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]*[a-zA-Z0-9])\\\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$\"",
		}
	}

	if utf8.RuneCountInString(m.GetApplicationServerKekLabel()) > 2048 {
		return EndDeviceValidationError{
			field:  "ApplicationServerKekLabel",
			reason: "value length must be at most 2048 runes",
		}
	}

	if utf8.RuneCountInString(m.GetApplicationServerId()) > 100 {
		return EndDeviceValidationError{
			field:  "ApplicationServerId",
			reason: "value length must be at most 100 runes",
		}
	}

	if !_EndDevice_JoinServerAddress_Pattern.MatchString(m.GetJoinServerAddress()) {
		return EndDeviceValidationError{
			field:  "JoinServerAddress",
			reason: "value does not match regex pattern \"^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]*[a-zA-Z0-9])\\\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$\"",
		}
	}

	for key, val := range m.GetLocations() {
		_ = val

		if utf8.RuneCountInString(key) > 36 {
			return EndDeviceValidationError{
				field:  fmt.Sprintf("Locations[%v]", key),
				reason: "value length must be at most 36 runes",
			}
		}

		if !_EndDevice_Locations_Pattern.MatchString(key) {
			return EndDeviceValidationError{
				field:  fmt.Sprintf("Locations[%v]", key),
				reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EndDeviceValidationError{
					field:  fmt.Sprintf("Locations[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPicture()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceValidationError{
				field:  "Picture",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SupportsClassB

	// no validation rules for SupportsClassC

	if _, ok := MACVersion_name[int32(m.GetLorawanVersion())]; !ok {
		return EndDeviceValidationError{
			field:  "LorawanVersion",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := PHYVersion_name[int32(m.GetLorawanPhyVersion())]; !ok {
		return EndDeviceValidationError{
			field:  "LorawanPhyVersion",
			reason: "value must be one of the defined enum values",
		}
	}

	if utf8.RuneCountInString(m.GetFrequencyPlanId()) > 64 {
		return EndDeviceValidationError{
			field:  "FrequencyPlanId",
			reason: "value length must be at most 64 runes",
		}
	}

	// no validation rules for MinFrequency

	// no validation rules for MaxFrequency

	// no validation rules for SupportsJoin

	// no validation rules for ResetsJoinNonces

	if v, ok := interface{}(m.GetRootKeys()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceValidationError{
				field:  "RootKeys",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NetId

	if v, ok := interface{}(m.GetMacSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceValidationError{
				field:  "MacSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMacState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceValidationError{
				field:  "MacState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPendingMacState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceValidationError{
				field:  "PendingMacState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPendingSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceValidationError{
				field:  "PendingSession",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LastDevNonce

	// no validation rules for LastJoinNonce

	// no validation rules for LastRjCount_0

	// no validation rules for LastRjCount_1

	if v, ok := interface{}(m.GetLastDevStatusReceivedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceValidationError{
				field:  "LastDevStatusReceivedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := PowerState_name[int32(m.GetPowerState())]; !ok {
		return EndDeviceValidationError{
			field:  "PowerState",
			reason: "value must be one of the defined enum values",
		}
	}

	if wrapper := m.GetBatteryPercentage(); wrapper != nil {

		if val := wrapper.GetValue(); val < 0 || val > 1 {
			return EndDeviceValidationError{
				field:  "BatteryPercentage",
				reason: "value must be inside range [0, 1]",
			}
		}

	}

	// no validation rules for DownlinkMargin

	for idx, item := range m.GetRecentAdrUplinks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EndDeviceValidationError{
					field:  fmt.Sprintf("RecentAdrUplinks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRecentUplinks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EndDeviceValidationError{
					field:  fmt.Sprintf("RecentUplinks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRecentDownlinks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EndDeviceValidationError{
					field:  fmt.Sprintf("RecentDownlinks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetQueuedApplicationDownlinks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EndDeviceValidationError{
					field:  fmt.Sprintf("QueuedApplicationDownlinks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetFormatters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceValidationError{
				field:  "Formatters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetProvisionerId()) > 36 {
		return EndDeviceValidationError{
			field:  "ProvisionerId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_EndDevice_ProvisionerId_Pattern.MatchString(m.GetProvisionerId()) {
		return EndDeviceValidationError{
			field:  "ProvisionerId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$|^$\"",
		}
	}

	if v, ok := interface{}(m.GetProvisioningData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceValidationError{
				field:  "ProvisioningData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Multicast

	if v, ok := interface{}(m.GetClaimAuthenticationCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceValidationError{
				field:  "ClaimAuthenticationCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SkipPayloadCrypto

	if v, ok := interface{}(m.GetSkipPayloadCryptoOverride()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceValidationError{
				field:  "SkipPayloadCryptoOverride",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EndDeviceValidationError is the validation error returned by
// EndDevice.Validate if the designated constraints aren't met.
type EndDeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceValidationError) ErrorName() string { return "EndDeviceValidationError" }

// Error satisfies the builtin error interface
func (e EndDeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceValidationError{}

var _EndDevice_Attributes_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

var _EndDevice_NetworkServerAddress_Pattern = regexp.MustCompile("^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$")

var _EndDevice_ApplicationServerAddress_Pattern = regexp.MustCompile("^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$")

var _EndDevice_JoinServerAddress_Pattern = regexp.MustCompile("^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$")

var _EndDevice_Locations_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

var _EndDevice_ProvisionerId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$|^$")

// Validate checks the field values on EndDevices with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EndDevices) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEndDevices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EndDevicesValidationError{
					field:  fmt.Sprintf("EndDevices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EndDevicesValidationError is the validation error returned by
// EndDevices.Validate if the designated constraints aren't met.
type EndDevicesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDevicesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDevicesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDevicesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDevicesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDevicesValidationError) ErrorName() string { return "EndDevicesValidationError" }

// Error satisfies the builtin error interface
func (e EndDevicesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDevices.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDevicesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDevicesValidationError{}

// Validate checks the field values on CreateEndDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEndDeviceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEndDevice() == nil {
		return CreateEndDeviceRequestValidationError{
			field:  "EndDevice",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEndDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEndDeviceRequestValidationError{
				field:  "EndDevice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateEndDeviceRequestValidationError is the validation error returned by
// CreateEndDeviceRequest.Validate if the designated constraints aren't met.
type CreateEndDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEndDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEndDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEndDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEndDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEndDeviceRequestValidationError) ErrorName() string {
	return "CreateEndDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEndDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEndDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEndDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEndDeviceRequestValidationError{}

// Validate checks the field values on UpdateEndDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateEndDeviceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEndDevice() == nil {
		return UpdateEndDeviceRequestValidationError{
			field:  "EndDevice",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEndDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEndDeviceRequestValidationError{
				field:  "EndDevice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEndDeviceRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateEndDeviceRequestValidationError is the validation error returned by
// UpdateEndDeviceRequest.Validate if the designated constraints aren't met.
type UpdateEndDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEndDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEndDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEndDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEndDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEndDeviceRequestValidationError) ErrorName() string {
	return "UpdateEndDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEndDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEndDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEndDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEndDeviceRequestValidationError{}

// Validate checks the field values on GetEndDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEndDeviceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEndDeviceIds() == nil {
		return GetEndDeviceRequestValidationError{
			field:  "EndDeviceIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEndDeviceIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEndDeviceRequestValidationError{
				field:  "EndDeviceIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEndDeviceRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetEndDeviceRequestValidationError is the validation error returned by
// GetEndDeviceRequest.Validate if the designated constraints aren't met.
type GetEndDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndDeviceRequestValidationError) ErrorName() string {
	return "GetEndDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEndDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndDeviceRequestValidationError{}

// Validate checks the field values on GetEndDeviceIdentifiersForEUIsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetEndDeviceIdentifiersForEUIsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JoinEui

	// no validation rules for DevEui

	return nil
}

// GetEndDeviceIdentifiersForEUIsRequestValidationError is the validation error
// returned by GetEndDeviceIdentifiersForEUIsRequest.Validate if the
// designated constraints aren't met.
type GetEndDeviceIdentifiersForEUIsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndDeviceIdentifiersForEUIsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndDeviceIdentifiersForEUIsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndDeviceIdentifiersForEUIsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndDeviceIdentifiersForEUIsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndDeviceIdentifiersForEUIsRequestValidationError) ErrorName() string {
	return "GetEndDeviceIdentifiersForEUIsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEndDeviceIdentifiersForEUIsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndDeviceIdentifiersForEUIsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndDeviceIdentifiersForEUIsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndDeviceIdentifiersForEUIsRequestValidationError{}

// Validate checks the field values on ListEndDevicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEndDevicesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplicationIds() == nil {
		return ListEndDevicesRequestValidationError{
			field:  "ApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEndDevicesRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEndDevicesRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _ListEndDevicesRequest_Order_InLookup[m.GetOrder()]; !ok {
		return ListEndDevicesRequestValidationError{
			field:  "Order",
			reason: "value must be in list [ device_id -device_id join_eui -join_eui dev_eui -dev_eui name -name description -description created_at -created_at]",
		}
	}

	if m.GetLimit() > 1000 {
		return ListEndDevicesRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	// no validation rules for Page

	return nil
}

// ListEndDevicesRequestValidationError is the validation error returned by
// ListEndDevicesRequest.Validate if the designated constraints aren't met.
type ListEndDevicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEndDevicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEndDevicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEndDevicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEndDevicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEndDevicesRequestValidationError) ErrorName() string {
	return "ListEndDevicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEndDevicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEndDevicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEndDevicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEndDevicesRequestValidationError{}

var _ListEndDevicesRequest_Order_InLookup = map[string]struct{}{
	"":             {},
	"device_id":    {},
	"-device_id":   {},
	"join_eui":     {},
	"-join_eui":    {},
	"dev_eui":      {},
	"-dev_eui":     {},
	"name":         {},
	"-name":        {},
	"description":  {},
	"-description": {},
	"created_at":   {},
	"-created_at":  {},
}

// Validate checks the field values on SetEndDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetEndDeviceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEndDevice() == nil {
		return SetEndDeviceRequestValidationError{
			field:  "EndDevice",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEndDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetEndDeviceRequestValidationError{
				field:  "EndDevice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetEndDeviceRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetEndDeviceRequestValidationError is the validation error returned by
// SetEndDeviceRequest.Validate if the designated constraints aren't met.
type SetEndDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetEndDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetEndDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetEndDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetEndDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetEndDeviceRequestValidationError) ErrorName() string {
	return "SetEndDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetEndDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetEndDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetEndDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetEndDeviceRequestValidationError{}

// Validate checks the field values on EndDeviceTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EndDeviceTemplate) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEndDevice() == nil {
		return EndDeviceTemplateValidationError{
			field:  "EndDevice",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEndDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceTemplateValidationError{
				field:  "EndDevice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndDeviceTemplateValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetMappingKey()) > 100 {
		return EndDeviceTemplateValidationError{
			field:  "MappingKey",
			reason: "value length must be at most 100 runes",
		}
	}

	return nil
}

// EndDeviceTemplateValidationError is the validation error returned by
// EndDeviceTemplate.Validate if the designated constraints aren't met.
type EndDeviceTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceTemplateValidationError) ErrorName() string {
	return "EndDeviceTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceTemplateValidationError{}

// Validate checks the field values on EndDeviceTemplateFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EndDeviceTemplateFormat) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) > 100 {
		return EndDeviceTemplateFormatValidationError{
			field:  "Name",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) > 200 {
		return EndDeviceTemplateFormatValidationError{
			field:  "Description",
			reason: "value length must be at most 200 runes",
		}
	}

	if len(m.GetFileExtensions()) > 100 {
		return EndDeviceTemplateFormatValidationError{
			field:  "FileExtensions",
			reason: "value must contain no more than 100 item(s)",
		}
	}

	_EndDeviceTemplateFormat_FileExtensions_Unique := make(map[string]struct{}, len(m.GetFileExtensions()))

	for idx, item := range m.GetFileExtensions() {
		_, _ = idx, item

		if _, exists := _EndDeviceTemplateFormat_FileExtensions_Unique[item]; exists {
			return EndDeviceTemplateFormatValidationError{
				field:  fmt.Sprintf("FileExtensions[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_EndDeviceTemplateFormat_FileExtensions_Unique[item] = struct{}{}
		}

		if !_EndDeviceTemplateFormat_FileExtensions_Pattern.MatchString(item) {
			return EndDeviceTemplateFormatValidationError{
				field:  fmt.Sprintf("FileExtensions[%v]", idx),
				reason: "value does not match regex pattern \"^(?:\\\\.[a-z0-9]{1,16}){1,2}$\"",
			}
		}

	}

	return nil
}

// EndDeviceTemplateFormatValidationError is the validation error returned by
// EndDeviceTemplateFormat.Validate if the designated constraints aren't met.
type EndDeviceTemplateFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceTemplateFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceTemplateFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceTemplateFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceTemplateFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceTemplateFormatValidationError) ErrorName() string {
	return "EndDeviceTemplateFormatValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceTemplateFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceTemplateFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceTemplateFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceTemplateFormatValidationError{}

var _EndDeviceTemplateFormat_FileExtensions_Pattern = regexp.MustCompile("^(?:\\.[a-z0-9]{1,16}){1,2}$")

// Validate checks the field values on EndDeviceTemplateFormats with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EndDeviceTemplateFormats) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetFormats() {
		_ = val

		if utf8.RuneCountInString(key) > 36 {
			return EndDeviceTemplateFormatsValidationError{
				field:  fmt.Sprintf("Formats[%v]", key),
				reason: "value length must be at most 36 runes",
			}
		}

		if !_EndDeviceTemplateFormats_Formats_Pattern.MatchString(key) {
			return EndDeviceTemplateFormatsValidationError{
				field:  fmt.Sprintf("Formats[%v]", key),
				reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EndDeviceTemplateFormatsValidationError{
					field:  fmt.Sprintf("Formats[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EndDeviceTemplateFormatsValidationError is the validation error returned by
// EndDeviceTemplateFormats.Validate if the designated constraints aren't met.
type EndDeviceTemplateFormatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceTemplateFormatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceTemplateFormatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceTemplateFormatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceTemplateFormatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceTemplateFormatsValidationError) ErrorName() string {
	return "EndDeviceTemplateFormatsValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceTemplateFormatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceTemplateFormats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceTemplateFormatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceTemplateFormatsValidationError{}

var _EndDeviceTemplateFormats_Formats_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on ConvertEndDeviceTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConvertEndDeviceTemplateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetFormatId()) > 36 {
		return ConvertEndDeviceTemplateRequestValidationError{
			field:  "FormatId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_ConvertEndDeviceTemplateRequest_FormatId_Pattern.MatchString(m.GetFormatId()) {
		return ConvertEndDeviceTemplateRequestValidationError{
			field:  "FormatId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	// no validation rules for Data

	return nil
}

// ConvertEndDeviceTemplateRequestValidationError is the validation error
// returned by ConvertEndDeviceTemplateRequest.Validate if the designated
// constraints aren't met.
type ConvertEndDeviceTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConvertEndDeviceTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConvertEndDeviceTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConvertEndDeviceTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConvertEndDeviceTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConvertEndDeviceTemplateRequestValidationError) ErrorName() string {
	return "ConvertEndDeviceTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConvertEndDeviceTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConvertEndDeviceTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConvertEndDeviceTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConvertEndDeviceTemplateRequestValidationError{}

var _ConvertEndDeviceTemplateRequest_FormatId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on MACParameters_Channel with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACParameters_Channel) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUplinkFrequency() < 100000 {
		return MACParameters_ChannelValidationError{
			field:  "UplinkFrequency",
			reason: "value must be greater than or equal to 100000",
		}
	}

	if m.GetDownlinkFrequency() < 100000 {
		return MACParameters_ChannelValidationError{
			field:  "DownlinkFrequency",
			reason: "value must be greater than or equal to 100000",
		}
	}

	if _, ok := DataRateIndex_name[int32(m.GetMinDataRateIndex())]; !ok {
		return MACParameters_ChannelValidationError{
			field:  "MinDataRateIndex",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := DataRateIndex_name[int32(m.GetMaxDataRateIndex())]; !ok {
		return MACParameters_ChannelValidationError{
			field:  "MaxDataRateIndex",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for EnableUplink

	return nil
}

// MACParameters_ChannelValidationError is the validation error returned by
// MACParameters_Channel.Validate if the designated constraints aren't met.
type MACParameters_ChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACParameters_ChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACParameters_ChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACParameters_ChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACParameters_ChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACParameters_ChannelValidationError) ErrorName() string {
	return "MACParameters_ChannelValidationError"
}

// Error satisfies the builtin error interface
func (e MACParameters_ChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACParameters_Channel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACParameters_ChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACParameters_ChannelValidationError{}

// Validate checks the field values on MACState_JoinAccept with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACState_JoinAccept) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetPayload()); l < 17 || l > 33 {
		return MACState_JoinAcceptValidationError{
			field:  "Payload",
			reason: "value length must be between 17 and 33 bytes, inclusive",
		}
	}

	if m.GetRequest() == nil {
		return MACState_JoinAcceptValidationError{
			field:  "Request",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACState_JoinAcceptValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetKeys() == nil {
		return MACState_JoinAcceptValidationError{
			field:  "Keys",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetKeys()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MACState_JoinAcceptValidationError{
				field:  "Keys",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCorrelationIds() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) > 100 {
			return MACState_JoinAcceptValidationError{
				field:  fmt.Sprintf("CorrelationIds[%v]", idx),
				reason: "value length must be at most 100 runes",
			}
		}

	}

	return nil
}

// MACState_JoinAcceptValidationError is the validation error returned by
// MACState_JoinAccept.Validate if the designated constraints aren't met.
type MACState_JoinAcceptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACState_JoinAcceptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACState_JoinAcceptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACState_JoinAcceptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACState_JoinAcceptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACState_JoinAcceptValidationError) ErrorName() string {
	return "MACState_JoinAcceptValidationError"
}

// Error satisfies the builtin error interface
func (e MACState_JoinAcceptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACState_JoinAccept.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACState_JoinAcceptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACState_JoinAcceptValidationError{}

// Validate checks the field values on MACState_DataRateRange with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACState_DataRateRange) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := DataRateIndex_name[int32(m.GetMinDataRateIndex())]; !ok {
		return MACState_DataRateRangeValidationError{
			field:  "MinDataRateIndex",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := DataRateIndex_name[int32(m.GetMaxDataRateIndex())]; !ok {
		return MACState_DataRateRangeValidationError{
			field:  "MaxDataRateIndex",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MACState_DataRateRangeValidationError is the validation error returned by
// MACState_DataRateRange.Validate if the designated constraints aren't met.
type MACState_DataRateRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACState_DataRateRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACState_DataRateRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACState_DataRateRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACState_DataRateRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACState_DataRateRangeValidationError) ErrorName() string {
	return "MACState_DataRateRangeValidationError"
}

// Error satisfies the builtin error interface
func (e MACState_DataRateRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACState_DataRateRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACState_DataRateRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACState_DataRateRangeValidationError{}

// Validate checks the field values on MACState_DataRateRanges with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MACState_DataRateRanges) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetRanges()) < 1 {
		return MACState_DataRateRangesValidationError{
			field:  "Ranges",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetRanges() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MACState_DataRateRangesValidationError{
					field:  fmt.Sprintf("Ranges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MACState_DataRateRangesValidationError is the validation error returned by
// MACState_DataRateRanges.Validate if the designated constraints aren't met.
type MACState_DataRateRangesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MACState_DataRateRangesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MACState_DataRateRangesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MACState_DataRateRangesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MACState_DataRateRangesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MACState_DataRateRangesValidationError) ErrorName() string {
	return "MACState_DataRateRangesValidationError"
}

// Error satisfies the builtin error interface
func (e MACState_DataRateRangesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMACState_DataRateRanges.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MACState_DataRateRangesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MACState_DataRateRangesValidationError{}
