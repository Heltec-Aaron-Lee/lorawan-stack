// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/applicationserver_pubsub.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _applicationserver_pubsub_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ApplicationPubSubIdentifiers with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationPubSubIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplicationIds() == nil {
		return ApplicationPubSubIdentifiersValidationError{
			field:  "ApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSubIdentifiersValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetPubSubId()) > 36 {
		return ApplicationPubSubIdentifiersValidationError{
			field:  "PubSubId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_ApplicationPubSubIdentifiers_PubSubId_Pattern.MatchString(m.GetPubSubId()) {
		return ApplicationPubSubIdentifiersValidationError{
			field:  "PubSubId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	return nil
}

// ApplicationPubSubIdentifiersValidationError is the validation error returned
// by ApplicationPubSubIdentifiers.Validate if the designated constraints
// aren't met.
type ApplicationPubSubIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationPubSubIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationPubSubIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationPubSubIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationPubSubIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationPubSubIdentifiersValidationError) ErrorName() string {
	return "ApplicationPubSubIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationPubSubIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationPubSubIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationPubSubIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationPubSubIdentifiersValidationError{}

var _ApplicationPubSubIdentifiers_PubSubId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on ApplicationPubSub with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ApplicationPubSub) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return ApplicationPubSubValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSubValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSubValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSubValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetFormat()) > 20 {
		return ApplicationPubSubValidationError{
			field:  "Format",
			reason: "value length must be at most 20 runes",
		}
	}

	if !_ApplicationPubSub_Format_Pattern.MatchString(m.GetFormat()) {
		return ApplicationPubSubValidationError{
			field:  "Format",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	if utf8.RuneCountInString(m.GetBaseTopic()) > 100 {
		return ApplicationPubSubValidationError{
			field:  "BaseTopic",
			reason: "value length must be at most 100 runes",
		}
	}

	if v, ok := interface{}(m.GetDownlinkPush()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSubValidationError{
				field:  "DownlinkPush",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkReplace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSubValidationError{
				field:  "DownlinkReplace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUplinkMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSubValidationError{
				field:  "UplinkMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetJoinAccept()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSubValidationError{
				field:  "JoinAccept",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkAck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSubValidationError{
				field:  "DownlinkAck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkNack()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSubValidationError{
				field:  "DownlinkNack",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkSent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSubValidationError{
				field:  "DownlinkSent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkFailed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSubValidationError{
				field:  "DownlinkFailed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkQueued()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSubValidationError{
				field:  "DownlinkQueued",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkQueueInvalidated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSubValidationError{
				field:  "DownlinkQueueInvalidated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLocationSolved()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSubValidationError{
				field:  "LocationSolved",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetServiceData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSubValidationError{
				field:  "ServiceData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Provider.(type) {

	case *ApplicationPubSub_Nats:

		if v, ok := interface{}(m.GetNats()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationPubSubValidationError{
					field:  "Nats",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ApplicationPubSub_Mqtt:

		if v, ok := interface{}(m.GetMqtt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationPubSubValidationError{
					field:  "Mqtt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ApplicationPubSub_AwsIot:

		if v, ok := interface{}(m.GetAwsIot()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationPubSubValidationError{
					field:  "AwsIot",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ApplicationPubSubValidationError{
			field:  "Provider",
			reason: "value is required",
		}

	}

	return nil
}

// ApplicationPubSubValidationError is the validation error returned by
// ApplicationPubSub.Validate if the designated constraints aren't met.
type ApplicationPubSubValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationPubSubValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationPubSubValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationPubSubValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationPubSubValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationPubSubValidationError) ErrorName() string {
	return "ApplicationPubSubValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationPubSubValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationPubSub.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationPubSubValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationPubSubValidationError{}

var _ApplicationPubSub_Format_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on ApplicationPubSubs with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationPubSubs) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPubsubs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationPubSubsValidationError{
					field:  fmt.Sprintf("Pubsubs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ApplicationPubSubsValidationError is the validation error returned by
// ApplicationPubSubs.Validate if the designated constraints aren't met.
type ApplicationPubSubsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationPubSubsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationPubSubsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationPubSubsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationPubSubsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationPubSubsValidationError) ErrorName() string {
	return "ApplicationPubSubsValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationPubSubsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationPubSubs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationPubSubsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationPubSubsValidationError{}

// Validate checks the field values on ApplicationPubSubFormats with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationPubSubFormats) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Formats

	return nil
}

// ApplicationPubSubFormatsValidationError is the validation error returned by
// ApplicationPubSubFormats.Validate if the designated constraints aren't met.
type ApplicationPubSubFormatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationPubSubFormatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationPubSubFormatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationPubSubFormatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationPubSubFormatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationPubSubFormatsValidationError) ErrorName() string {
	return "ApplicationPubSubFormatsValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationPubSubFormatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationPubSubFormats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationPubSubFormatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationPubSubFormatsValidationError{}

// Validate checks the field values on GetApplicationPubSubRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetApplicationPubSubRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return GetApplicationPubSubRequestValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationPubSubRequestValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationPubSubRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetApplicationPubSubRequestValidationError is the validation error returned
// by GetApplicationPubSubRequest.Validate if the designated constraints
// aren't met.
type GetApplicationPubSubRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationPubSubRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationPubSubRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationPubSubRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationPubSubRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationPubSubRequestValidationError) ErrorName() string {
	return "GetApplicationPubSubRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationPubSubRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationPubSubRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationPubSubRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationPubSubRequestValidationError{}

// Validate checks the field values on ListApplicationPubSubsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationPubSubsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplicationIds() == nil {
		return ListApplicationPubSubsRequestValidationError{
			field:  "ApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationPubSubsRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationPubSubsRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListApplicationPubSubsRequestValidationError is the validation error
// returned by ListApplicationPubSubsRequest.Validate if the designated
// constraints aren't met.
type ListApplicationPubSubsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationPubSubsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationPubSubsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationPubSubsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationPubSubsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationPubSubsRequestValidationError) ErrorName() string {
	return "ListApplicationPubSubsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationPubSubsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationPubSubsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationPubSubsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationPubSubsRequestValidationError{}

// Validate checks the field values on SetApplicationPubSubRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetApplicationPubSubRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPubsub() == nil {
		return SetApplicationPubSubRequestValidationError{
			field:  "Pubsub",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPubsub()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetApplicationPubSubRequestValidationError{
				field:  "Pubsub",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetApplicationPubSubRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetApplicationPubSubRequestValidationError is the validation error returned
// by SetApplicationPubSubRequest.Validate if the designated constraints
// aren't met.
type SetApplicationPubSubRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetApplicationPubSubRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetApplicationPubSubRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetApplicationPubSubRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetApplicationPubSubRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetApplicationPubSubRequestValidationError) ErrorName() string {
	return "SetApplicationPubSubRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetApplicationPubSubRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetApplicationPubSubRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetApplicationPubSubRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetApplicationPubSubRequestValidationError{}

// Validate checks the field values on ApplicationPubSub_NATSProvider with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationPubSub_NATSProvider) Validate() error {
	if m == nil {
		return nil
	}

	if uri, err := url.Parse(m.GetServerUrl()); err != nil {
		return ApplicationPubSub_NATSProviderValidationError{
			field:  "ServerUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
	} else if !uri.IsAbs() {
		return ApplicationPubSub_NATSProviderValidationError{
			field:  "ServerUrl",
			reason: "value must be absolute",
		}
	}

	return nil
}

// ApplicationPubSub_NATSProviderValidationError is the validation error
// returned by ApplicationPubSub_NATSProvider.Validate if the designated
// constraints aren't met.
type ApplicationPubSub_NATSProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationPubSub_NATSProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationPubSub_NATSProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationPubSub_NATSProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationPubSub_NATSProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationPubSub_NATSProviderValidationError) ErrorName() string {
	return "ApplicationPubSub_NATSProviderValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationPubSub_NATSProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationPubSub_NATSProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationPubSub_NATSProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationPubSub_NATSProviderValidationError{}

// Validate checks the field values on ApplicationPubSub_MQTTProvider with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationPubSub_MQTTProvider) Validate() error {
	if m == nil {
		return nil
	}

	if uri, err := url.Parse(m.GetServerUrl()); err != nil {
		return ApplicationPubSub_MQTTProviderValidationError{
			field:  "ServerUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
	} else if !uri.IsAbs() {
		return ApplicationPubSub_MQTTProviderValidationError{
			field:  "ServerUrl",
			reason: "value must be absolute",
		}
	}

	if utf8.RuneCountInString(m.GetClientId()) > 23 {
		return ApplicationPubSub_MQTTProviderValidationError{
			field:  "ClientId",
			reason: "value length must be at most 23 runes",
		}
	}

	if utf8.RuneCountInString(m.GetUsername()) > 100 {
		return ApplicationPubSub_MQTTProviderValidationError{
			field:  "Username",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPassword()) > 100 {
		return ApplicationPubSub_MQTTProviderValidationError{
			field:  "Password",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for SubscribeQos

	// no validation rules for PublishQos

	// no validation rules for UseTls

	// no validation rules for TlsCa

	// no validation rules for TlsClientCert

	// no validation rules for TlsClientKey

	// no validation rules for Headers

	return nil
}

// ApplicationPubSub_MQTTProviderValidationError is the validation error
// returned by ApplicationPubSub_MQTTProvider.Validate if the designated
// constraints aren't met.
type ApplicationPubSub_MQTTProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationPubSub_MQTTProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationPubSub_MQTTProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationPubSub_MQTTProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationPubSub_MQTTProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationPubSub_MQTTProviderValidationError) ErrorName() string {
	return "ApplicationPubSub_MQTTProviderValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationPubSub_MQTTProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationPubSub_MQTTProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationPubSub_MQTTProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationPubSub_MQTTProviderValidationError{}

// Validate checks the field values on ApplicationPubSub_AWSIoTProvider with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ApplicationPubSub_AWSIoTProvider) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _ApplicationPubSub_AWSIoTProvider_Region_InLookup[m.GetRegion()]; !ok {
		return ApplicationPubSub_AWSIoTProviderValidationError{
			field:  "Region",
			reason: "value must be in list [af-south-1 ap-east-1 ap-northeast-1 ap-northeast-2 ap-south-1 ap-southeast-1 ap-southeast-2 ca-central-1 eu-central-1 eu-north-1 eu-south-1 eu-west-1 eu-west-2 eu-west-3 me-south-1 sa-east-1 us-east-1 us-east-2 us-west-1 us-west-2]",
		}
	}

	if v, ok := interface{}(m.GetAccessKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSub_AWSIoTProviderValidationError{
				field:  "AccessKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAssumeRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSub_AWSIoTProviderValidationError{
				field:  "AssumeRole",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetEndpointAddress()) > 128 {
		return ApplicationPubSub_AWSIoTProviderValidationError{
			field:  "EndpointAddress",
			reason: "value length must be at most 128 runes",
		}
	}

	if !_ApplicationPubSub_AWSIoTProvider_EndpointAddress_Pattern.MatchString(m.GetEndpointAddress()) {
		return ApplicationPubSub_AWSIoTProviderValidationError{
			field:  "EndpointAddress",
			reason: "value does not match regex pattern \"^((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]*[a-zA-Z0-9])\\\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\\-]*[A-Za-z0-9])|)$\"",
		}
	}

	switch m.Deployment.(type) {

	case *ApplicationPubSub_AWSIoTProvider_Default:

		if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationPubSub_AWSIoTProviderValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ApplicationPubSub_AWSIoTProviderValidationError is the validation error
// returned by ApplicationPubSub_AWSIoTProvider.Validate if the designated
// constraints aren't met.
type ApplicationPubSub_AWSIoTProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationPubSub_AWSIoTProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationPubSub_AWSIoTProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationPubSub_AWSIoTProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationPubSub_AWSIoTProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationPubSub_AWSIoTProviderValidationError) ErrorName() string {
	return "ApplicationPubSub_AWSIoTProviderValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationPubSub_AWSIoTProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationPubSub_AWSIoTProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationPubSub_AWSIoTProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationPubSub_AWSIoTProviderValidationError{}

var _ApplicationPubSub_AWSIoTProvider_Region_InLookup = map[string]struct{}{
	"af-south-1":     {},
	"ap-east-1":      {},
	"ap-northeast-1": {},
	"ap-northeast-2": {},
	"ap-south-1":     {},
	"ap-southeast-1": {},
	"ap-southeast-2": {},
	"ca-central-1":   {},
	"eu-central-1":   {},
	"eu-north-1":     {},
	"eu-south-1":     {},
	"eu-west-1":      {},
	"eu-west-2":      {},
	"eu-west-3":      {},
	"me-south-1":     {},
	"sa-east-1":      {},
	"us-east-1":      {},
	"us-east-2":      {},
	"us-west-1":      {},
	"us-west-2":      {},
}

var _ApplicationPubSub_AWSIoTProvider_EndpointAddress_Pattern = regexp.MustCompile("^((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])|)$")

// Validate checks the field values on ApplicationPubSub_Message with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationPubSub_Message) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetTopic()) > 100 {
		return ApplicationPubSub_MessageValidationError{
			field:  "Topic",
			reason: "value length must be at most 100 runes",
		}
	}

	return nil
}

// ApplicationPubSub_MessageValidationError is the validation error returned by
// ApplicationPubSub_Message.Validate if the designated constraints aren't met.
type ApplicationPubSub_MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationPubSub_MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationPubSub_MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationPubSub_MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationPubSub_MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationPubSub_MessageValidationError) ErrorName() string {
	return "ApplicationPubSub_MessageValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationPubSub_MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationPubSub_Message.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationPubSub_MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationPubSub_MessageValidationError{}

// Validate checks the field values on
// ApplicationPubSub_AWSIoTProvider_AccessKey with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ApplicationPubSub_AWSIoTProvider_AccessKey) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetAccessKeyId()); l < 16 || l > 128 {
		return ApplicationPubSub_AWSIoTProvider_AccessKeyValidationError{
			field:  "AccessKeyId",
			reason: "value length must be between 16 and 128 runes, inclusive",
		}
	}

	if !_ApplicationPubSub_AWSIoTProvider_AccessKey_AccessKeyId_Pattern.MatchString(m.GetAccessKeyId()) {
		return ApplicationPubSub_AWSIoTProvider_AccessKeyValidationError{
			field:  "AccessKeyId",
			reason: "value does not match regex pattern \"^[\\\\w]*$\"",
		}
	}

	if utf8.RuneCountInString(m.GetSecretAccessKey()) > 40 {
		return ApplicationPubSub_AWSIoTProvider_AccessKeyValidationError{
			field:  "SecretAccessKey",
			reason: "value length must be at most 40 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSessionToken()) > 256 {
		return ApplicationPubSub_AWSIoTProvider_AccessKeyValidationError{
			field:  "SessionToken",
			reason: "value length must be at most 256 runes",
		}
	}

	return nil
}

// ApplicationPubSub_AWSIoTProvider_AccessKeyValidationError is the validation
// error returned by ApplicationPubSub_AWSIoTProvider_AccessKey.Validate if
// the designated constraints aren't met.
type ApplicationPubSub_AWSIoTProvider_AccessKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationPubSub_AWSIoTProvider_AccessKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationPubSub_AWSIoTProvider_AccessKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationPubSub_AWSIoTProvider_AccessKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationPubSub_AWSIoTProvider_AccessKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationPubSub_AWSIoTProvider_AccessKeyValidationError) ErrorName() string {
	return "ApplicationPubSub_AWSIoTProvider_AccessKeyValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationPubSub_AWSIoTProvider_AccessKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationPubSub_AWSIoTProvider_AccessKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationPubSub_AWSIoTProvider_AccessKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationPubSub_AWSIoTProvider_AccessKeyValidationError{}

var _ApplicationPubSub_AWSIoTProvider_AccessKey_AccessKeyId_Pattern = regexp.MustCompile("^[\\w]*$")

// Validate checks the field values on
// ApplicationPubSub_AWSIoTProvider_AssumeRole with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ApplicationPubSub_AWSIoTProvider_AssumeRole) Validate() error {
	if m == nil {
		return nil
	}

	if !_ApplicationPubSub_AWSIoTProvider_AssumeRole_Arn_Pattern.MatchString(m.GetArn()) {
		return ApplicationPubSub_AWSIoTProvider_AssumeRoleValidationError{
			field:  "Arn",
			reason: "value does not match regex pattern \"^arn:aws:iam::[0-9]{12}:role\\\\/[A-Za-z0-9_+=,.@-]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetExternalId()) > 1224 {
		return ApplicationPubSub_AWSIoTProvider_AssumeRoleValidationError{
			field:  "ExternalId",
			reason: "value length must be at most 1224 runes",
		}
	}

	if !_ApplicationPubSub_AWSIoTProvider_AssumeRole_ExternalId_Pattern.MatchString(m.GetExternalId()) {
		return ApplicationPubSub_AWSIoTProvider_AssumeRoleValidationError{
			field:  "ExternalId",
			reason: "value does not match regex pattern \"^[\\\\w+=,.@:\\\\/-]*$\"",
		}
	}

	if v, ok := interface{}(m.GetSessionDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPubSub_AWSIoTProvider_AssumeRoleValidationError{
				field:  "SessionDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ApplicationPubSub_AWSIoTProvider_AssumeRoleValidationError is the validation
// error returned by ApplicationPubSub_AWSIoTProvider_AssumeRole.Validate if
// the designated constraints aren't met.
type ApplicationPubSub_AWSIoTProvider_AssumeRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationPubSub_AWSIoTProvider_AssumeRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationPubSub_AWSIoTProvider_AssumeRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationPubSub_AWSIoTProvider_AssumeRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationPubSub_AWSIoTProvider_AssumeRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationPubSub_AWSIoTProvider_AssumeRoleValidationError) ErrorName() string {
	return "ApplicationPubSub_AWSIoTProvider_AssumeRoleValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationPubSub_AWSIoTProvider_AssumeRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationPubSub_AWSIoTProvider_AssumeRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationPubSub_AWSIoTProvider_AssumeRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationPubSub_AWSIoTProvider_AssumeRoleValidationError{}

var _ApplicationPubSub_AWSIoTProvider_AssumeRole_Arn_Pattern = regexp.MustCompile("^arn:aws:iam::[0-9]{12}:role\\/[A-Za-z0-9_+=,.@-]+$")

var _ApplicationPubSub_AWSIoTProvider_AssumeRole_ExternalId_Pattern = regexp.MustCompile("^[\\w+=,.@:\\/-]*$")

// Validate checks the field values on
// ApplicationPubSub_AWSIoTProvider_DefaultIntegration with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ApplicationPubSub_AWSIoTProvider_DefaultIntegration) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetStackName()) > 128 {
		return ApplicationPubSub_AWSIoTProvider_DefaultIntegrationValidationError{
			field:  "StackName",
			reason: "value length must be at most 128 runes",
		}
	}

	if !_ApplicationPubSub_AWSIoTProvider_DefaultIntegration_StackName_Pattern.MatchString(m.GetStackName()) {
		return ApplicationPubSub_AWSIoTProvider_DefaultIntegrationValidationError{
			field:  "StackName",
			reason: "value does not match regex pattern \"^[A-Za-z][A-Za-z0-9\\\\-]*$\"",
		}
	}

	return nil
}

// ApplicationPubSub_AWSIoTProvider_DefaultIntegrationValidationError is the
// validation error returned by
// ApplicationPubSub_AWSIoTProvider_DefaultIntegration.Validate if the
// designated constraints aren't met.
type ApplicationPubSub_AWSIoTProvider_DefaultIntegrationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationPubSub_AWSIoTProvider_DefaultIntegrationValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ApplicationPubSub_AWSIoTProvider_DefaultIntegrationValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ApplicationPubSub_AWSIoTProvider_DefaultIntegrationValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ApplicationPubSub_AWSIoTProvider_DefaultIntegrationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationPubSub_AWSIoTProvider_DefaultIntegrationValidationError) ErrorName() string {
	return "ApplicationPubSub_AWSIoTProvider_DefaultIntegrationValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationPubSub_AWSIoTProvider_DefaultIntegrationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationPubSub_AWSIoTProvider_DefaultIntegration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationPubSub_AWSIoTProvider_DefaultIntegrationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationPubSub_AWSIoTProvider_DefaultIntegrationValidationError{}

var _ApplicationPubSub_AWSIoTProvider_DefaultIntegration_StackName_Pattern = regexp.MustCompile("^[A-Za-z][A-Za-z0-9\\-]*$")
