// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/search_services.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _search_services_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SearchEntitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SearchEntitiesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IdContains

	// no validation rules for NameContains

	// no validation rules for DescriptionContains

	for key, val := range m.GetAttributesContain() {
		_ = val

		if utf8.RuneCountInString(key) > 36 {
			return SearchEntitiesRequestValidationError{
				field:  fmt.Sprintf("AttributesContain[%v]", key),
				reason: "value length must be at most 36 runes",
			}
		}

		if !_SearchEntitiesRequest_AttributesContain_Pattern.MatchString(key) {
			return SearchEntitiesRequestValidationError{
				field:  fmt.Sprintf("AttributesContain[%v]", key),
				reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
			}
		}

		// no validation rules for AttributesContain[key]
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchEntitiesRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Order

	if m.GetLimit() > 1000 {
		return SearchEntitiesRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	// no validation rules for Page

	return nil
}

// SearchEntitiesRequestValidationError is the validation error returned by
// SearchEntitiesRequest.Validate if the designated constraints aren't met.
type SearchEntitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchEntitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchEntitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchEntitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchEntitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchEntitiesRequestValidationError) ErrorName() string {
	return "SearchEntitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchEntitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchEntitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchEntitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchEntitiesRequestValidationError{}

var _SearchEntitiesRequest_AttributesContain_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on SearchEndDevicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SearchEndDevicesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplicationIds() == nil {
		return SearchEndDevicesRequestValidationError{
			field:  "ApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchEndDevicesRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IdContains

	// no validation rules for NameContains

	// no validation rules for DescriptionContains

	for key, val := range m.GetAttributesContain() {
		_ = val

		if utf8.RuneCountInString(key) > 36 {
			return SearchEndDevicesRequestValidationError{
				field:  fmt.Sprintf("AttributesContain[%v]", key),
				reason: "value length must be at most 36 runes",
			}
		}

		if !_SearchEndDevicesRequest_AttributesContain_Pattern.MatchString(key) {
			return SearchEndDevicesRequestValidationError{
				field:  fmt.Sprintf("AttributesContain[%v]", key),
				reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
			}
		}

		// no validation rules for AttributesContain[key]
	}

	// no validation rules for DevEuiContains

	// no validation rules for JoinEuiContains

	// no validation rules for DevAddrContains

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchEndDevicesRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Order

	if m.GetLimit() > 1000 {
		return SearchEndDevicesRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	// no validation rules for Page

	return nil
}

// SearchEndDevicesRequestValidationError is the validation error returned by
// SearchEndDevicesRequest.Validate if the designated constraints aren't met.
type SearchEndDevicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchEndDevicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchEndDevicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchEndDevicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchEndDevicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchEndDevicesRequestValidationError) ErrorName() string {
	return "SearchEndDevicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchEndDevicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchEndDevicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchEndDevicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchEndDevicesRequestValidationError{}

var _SearchEndDevicesRequest_AttributesContain_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")
