// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GsPbaClient is the client API for GsPba service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GsPbaClient interface {
	PublishUplink(ctx context.Context, in *GatewayUplinkMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gsPbaClient struct {
	cc grpc.ClientConnInterface
}

func NewGsPbaClient(cc grpc.ClientConnInterface) GsPbaClient {
	return &gsPbaClient{cc}
}

func (c *gsPbaClient) PublishUplink(ctx context.Context, in *GatewayUplinkMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GsPba/PublishUplink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GsPbaServer is the server API for GsPba service.
// All implementations must embed UnimplementedGsPbaServer
// for forward compatibility
type GsPbaServer interface {
	PublishUplink(context.Context, *GatewayUplinkMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedGsPbaServer()
}

// UnimplementedGsPbaServer must be embedded to have forward compatible implementations.
type UnimplementedGsPbaServer struct {
}

func (UnimplementedGsPbaServer) PublishUplink(context.Context, *GatewayUplinkMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishUplink not implemented")
}
func (UnimplementedGsPbaServer) mustEmbedUnimplementedGsPbaServer() {}

// UnsafeGsPbaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GsPbaServer will
// result in compilation errors.
type UnsafeGsPbaServer interface {
	mustEmbedUnimplementedGsPbaServer()
}

func RegisterGsPbaServer(s *grpc.Server, srv GsPbaServer) {
	s.RegisterService(&_GsPba_serviceDesc, srv)
}

func _GsPba_PublishUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayUplinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GsPbaServer).PublishUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GsPba/PublishUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GsPbaServer).PublishUplink(ctx, req.(*GatewayUplinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _GsPba_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.GsPba",
	HandlerType: (*GsPbaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishUplink",
			Handler:    _GsPba_PublishUplink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/packetbrokeragent.proto",
}

// NsPbaClient is the client API for NsPba service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NsPbaClient interface {
	// PublishDownlink instructs the Packet Broker Agent to publish a downlink
	// message to Packet Broker Router.
	PublishDownlink(ctx context.Context, in *DownlinkMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type nsPbaClient struct {
	cc grpc.ClientConnInterface
}

func NewNsPbaClient(cc grpc.ClientConnInterface) NsPbaClient {
	return &nsPbaClient{cc}
}

func (c *nsPbaClient) PublishDownlink(ctx context.Context, in *DownlinkMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsPba/PublishDownlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NsPbaServer is the server API for NsPba service.
// All implementations must embed UnimplementedNsPbaServer
// for forward compatibility
type NsPbaServer interface {
	// PublishDownlink instructs the Packet Broker Agent to publish a downlink
	// message to Packet Broker Router.
	PublishDownlink(context.Context, *DownlinkMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedNsPbaServer()
}

// UnimplementedNsPbaServer must be embedded to have forward compatible implementations.
type UnimplementedNsPbaServer struct {
}

func (UnimplementedNsPbaServer) PublishDownlink(context.Context, *DownlinkMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishDownlink not implemented")
}
func (UnimplementedNsPbaServer) mustEmbedUnimplementedNsPbaServer() {}

// UnsafeNsPbaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NsPbaServer will
// result in compilation errors.
type UnsafeNsPbaServer interface {
	mustEmbedUnimplementedNsPbaServer()
}

func RegisterNsPbaServer(s *grpc.Server, srv NsPbaServer) {
	s.RegisterService(&_NsPba_serviceDesc, srv)
}

func _NsPba_PublishDownlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsPbaServer).PublishDownlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsPba/PublishDownlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsPbaServer).PublishDownlink(ctx, req.(*DownlinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsPba_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.NsPba",
	HandlerType: (*NsPbaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishDownlink",
			Handler:    _NsPba_PublishDownlink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/packetbrokeragent.proto",
}
