// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/regional.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _regional_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ConcentratorConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConcentratorConfig) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetChannels() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConcentratorConfigValidationError{
					field:  fmt.Sprintf("Channels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetLoraStandardChannel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConcentratorConfigValidationError{
				field:  "LoraStandardChannel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFskChannel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConcentratorConfigValidationError{
				field:  "FskChannel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLbt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConcentratorConfigValidationError{
				field:  "Lbt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPingSlot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConcentratorConfigValidationError{
				field:  "PingSlot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRadios() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConcentratorConfigValidationError{
					field:  fmt.Sprintf("Radios[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ClockSource

	return nil
}

// ConcentratorConfigValidationError is the validation error returned by
// ConcentratorConfig.Validate if the designated constraints aren't met.
type ConcentratorConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConcentratorConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConcentratorConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConcentratorConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConcentratorConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConcentratorConfigValidationError) ErrorName() string {
	return "ConcentratorConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ConcentratorConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConcentratorConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConcentratorConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConcentratorConfigValidationError{}

// Validate checks the field values on ConcentratorConfig_Channel with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConcentratorConfig_Channel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Frequency

	// no validation rules for Radio

	return nil
}

// ConcentratorConfig_ChannelValidationError is the validation error returned
// by ConcentratorConfig_Channel.Validate if the designated constraints aren't met.
type ConcentratorConfig_ChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConcentratorConfig_ChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConcentratorConfig_ChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConcentratorConfig_ChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConcentratorConfig_ChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConcentratorConfig_ChannelValidationError) ErrorName() string {
	return "ConcentratorConfig_ChannelValidationError"
}

// Error satisfies the builtin error interface
func (e ConcentratorConfig_ChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConcentratorConfig_Channel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConcentratorConfig_ChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConcentratorConfig_ChannelValidationError{}

// Validate checks the field values on ConcentratorConfig_LoRaStandardChannel
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ConcentratorConfig_LoRaStandardChannel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Frequency

	// no validation rules for Radio

	// no validation rules for Bandwidth

	// no validation rules for SpreadingFactor

	return nil
}

// ConcentratorConfig_LoRaStandardChannelValidationError is the validation
// error returned by ConcentratorConfig_LoRaStandardChannel.Validate if the
// designated constraints aren't met.
type ConcentratorConfig_LoRaStandardChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConcentratorConfig_LoRaStandardChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConcentratorConfig_LoRaStandardChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConcentratorConfig_LoRaStandardChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConcentratorConfig_LoRaStandardChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConcentratorConfig_LoRaStandardChannelValidationError) ErrorName() string {
	return "ConcentratorConfig_LoRaStandardChannelValidationError"
}

// Error satisfies the builtin error interface
func (e ConcentratorConfig_LoRaStandardChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConcentratorConfig_LoRaStandardChannel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConcentratorConfig_LoRaStandardChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConcentratorConfig_LoRaStandardChannelValidationError{}

// Validate checks the field values on ConcentratorConfig_FSKChannel with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConcentratorConfig_FSKChannel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Frequency

	// no validation rules for Radio

	return nil
}

// ConcentratorConfig_FSKChannelValidationError is the validation error
// returned by ConcentratorConfig_FSKChannel.Validate if the designated
// constraints aren't met.
type ConcentratorConfig_FSKChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConcentratorConfig_FSKChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConcentratorConfig_FSKChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConcentratorConfig_FSKChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConcentratorConfig_FSKChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConcentratorConfig_FSKChannelValidationError) ErrorName() string {
	return "ConcentratorConfig_FSKChannelValidationError"
}

// Error satisfies the builtin error interface
func (e ConcentratorConfig_FSKChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConcentratorConfig_FSKChannel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConcentratorConfig_FSKChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConcentratorConfig_FSKChannelValidationError{}

// Validate checks the field values on ConcentratorConfig_LBTConfiguration with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ConcentratorConfig_LBTConfiguration) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RssiTarget

	// no validation rules for RssiOffset

	if v, ok := interface{}(m.GetScanTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConcentratorConfig_LBTConfigurationValidationError{
				field:  "ScanTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ConcentratorConfig_LBTConfigurationValidationError is the validation error
// returned by ConcentratorConfig_LBTConfiguration.Validate if the designated
// constraints aren't met.
type ConcentratorConfig_LBTConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConcentratorConfig_LBTConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConcentratorConfig_LBTConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConcentratorConfig_LBTConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConcentratorConfig_LBTConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConcentratorConfig_LBTConfigurationValidationError) ErrorName() string {
	return "ConcentratorConfig_LBTConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e ConcentratorConfig_LBTConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConcentratorConfig_LBTConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConcentratorConfig_LBTConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConcentratorConfig_LBTConfigurationValidationError{}
