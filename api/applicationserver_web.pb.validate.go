// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lorawan-stack/api/applicationserver_web.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _applicationserver_web_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ApplicationWebhookIdentifiers with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationWebhookIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplicationIds() == nil {
		return ApplicationWebhookIdentifiersValidationError{
			field:  "ApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookIdentifiersValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetWebhookId()) > 36 {
		return ApplicationWebhookIdentifiersValidationError{
			field:  "WebhookId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_ApplicationWebhookIdentifiers_WebhookId_Pattern.MatchString(m.GetWebhookId()) {
		return ApplicationWebhookIdentifiersValidationError{
			field:  "WebhookId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	return nil
}

// ApplicationWebhookIdentifiersValidationError is the validation error
// returned by ApplicationWebhookIdentifiers.Validate if the designated
// constraints aren't met.
type ApplicationWebhookIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationWebhookIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationWebhookIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationWebhookIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationWebhookIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationWebhookIdentifiersValidationError) ErrorName() string {
	return "ApplicationWebhookIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationWebhookIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationWebhookIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationWebhookIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationWebhookIdentifiersValidationError{}

var _ApplicationWebhookIdentifiers_WebhookId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on ApplicationWebhookTemplateIdentifiers
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ApplicationWebhookTemplateIdentifiers) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetTemplateId()) > 36 {
		return ApplicationWebhookTemplateIdentifiersValidationError{
			field:  "TemplateId",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_ApplicationWebhookTemplateIdentifiers_TemplateId_Pattern.MatchString(m.GetTemplateId()) {
		return ApplicationWebhookTemplateIdentifiersValidationError{
			field:  "TemplateId",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	return nil
}

// ApplicationWebhookTemplateIdentifiersValidationError is the validation error
// returned by ApplicationWebhookTemplateIdentifiers.Validate if the
// designated constraints aren't met.
type ApplicationWebhookTemplateIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationWebhookTemplateIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationWebhookTemplateIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationWebhookTemplateIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationWebhookTemplateIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationWebhookTemplateIdentifiersValidationError) ErrorName() string {
	return "ApplicationWebhookTemplateIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationWebhookTemplateIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationWebhookTemplateIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationWebhookTemplateIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationWebhookTemplateIdentifiersValidationError{}

var _ApplicationWebhookTemplateIdentifiers_TemplateId_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on ApplicationWebhookTemplateField with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationWebhookTemplateField) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) > 36 {
		return ApplicationWebhookTemplateFieldValidationError{
			field:  "Id",
			reason: "value length must be at most 36 runes",
		}
	}

	if !_ApplicationWebhookTemplateField_Id_Pattern.MatchString(m.GetId()) {
		return ApplicationWebhookTemplateFieldValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	if utf8.RuneCountInString(m.GetName()) > 20 {
		return ApplicationWebhookTemplateFieldValidationError{
			field:  "Name",
			reason: "value length must be at most 20 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) > 100 {
		return ApplicationWebhookTemplateFieldValidationError{
			field:  "Description",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for Secret

	if utf8.RuneCountInString(m.GetDefaultValue()) > 100 {
		return ApplicationWebhookTemplateFieldValidationError{
			field:  "DefaultValue",
			reason: "value length must be at most 100 runes",
		}
	}

	return nil
}

// ApplicationWebhookTemplateFieldValidationError is the validation error
// returned by ApplicationWebhookTemplateField.Validate if the designated
// constraints aren't met.
type ApplicationWebhookTemplateFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationWebhookTemplateFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationWebhookTemplateFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationWebhookTemplateFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationWebhookTemplateFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationWebhookTemplateFieldValidationError) ErrorName() string {
	return "ApplicationWebhookTemplateFieldValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationWebhookTemplateFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationWebhookTemplateField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationWebhookTemplateFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationWebhookTemplateFieldValidationError{}

var _ApplicationWebhookTemplateField_Id_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on ApplicationWebhookTemplate with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationWebhookTemplate) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return ApplicationWebhookTemplateValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookTemplateValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetName()) > 20 {
		return ApplicationWebhookTemplateValidationError{
			field:  "Name",
			reason: "value length must be at most 20 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) > 100 {
		return ApplicationWebhookTemplateValidationError{
			field:  "Description",
			reason: "value length must be at most 100 runes",
		}
	}

	if uri, err := url.Parse(m.GetLogoUrl()); err != nil {
		return ApplicationWebhookTemplateValidationError{
			field:  "LogoUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
	} else if !uri.IsAbs() {
		return ApplicationWebhookTemplateValidationError{
			field:  "LogoUrl",
			reason: "value must be absolute",
		}
	}

	if uri, err := url.Parse(m.GetInfoUrl()); err != nil {
		return ApplicationWebhookTemplateValidationError{
			field:  "InfoUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
	} else if !uri.IsAbs() {
		return ApplicationWebhookTemplateValidationError{
			field:  "InfoUrl",
			reason: "value must be absolute",
		}
	}

	if uri, err := url.Parse(m.GetDocumentationUrl()); err != nil {
		return ApplicationWebhookTemplateValidationError{
			field:  "DocumentationUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
	} else if !uri.IsAbs() {
		return ApplicationWebhookTemplateValidationError{
			field:  "DocumentationUrl",
			reason: "value must be absolute",
		}
	}

	if uri, err := url.Parse(m.GetBaseUrl()); err != nil {
		return ApplicationWebhookTemplateValidationError{
			field:  "BaseUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
	} else if !uri.IsAbs() {
		return ApplicationWebhookTemplateValidationError{
			field:  "BaseUrl",
			reason: "value must be absolute",
		}
	}

	// no validation rules for Headers

	if utf8.RuneCountInString(m.GetFormat()) > 20 {
		return ApplicationWebhookTemplateValidationError{
			field:  "Format",
			reason: "value length must be at most 20 runes",
		}
	}

	if !_ApplicationWebhookTemplate_Format_Pattern.MatchString(m.GetFormat()) {
		return ApplicationWebhookTemplateValidationError{
			field:  "Format",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationWebhookTemplateValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreateDownlinkApiKey

	if v, ok := interface{}(m.GetUplinkMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookTemplateValidationError{
				field:  "UplinkMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetJoinAccept()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookTemplateValidationError{
				field:  "JoinAccept",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkAck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookTemplateValidationError{
				field:  "DownlinkAck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkNack()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookTemplateValidationError{
				field:  "DownlinkNack",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkSent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookTemplateValidationError{
				field:  "DownlinkSent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkFailed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookTemplateValidationError{
				field:  "DownlinkFailed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkQueued()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookTemplateValidationError{
				field:  "DownlinkQueued",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkQueueInvalidated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookTemplateValidationError{
				field:  "DownlinkQueueInvalidated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLocationSolved()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookTemplateValidationError{
				field:  "LocationSolved",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetServiceData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookTemplateValidationError{
				field:  "ServiceData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ApplicationWebhookTemplateValidationError is the validation error returned
// by ApplicationWebhookTemplate.Validate if the designated constraints aren't met.
type ApplicationWebhookTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationWebhookTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationWebhookTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationWebhookTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationWebhookTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationWebhookTemplateValidationError) ErrorName() string {
	return "ApplicationWebhookTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationWebhookTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationWebhookTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationWebhookTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationWebhookTemplateValidationError{}

var _ApplicationWebhookTemplate_Format_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on ApplicationWebhookTemplates with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationWebhookTemplates) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationWebhookTemplatesValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ApplicationWebhookTemplatesValidationError is the validation error returned
// by ApplicationWebhookTemplates.Validate if the designated constraints
// aren't met.
type ApplicationWebhookTemplatesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationWebhookTemplatesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationWebhookTemplatesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationWebhookTemplatesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationWebhookTemplatesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationWebhookTemplatesValidationError) ErrorName() string {
	return "ApplicationWebhookTemplatesValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationWebhookTemplatesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationWebhookTemplates.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationWebhookTemplatesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationWebhookTemplatesValidationError{}

// Validate checks the field values on ApplicationWebhook with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationWebhook) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return ApplicationWebhookValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if uri, err := url.Parse(m.GetBaseUrl()); err != nil {
		return ApplicationWebhookValidationError{
			field:  "BaseUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
	} else if !uri.IsAbs() {
		return ApplicationWebhookValidationError{
			field:  "BaseUrl",
			reason: "value must be absolute",
		}
	}

	// no validation rules for Headers

	if utf8.RuneCountInString(m.GetFormat()) > 20 {
		return ApplicationWebhookValidationError{
			field:  "Format",
			reason: "value length must be at most 20 runes",
		}
	}

	if !_ApplicationWebhook_Format_Pattern.MatchString(m.GetFormat()) {
		return ApplicationWebhookValidationError{
			field:  "Format",
			reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
		}
	}

	if v, ok := interface{}(m.GetTemplateIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookValidationError{
				field:  "TemplateIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TemplateFields

	// no validation rules for DownlinkApiKey

	if v, ok := interface{}(m.GetUplinkMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookValidationError{
				field:  "UplinkMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetJoinAccept()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookValidationError{
				field:  "JoinAccept",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkAck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookValidationError{
				field:  "DownlinkAck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkNack()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookValidationError{
				field:  "DownlinkNack",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkSent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookValidationError{
				field:  "DownlinkSent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkFailed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookValidationError{
				field:  "DownlinkFailed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkQueued()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookValidationError{
				field:  "DownlinkQueued",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownlinkQueueInvalidated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookValidationError{
				field:  "DownlinkQueueInvalidated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLocationSolved()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookValidationError{
				field:  "LocationSolved",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetServiceData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationWebhookValidationError{
				field:  "ServiceData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ApplicationWebhookValidationError is the validation error returned by
// ApplicationWebhook.Validate if the designated constraints aren't met.
type ApplicationWebhookValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationWebhookValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationWebhookValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationWebhookValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationWebhookValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationWebhookValidationError) ErrorName() string {
	return "ApplicationWebhookValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationWebhookValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationWebhook.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationWebhookValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationWebhookValidationError{}

var _ApplicationWebhook_Format_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// Validate checks the field values on ApplicationWebhooks with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationWebhooks) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWebhooks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationWebhooksValidationError{
					field:  fmt.Sprintf("Webhooks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ApplicationWebhooksValidationError is the validation error returned by
// ApplicationWebhooks.Validate if the designated constraints aren't met.
type ApplicationWebhooksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationWebhooksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationWebhooksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationWebhooksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationWebhooksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationWebhooksValidationError) ErrorName() string {
	return "ApplicationWebhooksValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationWebhooksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationWebhooks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationWebhooksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationWebhooksValidationError{}

// Validate checks the field values on ApplicationWebhookFormats with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationWebhookFormats) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Formats

	return nil
}

// ApplicationWebhookFormatsValidationError is the validation error returned by
// ApplicationWebhookFormats.Validate if the designated constraints aren't met.
type ApplicationWebhookFormatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationWebhookFormatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationWebhookFormatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationWebhookFormatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationWebhookFormatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationWebhookFormatsValidationError) ErrorName() string {
	return "ApplicationWebhookFormatsValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationWebhookFormatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationWebhookFormats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationWebhookFormatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationWebhookFormatsValidationError{}

// Validate checks the field values on GetApplicationWebhookRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetApplicationWebhookRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return GetApplicationWebhookRequestValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationWebhookRequestValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationWebhookRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetApplicationWebhookRequestValidationError is the validation error returned
// by GetApplicationWebhookRequest.Validate if the designated constraints
// aren't met.
type GetApplicationWebhookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationWebhookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationWebhookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationWebhookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationWebhookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationWebhookRequestValidationError) ErrorName() string {
	return "GetApplicationWebhookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationWebhookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationWebhookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationWebhookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationWebhookRequestValidationError{}

// Validate checks the field values on ListApplicationWebhooksRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationWebhooksRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApplicationIds() == nil {
		return ListApplicationWebhooksRequestValidationError{
			field:  "ApplicationIds",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApplicationIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationWebhooksRequestValidationError{
				field:  "ApplicationIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationWebhooksRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListApplicationWebhooksRequestValidationError is the validation error
// returned by ListApplicationWebhooksRequest.Validate if the designated
// constraints aren't met.
type ListApplicationWebhooksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationWebhooksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationWebhooksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationWebhooksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationWebhooksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationWebhooksRequestValidationError) ErrorName() string {
	return "ListApplicationWebhooksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationWebhooksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationWebhooksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationWebhooksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationWebhooksRequestValidationError{}

// Validate checks the field values on SetApplicationWebhookRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetApplicationWebhookRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetWebhook() == nil {
		return SetApplicationWebhookRequestValidationError{
			field:  "Webhook",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetWebhook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetApplicationWebhookRequestValidationError{
				field:  "Webhook",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetApplicationWebhookRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetApplicationWebhookRequestValidationError is the validation error returned
// by SetApplicationWebhookRequest.Validate if the designated constraints
// aren't met.
type SetApplicationWebhookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetApplicationWebhookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetApplicationWebhookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetApplicationWebhookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetApplicationWebhookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetApplicationWebhookRequestValidationError) ErrorName() string {
	return "SetApplicationWebhookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetApplicationWebhookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetApplicationWebhookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetApplicationWebhookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetApplicationWebhookRequestValidationError{}

// Validate checks the field values on GetApplicationWebhookTemplateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetApplicationWebhookTemplateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIds() == nil {
		return GetApplicationWebhookTemplateRequestValidationError{
			field:  "Ids",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationWebhookTemplateRequestValidationError{
				field:  "Ids",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationWebhookTemplateRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetApplicationWebhookTemplateRequestValidationError is the validation error
// returned by GetApplicationWebhookTemplateRequest.Validate if the designated
// constraints aren't met.
type GetApplicationWebhookTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationWebhookTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationWebhookTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationWebhookTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationWebhookTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationWebhookTemplateRequestValidationError) ErrorName() string {
	return "GetApplicationWebhookTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationWebhookTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationWebhookTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationWebhookTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationWebhookTemplateRequestValidationError{}

// Validate checks the field values on ListApplicationWebhookTemplatesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListApplicationWebhookTemplatesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationWebhookTemplatesRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListApplicationWebhookTemplatesRequestValidationError is the validation
// error returned by ListApplicationWebhookTemplatesRequest.Validate if the
// designated constraints aren't met.
type ListApplicationWebhookTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationWebhookTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationWebhookTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationWebhookTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationWebhookTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationWebhookTemplatesRequestValidationError) ErrorName() string {
	return "ListApplicationWebhookTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationWebhookTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationWebhookTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationWebhookTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationWebhookTemplatesRequestValidationError{}

// Validate checks the field values on ApplicationWebhookTemplate_Message with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ApplicationWebhookTemplate_Message) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Path

	return nil
}

// ApplicationWebhookTemplate_MessageValidationError is the validation error
// returned by ApplicationWebhookTemplate_Message.Validate if the designated
// constraints aren't met.
type ApplicationWebhookTemplate_MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationWebhookTemplate_MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationWebhookTemplate_MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationWebhookTemplate_MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationWebhookTemplate_MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationWebhookTemplate_MessageValidationError) ErrorName() string {
	return "ApplicationWebhookTemplate_MessageValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationWebhookTemplate_MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationWebhookTemplate_Message.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationWebhookTemplate_MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationWebhookTemplate_MessageValidationError{}

// Validate checks the field values on ApplicationWebhook_Message with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationWebhook_Message) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Path

	return nil
}

// ApplicationWebhook_MessageValidationError is the validation error returned
// by ApplicationWebhook_Message.Validate if the designated constraints aren't met.
type ApplicationWebhook_MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationWebhook_MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationWebhook_MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationWebhook_MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationWebhook_MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationWebhook_MessageValidationError) ErrorName() string {
	return "ApplicationWebhook_MessageValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationWebhook_MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationWebhook_Message.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationWebhook_MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationWebhook_MessageValidationError{}
